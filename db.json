{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/favicon.ico","path":"favicon.ico","modified":0,"renderable":0},{"_id":"source/images/icons.gif","path":"images/icons.gif","modified":0,"renderable":0},{"_id":"source/monkeysripts/update_script.py","path":"monkeysripts/update_script.py","modified":0,"renderable":0},{"_id":"source/images/blog/Chrome-shit-new-tab.png","path":"images/blog/Chrome-shit-new-tab.png","modified":0,"renderable":0},{"_id":"source/images/blog/Install-Guacamole-1.png","path":"images/blog/Install-Guacamole-1.png","modified":0,"renderable":0},{"_id":"source/images/blog/choose_network.png","path":"images/blog/choose_network.png","modified":0,"renderable":0},{"_id":"source/images/blog/enable_idrc.png","path":"images/blog/enable_idrc.png","modified":0,"renderable":0},{"_id":"source/images/blog/enable_ipmi.png","path":"images/blog/enable_ipmi.png","modified":0,"renderable":0},{"_id":"source/images/blog/Install-Guacamole-2.png","path":"images/blog/Install-Guacamole-2.png","modified":0,"renderable":0},{"_id":"source/images/blog/designate_flow.png","path":"images/blog/designate_flow.png","modified":0,"renderable":0},{"_id":"source/images/blog/libvirt_vif_plug.png","path":"images/blog/libvirt_vif_plug.png","modified":0,"renderable":0},{"_id":"source/images/blog/neutron_ovs_plugin_class.png","path":"images/blog/neutron_ovs_plugin_class.png","modified":0,"renderable":0},{"_id":"source/images/blog/set_idrac_ip.png","path":"images/blog/set_idrac_ip.png","modified":0,"renderable":0},{"_id":"source/images/blog/set_user_passwd.png","path":"images/blog/set_user_passwd.png","modified":0,"renderable":0},{"_id":"source/images/blog/user_confuguration.png","path":"images/blog/user_confuguration.png","modified":0,"renderable":0},{"_id":"source/images/blog/vim_hack_03.gif","path":"images/blog/vim_hack_03.gif","modified":0,"renderable":0},{"_id":"source/images/uml/libvirt_vif_plug.uml","path":"images/uml/libvirt_vif_plug.uml","modified":0,"renderable":0},{"_id":"source/images/uml/neutron_ovs_plugin_class.uml","path":"images/uml/neutron_ovs_plugin_class.uml","modified":0,"renderable":0},{"_id":"source/images/uml/neutron_interact_with_nova_compute.uml","path":"images/uml/neutron_interact_with_nova_compute.uml","modified":0,"renderable":0},{"_id":"themes/indigo/source/css/style.less","path":"css/style.less","modified":0,"renderable":1},{"_id":"themes/indigo/source/img/cc.png","path":"img/cc.png","modified":0,"renderable":1},{"_id":"themes/indigo/source/img/img-err.png","path":"img/img-err.png","modified":0,"renderable":1},{"_id":"themes/indigo/source/img/brand.jpg","path":"img/brand.jpg","modified":0,"renderable":1},{"_id":"themes/indigo/source/img/img-loading.png","path":"img/img-loading.png","modified":0,"renderable":1},{"_id":"themes/indigo/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"themes/indigo/source/js/search.js","path":"js/search.js","modified":0,"renderable":1},{"_id":"themes/indigo/source/img/logo.jpg","path":"img/logo.jpg","modified":0,"renderable":1},{"_id":"themes/indigo/source/js/waves.min.js","path":"js/waves.min.js","modified":0,"renderable":1},{"_id":"source/images/blog/idrac-config.png","path":"images/blog/idrac-config.png","modified":0,"renderable":0},{"_id":"source/images/blog/neutron_interact_with_nova_compute.png","path":"images/blog/neutron_interact_with_nova_compute.png","modified":0,"renderable":0},{"_id":"source/images/blog/vim_hack_01.gif","path":"images/blog/vim_hack_01.gif","modified":0,"renderable":0},{"_id":"source/images/blog/vim_hack_02.gif","path":"images/blog/vim_hack_02.gif","modified":0,"renderable":0},{"_id":"source/images/blog/Designate-MiniDNS-Pools.gif","path":"images/blog/Designate-MiniDNS-Pools.gif","modified":0,"renderable":0},{"_id":"source/images/project/Douban-Movie-Links-1.png","path":"images/project/Douban-Movie-Links-1.png","modified":0,"renderable":0},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Bold.eot","path":"css/fonts/roboto/Roboto-Bold.eot","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Bold.woff","path":"css/fonts/roboto/Roboto-Bold.woff","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Light.eot","path":"css/fonts/roboto/Roboto-Light.eot","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Bold.woff2","path":"css/fonts/roboto/Roboto-Bold.woff2","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Medium.eot","path":"css/fonts/roboto/Roboto-Medium.eot","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Light.woff","path":"css/fonts/roboto/Roboto-Light.woff","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Light.woff2","path":"css/fonts/roboto/Roboto-Light.woff2","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Medium.woff","path":"css/fonts/roboto/Roboto-Medium.woff","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Regular.eot","path":"css/fonts/roboto/Roboto-Regular.eot","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Medium.woff2","path":"css/fonts/roboto/Roboto-Medium.woff2","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Thin.eot","path":"css/fonts/roboto/Roboto-Thin.eot","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Regular.woff","path":"css/fonts/roboto/Roboto-Regular.woff","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Regular.woff2","path":"css/fonts/roboto/Roboto-Regular.woff2","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Thin.woff","path":"css/fonts/roboto/Roboto-Thin.woff","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Thin.woff2","path":"css/fonts/roboto/Roboto-Thin.woff2","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.eot","path":"css/fonts/fontawesome/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/fontawesome/FontAwesome.otf","path":"css/fonts/fontawesome/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.woff","path":"css/fonts/fontawesome/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.woff2","path":"css/fonts/fontawesome/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Bold.ttf","path":"css/fonts/roboto/Roboto-Bold.ttf","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Light.ttf","path":"css/fonts/roboto/Roboto-Light.ttf","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Medium.ttf","path":"css/fonts/roboto/Roboto-Medium.ttf","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Regular.ttf","path":"css/fonts/roboto/Roboto-Regular.ttf","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Thin.ttf","path":"css/fonts/roboto/Roboto-Thin.ttf","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.ttf","path":"css/fonts/fontawesome/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.svg","path":"css/fonts/fontawesome/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"themes/indigo/source/404.html","path":"404.html","modified":0,"renderable":1}],"Cache":[{"_id":"source/favicon.ico","hash":"c26385d654a33dbec94dce438da36826c13e9ea1","modified":1468746172000},{"_id":"themes/indigo/README.md","hash":"7da26382b8544a4d5d4acc39e789c9eacc816163","modified":1468745142000},{"_id":"themes/indigo/_config.yml","hash":"f10842e441c68baf633fc2f9f55719b74acd2c46","modified":1480585801000},{"_id":"themes/indigo/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1468747389000},{"_id":"themes/indigo/package.json","hash":"16b1325b2ef6cd72b0b02c4a66cc4c0d85fa3513","modified":1468745142000},{"_id":"source/images/icons.gif","hash":"478d2722262504858d68e51b433f19c89f4ff9d1","modified":1468750886000},{"_id":"source/monkeysripts/_.html","hash":"1071c0dd47643b2071a5ae944e33a37bc4e4e577","modified":1473301532000},{"_id":"source/monkeysripts/index.html","hash":"5708278e0b4ffcb73f7f771750f559ee14b10e88","modified":1473301532000},{"_id":"source/monkeysripts/printable_001.user.js","hash":"fc86328c8a0ed977f3e46bac5a6809a36439b57b","modified":1473301532000},{"_id":"source/monkeysripts/printable_002.user.js","hash":"4e0677198da01659f9f0fddfcc03020f375bae3c","modified":1473301532000},{"_id":"source/monkeysripts/printable_004.user.js","hash":"874c04c868401b1c903c90bdad80556f7fcd8068","modified":1473301532000},{"_id":"source/monkeysripts/printable_003.user.js","hash":"4785c1c85fd2629593a658636f7470eaf90cef43","modified":1473301532000},{"_id":"source/monkeysripts/printable_005.user.js","hash":"58606425b4e504d126c9a8648d5efe6813398923","modified":1473301532000},{"_id":"source/monkeysripts/printable_006.user.js","hash":"641acd9458b3c58dc90b48db97a21d724df1840f","modified":1473301532000},{"_id":"source/monkeysripts/printable_007.user.js","hash":"3c4012d66e6cbd964d71470aa8cd71c75156d253","modified":1473301532000},{"_id":"source/monkeysripts/printable_008.user.js","hash":"3d43fe80f2d2006187a9c71151e581faf4baeb66","modified":1473301532000},{"_id":"source/monkeysripts/update_script.py","hash":"fdd57bf15eac553102a3da05bd56d2355db19c4e","modified":1473301532000},{"_id":"source/tags/index.md","hash":"b0dd3478c4c8aa2191395dcb83577d78af5de938","modified":1468745221000},{"_id":"themes/indigo/layout/category.ejs","hash":"183ec4632c44243db391b1722aec485073417690","modified":1468745142000},{"_id":"themes/indigo/layout/index.ejs","hash":"435cc4ff472932354314379d03ada2e9db6ebfaa","modified":1468752449000},{"_id":"themes/indigo/layout/archive.ejs","hash":"b32d5a661736fd62bf32bd2c7d8ca49bc50c5c21","modified":1468752455000},{"_id":"themes/indigo/layout/layout.ejs","hash":"fc36f206a97bf65eacead631a0dbf043dcf356ac","modified":1468745142000},{"_id":"themes/indigo/layout/page.ejs","hash":"26c42241ae442942fa78e22c99b7ee7debe512e4","modified":1468745142000},{"_id":"themes/indigo/layout/post.ejs","hash":"26c42241ae442942fa78e22c99b7ee7debe512e4","modified":1468745142000},{"_id":"themes/indigo/layout/tag.ejs","hash":"183ec4632c44243db391b1722aec485073417690","modified":1468745142000},{"_id":"themes/indigo/layout/tags.ejs","hash":"cc884a2dcd04309788e8d36de32542a116798bb2","modified":1468752436000},{"_id":"source/_posts/blog/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1468743960000},{"_id":"source/_posts/project/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1468743956000},{"_id":"source/_posts/blog/delete-kindle-library.md","hash":"a8a2b0f2256be7732b31d38e09aaef7db9b39966","modified":1468755783000},{"_id":"source/_posts/blog/chrome-new-page.md","hash":"f9b668badace4a802efa81af7754d3ea7023dac2","modified":1468755223000},{"_id":"source/_posts/blog/angular-nginx-config.md","hash":"132a4bb209fd3006666245d6d476224182bfd4b3","modified":1469178437000},{"_id":"source/_posts/blog/analysis-guacamole.md","hash":"fb49386b9639485b9d867c294578f46af0c497e2","modified":1468755848000},{"_id":"source/_posts/blog/install-guacamole.md","hash":"9dff5721c9cf251cf4a34c810a93d618dd13965b","modified":1468755925000},{"_id":"source/_posts/blog/dell-r720-idrac.md","hash":"23980da84c1151292f90cfad7f2aacf45c26b368","modified":1468755230000},{"_id":"source/_posts/blog/disk-image-builder.md","hash":"f16c9ee7af5b72420e63d53334c1210f3ce5d955","modified":1468755239000},{"_id":"source/_posts/blog/first-blog.md","hash":"7900ed754ea7d812ba006f21b235967dc4d4cdf5","modified":1468755242000},{"_id":"source/_posts/blog/js-each-difference.md","hash":"6edbcc97db27c7795fc91a0abd04088553a9dae5","modified":1468755251000},{"_id":"source/_posts/blog/neutron-concepts.md","hash":"a7ca79776bb32e455882bd2cb8783e9d37a535c0","modified":1468755254000},{"_id":"source/_posts/blog/neutron-server-how-to-start.md","hash":"2b5fbf326ba4ef64e01890af207ccb34db5fdd88","modified":1468755650000},{"_id":"source/_posts/blog/nova-vif-plug.md","hash":"33d4b690bdb64d2563ebc66904d78b95968b0ed7","modified":1468755573000},{"_id":"source/_posts/blog/openstack-designate.md","hash":"d68f6bea82d91901b4bcf7df6104cd6268811e08","modified":1468755266000},{"_id":"source/_posts/blog/rabbitmq-ha-lb.md","hash":"c439834840c875d25debfd7564810ebe3db0137c","modified":1468755396000},{"_id":"source/_posts/blog/pypi-mirror.md","hash":"d45cc768fed625627f32e341e918df4c46f30c2c","modified":1468755269000},{"_id":"source/_posts/blog/resolv.conf-search-domain.md","hash":"74508c4b6ef06bf85d6a8cad1fd3db88e4a63c28","modified":1468755276000},{"_id":"source/_posts/blog/textual-uml.md","hash":"825257099c6d428459cad5a1c49502b717060058","modified":1468755752000},{"_id":"source/_posts/project/douban-movie-links.md","hash":"a22ce855f83783af788c0e9cb3ae77482fa965e5","modified":1468755309000},{"_id":"source/_posts/blog/vim-hack.md","hash":"5b9ba4017df1bdaa58d42985a02edd82bf4c07c4","modified":1468755514000},{"_id":"source/_posts/blog/transcrypt-intro.md","hash":"df3ee1e36b13b3d7e88850e3d1ed664f1e935c0c","modified":1477931446000},{"_id":"source/_posts/project/monkey-scripts.md","hash":"bf561f87ba26361db607e3c947c4f43db0724331","modified":1468755537000},{"_id":"source/images/blog/Chrome-shit-new-tab.png","hash":"f083b650edc4d15fb333e25c3665c513683ef153","modified":1468750886000},{"_id":"source/images/blog/Install-Guacamole-1.png","hash":"f2054d2677f80e276e61ec2c1314981944999a57","modified":1468750886000},{"_id":"source/images/blog/choose_network.png","hash":"2cc2f621264ad734c93950e6451aae11a3412abd","modified":1468750886000},{"_id":"source/images/blog/enable_idrc.png","hash":"40612bbe5d14c00df9101b4e564426860d05ac38","modified":1468750886000},{"_id":"source/images/blog/enable_ipmi.png","hash":"4714f951cbe5940b772269e98ae0cc364c0bc8d7","modified":1468750886000},{"_id":"source/images/blog/Install-Guacamole-2.png","hash":"f5b767707055e8605d42f723db4089aa967aba7b","modified":1468750886000},{"_id":"source/images/blog/designate_flow.png","hash":"23c1119c239e3bd70665ff021ae78f64848aa3c2","modified":1468750886000},{"_id":"source/images/blog/libvirt_vif_plug.png","hash":"c1c1278b1407a4c76d1ef61ba0ef60f47d5378fe","modified":1468750886000},{"_id":"source/images/blog/neutron_ovs_plugin_class.png","hash":"c2efa987f5cf5f548ddbdd558a0603b31e883c95","modified":1468750886000},{"_id":"source/images/blog/set_idrac_ip.png","hash":"2e1d67fd9fbffb6c51e27657fb5d090ce7050681","modified":1468750886000},{"_id":"source/images/blog/set_user_passwd.png","hash":"7fd72290090bb54d420c7e1036f651d624f56d68","modified":1468750886000},{"_id":"source/images/blog/user_confuguration.png","hash":"872f961d07070aa11f0fcb4577f0330d454c59dd","modified":1468750886000},{"_id":"source/images/blog/vim_hack_03.gif","hash":"072abbdd4910112492f3cddf6ad02d232d9f104f","modified":1468750886000},{"_id":"source/images/uml/libvirt_vif_plug.uml","hash":"ab4009965640556eb3527ebed0b3521980dd84f0","modified":1468750886000},{"_id":"source/images/uml/neutron_ovs_plugin_class.uml","hash":"e7685365b3782cca156db7533efda60262233484","modified":1468750886000},{"_id":"source/images/uml/neutron_interact_with_nova_compute.uml","hash":"83bda37249c44b71b82a74f3bf18c07ecac9133c","modified":1468750886000},{"_id":"themes/indigo/layout/_partial/after-footer.ejs","hash":"1af5defd0ec770028d0d26315e147944d8f427fb","modified":1468752672000},{"_id":"themes/indigo/layout/_partial/archive.ejs","hash":"51cf12c71469b3db65828b672b46cc7071974bda","modified":1468745142000},{"_id":"themes/indigo/layout/_partial/footer.ejs","hash":"4c104599e23d77e91f2bd79d0ae9cdafe952cb01","modified":1468745142000},{"_id":"themes/indigo/layout/_partial/google-analytics.ejs","hash":"7f926358dcae8e4b6d9e20ee9152234bc1add35f","modified":1472645563000},{"_id":"themes/indigo/layout/_partial/head.ejs","hash":"5761c6cceafd683773f78ee01ec2c92cb585cca4","modified":1486039938000},{"_id":"themes/indigo/layout/_partial/index-item.ejs","hash":"bba8497d29f405e8e6d1c8674fe7fc8f2a42cbb2","modified":1468745142000},{"_id":"themes/indigo/layout/_partial/loading.ejs","hash":"bc4cb19b20de55a0332647f4dca9684184383685","modified":1468745142000},{"_id":"themes/indigo/layout/_partial/header.ejs","hash":"fababc749dbc6fba7f84144a63e5164c6ebc0be5","modified":1469170520000},{"_id":"themes/indigo/layout/_partial/mathjax.ejs","hash":"c3394a1257a4f2cf30644016d9dc43e3a44d61dc","modified":1468745142000},{"_id":"themes/indigo/layout/_partial/menu.ejs","hash":"73ae079958f2cdc746b259fa1d0857002aa44267","modified":1468745142000},{"_id":"themes/indigo/layout/_partial/script.ejs","hash":"320091458793e6751d87a5768df68c5a6870299a","modified":1480585994000},{"_id":"themes/indigo/layout/_partial/post.ejs","hash":"527b274f15e045b623f690739575cb7fff8e6c9b","modified":1468752603000},{"_id":"themes/indigo/layout/_partial/search.ejs","hash":"1c8e7a1d512f4b81431f03eb80b0b331229799bb","modified":1468745142000},{"_id":"themes/indigo/source/css/style.less","hash":"db219f403bc931d2550f15949b9baf2df2e67821","modified":1468752624000},{"_id":"themes/indigo/source/img/cc.png","hash":"ebce75a62b40976a72d43f0bd937d859ac24d87c","modified":1468745142000},{"_id":"themes/indigo/source/img/img-err.png","hash":"23a63ea26eb3c1d5e677d9883cf36cc1a1a1228b","modified":1468745142000},{"_id":"themes/indigo/source/img/brand.jpg","hash":"0e237f1b433851c156e1f1cdaeb044054b3b9879","modified":1468745142000},{"_id":"themes/indigo/source/img/img-loading.png","hash":"a9cd5cd11866824f31e3d1c5e23badfeb3f73031","modified":1468745142000},{"_id":"themes/indigo/source/js/main.js","hash":"f810f04ae77b60b12f5d5b5e17ac4325b77c9778","modified":1468752775000},{"_id":"themes/indigo/source/js/search.js","hash":"55f55e48d7080b69416bae449d6ab59d5af79695","modified":1468745142000},{"_id":"themes/indigo/source/img/logo.jpg","hash":"fe102f7759f03174a5fed3ce38b5c123411393ae","modified":1469170148000},{"_id":"themes/indigo/source/js/waves.min.js","hash":"782d212abe569400397f5e62bd5c060f105564f7","modified":1456062371000},{"_id":"source/images/blog/idrac-config.png","hash":"de74b8faf7d5c6314ed0a17f7f794829e012eff7","modified":1468750886000},{"_id":"source/images/blog/neutron_interact_with_nova_compute.png","hash":"a918f664295a32642ac7eff2c320ba0c3a7d05a2","modified":1468750886000},{"_id":"source/images/blog/vim_hack_01.gif","hash":"90f912eaa2b2c965d3c48485eac7495563f2fe70","modified":1468750886000},{"_id":"source/images/blog/vim_hack_02.gif","hash":"d00587463b4b892b7d5dff057d2046cf0473ef4c","modified":1468750886000},{"_id":"source/images/blog/Designate-MiniDNS-Pools.gif","hash":"c5c8200fd2eb738dd3a1ac01f804e8a1a6766d0f","modified":1468750886000},{"_id":"themes/indigo/layout/_partial/post/comment.ejs","hash":"94365640b2664449c3588125bda2ae138a68ae5d","modified":1468837134000},{"_id":"themes/indigo/layout/_partial/post/category.ejs","hash":"c7476165721a3a5e34d00d8c5c07e1e5474cd800","modified":1468745142000},{"_id":"themes/indigo/layout/_partial/post/head-meta.ejs","hash":"b0c680ce5b8aaf461a6731b1ff1287bd140c168a","modified":1468745142000},{"_id":"themes/indigo/layout/_partial/post/date.ejs","hash":"528490c368d92266b6a8ea3ecab5c0f42877bac3","modified":1468745142000},{"_id":"themes/indigo/layout/_partial/post/tag.ejs","hash":"33181dbf9c126b3354a2e6a83605c40674b222b7","modified":1468745142000},{"_id":"themes/indigo/layout/_partial/post/nav.ejs","hash":"6c359ca773dee87ecf7a1553a31a9418c900583a","modified":1468745142000},{"_id":"themes/indigo/source/css/_partial/archives.less","hash":"69180b54d5d9aa460e67a245e8537fdd0b6d0640","modified":1468745142000},{"_id":"themes/indigo/layout/_partial/post/title.ejs","hash":"062d56cb88ae2be3a6616b911d4ebeffcbfe3cff","modified":1468745142000},{"_id":"themes/indigo/source/css/_partial/article.less","hash":"14dc788d6da1eb3386546df80a032186ab9d6aa9","modified":1475149596000},{"_id":"themes/indigo/source/css/_partial/header.less","hash":"bf9c09de9a989cf597ca78e78240f8496dbca4f8","modified":1468745142000},{"_id":"themes/indigo/source/css/_partial/gotop.less","hash":"b7db31b9bc563c10b9e3cf3e6d9cfddfeb3e805a","modified":1468745142000},{"_id":"themes/indigo/source/css/_partial/highlight.less","hash":"a43d79dee0f667d85bcddee23ad43e736e133ee3","modified":1468745142000},{"_id":"themes/indigo/source/css/_partial/layout.less","hash":"bb3d506fa8c40a31825f122d2a4dceb990ecf8d8","modified":1469635856000},{"_id":"themes/indigo/source/css/_partial/loading.less","hash":"c32656b8d51fca9b3bfa95f1aa44b51ade203e18","modified":1468745142000},{"_id":"themes/indigo/source/css/_partial/postlist.less","hash":"c4b080ea12670c3bbb15fa85e5a66f109fba3389","modified":1468745142000},{"_id":"themes/indigo/source/css/_partial/roboto.less","hash":"2e0469ed8161d5672d903ca1a8027cd65fe007f1","modified":1468745142000},{"_id":"themes/indigo/source/css/_partial/search.less","hash":"d73a12ca56cd710a13cb61074958c82a5cb95d63","modified":1468745142000},{"_id":"themes/indigo/source/css/_partial/tags.less","hash":"6a256bfa57547ede5e05dfa61878f582780db6ad","modified":1468745142000},{"_id":"themes/indigo/source/css/_partial/variable.less","hash":"da574cf0ad43c32dd24da6906bfc4f6c1054e07b","modified":1468745142000},{"_id":"themes/indigo/source/css/_partial/waves.less","hash":"61019c991dff98a380314b88c6f875d693c3e7e1","modified":1468745142000},{"_id":"source/images/project/Douban-Movie-Links-1.png","hash":"f10e67a7b7465f96bba573ca54630ba9fc269669","modified":1468750886000},{"_id":"themes/indigo/source/css/_partial/fontawesome.less","hash":"9d9b1946357a653adebc29859ad0de70adcc27dd","modified":1468745142000},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Bold.eot","hash":"a76cd602f5188b9fbd4ba7443dcb9c064e3dbf10","modified":1468745142000},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Bold.woff","hash":"ee99cd87a59a9a5d4092c83232bb3eec67547425","modified":1468745142000},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Light.eot","hash":"42fe156996197e5eb0c0264c5d1bb3b4681f4595","modified":1468745142000},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Bold.woff2","hash":"933b866d09c2b087707a98dab64b3888865eeb96","modified":1468745142000},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Medium.eot","hash":"1517f4b6e1c5d0e5198f937557253aac8fab0416","modified":1468745142000},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Light.woff","hash":"6300f659be9e834ab263efe2fb3c581d48b1e7b2","modified":1468745142000},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Light.woff2","hash":"bbdc28b887400fcb340b504ec2904993af42a5d7","modified":1468745142000},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Medium.woff","hash":"d45f84922131364989ad6578c7a06b6b4fc22c34","modified":1468745142000},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Regular.eot","hash":"77ae3e980ec03863ebe2587a8ef9ddfd06941db0","modified":1468745142000},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Medium.woff2","hash":"6cc1b73571af9e827c4e7e91418f476703cd4c4b","modified":1468745142000},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Thin.eot","hash":"0790a51a848dbe7292c98f9d0459218bf1a8ffdd","modified":1468745142000},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Regular.woff","hash":"74734dde8d94e7268170f9b994dedfbdcb5b3a15","modified":1468745142000},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Regular.woff2","hash":"ed1558b0541f5e01ce48c7db1588371b990eec19","modified":1468745142000},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Thin.woff","hash":"fbc3e71d456c96667d8082ab910e3946ef89240b","modified":1468745142000},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Thin.woff2","hash":"2449e3dac5ddb7c3da8bb07450493b62d052758c","modified":1468745142000},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.eot","hash":"965ce8f688fedbeed504efd498bc9c1622d12362","modified":1468745142000},{"_id":"themes/indigo/source/css/fonts/fontawesome/FontAwesome.otf","hash":"1b22f17fdc38070de50e6d1ab3a32da71aa2d819","modified":1468745142000},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.woff","hash":"6d7e6a5fc802b13694d8820fc0138037c0977d2e","modified":1468745142000},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.woff2","hash":"97e438cc545714309882fbceadbf344fcaddcec5","modified":1468745142000},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Bold.ttf","hash":"47327df0f35e7cd7c8645874897a7449697544ae","modified":1468745142000},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Light.ttf","hash":"e321c183e2b75ee19813892b7bac8d7c411cb88a","modified":1468745142000},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Medium.ttf","hash":"6060ca726b9760b76f7c347dce9d2fa1fe42ec92","modified":1468745142000},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Regular.ttf","hash":"824b5480c977a8166e177e5357d13164ccc45f47","modified":1468745142000},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Thin.ttf","hash":"173ed64528b4d010a76d8d38deb1d7e7eed58eda","modified":1468745142000},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.ttf","hash":"61d8d967807ef12598d81582fa95b9f600c3ee01","modified":1468745142000},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.svg","hash":"c0522272bbaef2acb3d341912754d6ea2d0ecfc0","modified":1468745142000},{"_id":"public/monkeysripts/printable_001.user.js","hash":"fc86328c8a0ed977f3e46bac5a6809a36439b57b","modified":1486532067744},{"_id":"public/monkeysripts/printable_002.user.js","hash":"4e0677198da01659f9f0fddfcc03020f375bae3c","modified":1486532068447},{"_id":"public/monkeysripts/printable_004.user.js","hash":"874c04c868401b1c903c90bdad80556f7fcd8068","modified":1486532068478},{"_id":"public/monkeysripts/printable_003.user.js","hash":"4785c1c85fd2629593a658636f7470eaf90cef43","modified":1486532068479},{"_id":"public/monkeysripts/printable_005.user.js","hash":"58606425b4e504d126c9a8648d5efe6813398923","modified":1486532068479},{"_id":"public/monkeysripts/printable_006.user.js","hash":"641acd9458b3c58dc90b48db97a21d724df1840f","modified":1486532068480},{"_id":"public/monkeysripts/printable_007.user.js","hash":"3c4012d66e6cbd964d71470aa8cd71c75156d253","modified":1486532068481},{"_id":"public/monkeysripts/printable_008.user.js","hash":"3d43fe80f2d2006187a9c71151e581faf4baeb66","modified":1486532068481},{"_id":"public/atom.xml","hash":"216466e96797cf5f92ed6ff3e4e66013b5d73598","modified":1486532068481},{"_id":"public/content.json","hash":"742e767374134e59285d661c9e66e8828130dcd0","modified":1486532068481},{"_id":"public/monkeysripts/index.html","hash":"e35731543bf8bdf640bd5c26b0a077492b7bb240","modified":1486532068508},{"_id":"public/tags/index.html","hash":"ff687b6c9fc07543b3ced381455b0f5d2d4a1f59","modified":1486532068508},{"_id":"public/blog/2014-09-15-blog/dell-r720-idrac/index.html","hash":"08d90a52e0d46dc20443b13809528e04e4fa5c9f","modified":1486532068508},{"_id":"public/blog/2014-07-08-blog/pypi-mirror/index.html","hash":"58f10383d9126720364bbc505297e57bcdcc9b22","modified":1486532068508},{"_id":"public/project/2014-04-03-project/monkey-scripts/index.html","hash":"0bba9f30c1052e24a9abff8b252d241320a7b6d3","modified":1486532068508},{"_id":"public/blog/2014-04-03-blog/vim-hack/index.html","hash":"de86978df524d5d491102187cb07ede62b1d74b3","modified":1486532068508},{"_id":"public/blog/2014-02-28-blog/neutron-concepts/index.html","hash":"901872eec0c628e5c45450964a967b36d143692b","modified":1486532068508},{"_id":"public/blog/2014-01-23-blog/chrome-new-page/index.html","hash":"13c7ffedeed96374b28024b08663529e33b127d8","modified":1486532068508},{"_id":"public/blog/2013-12-21-blog/resolv.conf-search-domain/index.html","hash":"d1d746eafeead6f21495c8bc4b106d4ac8f2a22d","modified":1486532068508},{"_id":"public/blog/2013-12-09-blog/delete-kindle-library/index.html","hash":"fe5720ff4965bf95b114dacc400dd8ef562799a0","modified":1486532068508},{"_id":"public/project/2013-11-22-project/douban-movie-links/index.html","hash":"6bd7b8765312a7add08d88329a5946bfc60f2f1b","modified":1486532068508},{"_id":"public/blog/2013-11-20-blog/js-each-difference/index.html","hash":"2f9f8760d7f803a737c6593ab4dc91f2820dde29","modified":1486532068508},{"_id":"public/blog/2013-11-18-blog/first-blog/index.html","hash":"1aef1bee392683e869e0bd4904298c4f8b0e9981","modified":1486532068508},{"_id":"public/archives/index.html","hash":"219a24d40358c096bc65f5a7403e117a8eec8ab6","modified":1486532068508},{"_id":"public/archives/page/2/index.html","hash":"0c4e82cf688f87f779328beb7eb12871cb9f69f0","modified":1486532068508},{"_id":"public/archives/page/3/index.html","hash":"5eeba5a3651fdc6a627c5c8f0947f5a12a7c4e2c","modified":1486532068509},{"_id":"public/archives/2013/index.html","hash":"e04988208e31cd96ca06ffb5c7ba9957f1cdda15","modified":1486532068509},{"_id":"public/archives/2013/11/index.html","hash":"4a7748b8f8fa49c342a95d11ffadcb4c0b01bd25","modified":1486532068509},{"_id":"public/archives/2013/12/index.html","hash":"ed94b0a9aa8ee007c91664a9371c80154709883b","modified":1486532068509},{"_id":"public/archives/2014/index.html","hash":"6f56c4bd8252826ec96c734424f7da9376ad24e6","modified":1486532068509},{"_id":"public/archives/2014/page/2/index.html","hash":"455350d6762d0702414084e1d711fe10f1ca0487","modified":1486532068509},{"_id":"public/archives/2014/01/index.html","hash":"fc0e1468782b2e4b7d09609a1e9b85ab595408c2","modified":1486532068509},{"_id":"public/archives/2014/02/index.html","hash":"47adabded952e7799adc70fe9e005f78707b347b","modified":1486532068509},{"_id":"public/archives/2014/03/index.html","hash":"63678d1a18a0c3ba8ca8c479e9481b948b9a0141","modified":1486532068509},{"_id":"public/archives/2014/04/index.html","hash":"9a946b16b16c5ba0946c3aed2c18482dd2b4e0f6","modified":1486532068509},{"_id":"public/archives/2014/07/index.html","hash":"59b0e7a5b3fc1536f200ad2e3b54df0b8634dbe0","modified":1486532068509},{"_id":"public/archives/2014/09/index.html","hash":"c8ae3c062cdba5f7c23a7def370ab1aa131f4357","modified":1486532068509},{"_id":"public/archives/2014/11/index.html","hash":"a1b629776fb0407d058fbdb3024aa572e97ab17d","modified":1486532068509},{"_id":"public/archives/2015/index.html","hash":"f8b8cf67945e8d5f3c3c803a67abfa85edac9673","modified":1486532068509},{"_id":"public/archives/2015/06/index.html","hash":"971e94e20ff40a9b4863f8701c5788dd3e443e42","modified":1486532068509},{"_id":"public/archives/2016/index.html","hash":"d93f98a0c27509eb5df83dba51a0a3977458182a","modified":1486532068509},{"_id":"public/archives/2016/07/index.html","hash":"3c40922eca0e1f314b2d428213926d2b1bcbba56","modified":1486532068509},{"_id":"public/archives/2016/09/index.html","hash":"8141a8c7852c5266b7b4bb627e19634a6f7bc95b","modified":1486532068509},{"_id":"public/categories/blog/index.html","hash":"496b05bc86642b1199ffe349bd6f79c096acafe1","modified":1486532068509},{"_id":"public/categories/blog/page/2/index.html","hash":"704c2c58674b3174fbbc8d29c8c52bd3e8bfc5f3","modified":1486532068509},{"_id":"public/categories/project/index.html","hash":"fc8be99bc665323858c51c1023abeaf848d29610","modified":1486532068509},{"_id":"public/page/3/index.html","hash":"422fde6c4a8ccf8460226462cbdec5aebc2dd3a8","modified":1486532068509},{"_id":"public/tags/nginx/index.html","hash":"4e25ee3d169216819b535da1b85805027a8861f3","modified":1486532068509},{"_id":"public/tags/server/index.html","hash":"992f2d2b2aa1919cc247727bfa32180d144acdbb","modified":1486532068509},{"_id":"public/tags/angular/index.html","hash":"a375ba6b1c8eca75884743f62399dd9bc516a86c","modified":1486532068510},{"_id":"public/tags/RabbitMQ/index.html","hash":"7582e9c088095bc656d420e5c3fd48935d032340","modified":1486532068510},{"_id":"public/tags/Linux/index.html","hash":"49e520f8dcf67d3a4ed71e60e44aabeb07619ccc","modified":1486532068510},{"_id":"public/tags/Server/index.html","hash":"1ee35de887440105642f3337ca27ebd7d1b9ea4a","modified":1486532068510},{"_id":"public/tags/chrome/index.html","hash":"708a3afe5484ec45caa186126de3719e65722284","modified":1486532068510},{"_id":"public/tags/project/index.html","hash":"687fcfba4c297c80f2b240b3825722d88c6c4111","modified":1486532068510},{"_id":"public/tags/transcrypt/index.html","hash":"1e769aee22f283739e51713bf9557144a51f3631","modified":1486532068510},{"_id":"public/tags/git-encrypt/index.html","hash":"0d53d22cfb6f7b11af4268eefb201129d41d9c7f","modified":1486532068510},{"_id":"public/tags/git/index.html","hash":"72f9839de9bf01a4475aa791c730a6eb9ba7962c","modified":1486532068510},{"_id":"public/uncategorized/2016-09-29-blog/transcrypt-intro/index.html","hash":"86a16aa5520a86668dd62df6af1b21019386bc2e","modified":1486532068510},{"_id":"public/uncategorized/2016-07-22-blog/angular-nginx-config/index.html","hash":"e5f183482c5e19fd74a069eeb7522db4d28a7fc6","modified":1486532068510},{"_id":"public/blog/2015-06-10-blog/openstack-designate/index.html","hash":"d53e17640a8f01470123a0c3fbe03ae15b879f62","modified":1486532068510},{"_id":"public/blog/2014-11-12-blog/rabbitmq-ha-lb/index.html","hash":"baea4ec9e41de1952e63c326846dac96f940b7d6","modified":1486532068510},{"_id":"public/blog/2014-07-21-blog/disk-image-builder/index.html","hash":"7e88f199267aa0f28437087f9ba3201d7521a327","modified":1486532068510},{"_id":"public/blog/2014-03-24-blog/nova-vif-plug/index.html","hash":"4cecee4f157d0b52e95460252980d7e78ee0346a","modified":1486532068511},{"_id":"public/blog/2014-03-21-blog/neutron-server-how-to-start/index.html","hash":"104393d0d80a234ab4e1db371170c57b4c071382","modified":1486532068511},{"_id":"public/blog/2014-01-11-blog/textual-uml/index.html","hash":"c8cd825c0206fa445ace6f09a9c0f2048034a9d4","modified":1486532068511},{"_id":"public/blog/2013-12-04-blog/analysis-guacamole/index.html","hash":"c75b18b583a33425cd7f48e3bff0c416ecaaf821","modified":1486532068511},{"_id":"public/blog/2013-11-26-blog/install-guacamole/index.html","hash":"85638ce957af56cc0255f4159ef577882ac0c246","modified":1486532068511},{"_id":"public/index.html","hash":"bfc6a9b44fca87e9ea306f2cd905a68691e8a590","modified":1486532068511},{"_id":"public/page/2/index.html","hash":"1cc7a088aeb50470ab3c2236413866f469f04547","modified":1486532068511},{"_id":"public/favicon.ico","hash":"c26385d654a33dbec94dce438da36826c13e9ea1","modified":1486532068522},{"_id":"public/images/icons.gif","hash":"478d2722262504858d68e51b433f19c89f4ff9d1","modified":1486532068524},{"_id":"public/monkeysripts/update_script.py","hash":"fdd57bf15eac553102a3da05bd56d2355db19c4e","modified":1486532068524},{"_id":"public/images/blog/Chrome-shit-new-tab.png","hash":"f083b650edc4d15fb333e25c3665c513683ef153","modified":1486532068524},{"_id":"public/images/blog/Install-Guacamole-1.png","hash":"f2054d2677f80e276e61ec2c1314981944999a57","modified":1486532068524},{"_id":"public/images/blog/choose_network.png","hash":"2cc2f621264ad734c93950e6451aae11a3412abd","modified":1486532068525},{"_id":"public/images/blog/enable_idrc.png","hash":"40612bbe5d14c00df9101b4e564426860d05ac38","modified":1486532068525},{"_id":"public/images/blog/enable_ipmi.png","hash":"4714f951cbe5940b772269e98ae0cc364c0bc8d7","modified":1486532068525},{"_id":"public/images/blog/Install-Guacamole-2.png","hash":"f5b767707055e8605d42f723db4089aa967aba7b","modified":1486532068525},{"_id":"public/images/blog/designate_flow.png","hash":"23c1119c239e3bd70665ff021ae78f64848aa3c2","modified":1486532068525},{"_id":"public/images/blog/libvirt_vif_plug.png","hash":"c1c1278b1407a4c76d1ef61ba0ef60f47d5378fe","modified":1486532068525},{"_id":"public/images/blog/neutron_ovs_plugin_class.png","hash":"c2efa987f5cf5f548ddbdd558a0603b31e883c95","modified":1486532068525},{"_id":"public/images/blog/set_idrac_ip.png","hash":"2e1d67fd9fbffb6c51e27657fb5d090ce7050681","modified":1486532068525},{"_id":"public/images/blog/set_user_passwd.png","hash":"7fd72290090bb54d420c7e1036f651d624f56d68","modified":1486532068526},{"_id":"public/images/blog/user_confuguration.png","hash":"872f961d07070aa11f0fcb4577f0330d454c59dd","modified":1486532068526},{"_id":"public/images/uml/libvirt_vif_plug.uml","hash":"ab4009965640556eb3527ebed0b3521980dd84f0","modified":1486532068525},{"_id":"public/images/blog/vim_hack_03.gif","hash":"072abbdd4910112492f3cddf6ad02d232d9f104f","modified":1486532068525},{"_id":"public/images/uml/neutron_ovs_plugin_class.uml","hash":"e7685365b3782cca156db7533efda60262233484","modified":1486532068526},{"_id":"public/images/uml/neutron_interact_with_nova_compute.uml","hash":"83bda37249c44b71b82a74f3bf18c07ecac9133c","modified":1486532068526},{"_id":"public/img/cc.png","hash":"ebce75a62b40976a72d43f0bd937d859ac24d87c","modified":1486532068526},{"_id":"public/img/img-err.png","hash":"23a63ea26eb3c1d5e677d9883cf36cc1a1a1228b","modified":1486532068526},{"_id":"public/img/brand.jpg","hash":"0e237f1b433851c156e1f1cdaeb044054b3b9879","modified":1486532068526},{"_id":"public/img/img-loading.png","hash":"a9cd5cd11866824f31e3d1c5e23badfeb3f73031","modified":1486532068526},{"_id":"public/img/logo.jpg","hash":"fe102f7759f03174a5fed3ce38b5c123411393ae","modified":1486532068526},{"_id":"public/css/fonts/roboto/Roboto-Bold.eot","hash":"a76cd602f5188b9fbd4ba7443dcb9c064e3dbf10","modified":1486532068526},{"_id":"public/css/fonts/roboto/Roboto-Light.eot","hash":"42fe156996197e5eb0c0264c5d1bb3b4681f4595","modified":1486532068526},{"_id":"public/css/fonts/roboto/Roboto-Medium.eot","hash":"1517f4b6e1c5d0e5198f937557253aac8fab0416","modified":1486532068526},{"_id":"public/css/fonts/roboto/Roboto-Bold.woff2","hash":"933b866d09c2b087707a98dab64b3888865eeb96","modified":1486532068526},{"_id":"public/css/fonts/roboto/Roboto-Bold.woff","hash":"ee99cd87a59a9a5d4092c83232bb3eec67547425","modified":1486532068526},{"_id":"public/css/fonts/roboto/Roboto-Light.woff2","hash":"bbdc28b887400fcb340b504ec2904993af42a5d7","modified":1486532068526},{"_id":"public/css/fonts/roboto/Roboto-Light.woff","hash":"6300f659be9e834ab263efe2fb3c581d48b1e7b2","modified":1486532068526},{"_id":"public/css/fonts/roboto/Roboto-Medium.woff","hash":"d45f84922131364989ad6578c7a06b6b4fc22c34","modified":1486532068526},{"_id":"public/css/fonts/roboto/Roboto-Regular.eot","hash":"77ae3e980ec03863ebe2587a8ef9ddfd06941db0","modified":1486532068527},{"_id":"public/css/fonts/roboto/Roboto-Medium.woff2","hash":"6cc1b73571af9e827c4e7e91418f476703cd4c4b","modified":1486532068527},{"_id":"public/css/fonts/roboto/Roboto-Thin.eot","hash":"0790a51a848dbe7292c98f9d0459218bf1a8ffdd","modified":1486532068527},{"_id":"public/css/fonts/roboto/Roboto-Regular.woff2","hash":"ed1558b0541f5e01ce48c7db1588371b990eec19","modified":1486532068527},{"_id":"public/css/fonts/roboto/Roboto-Regular.woff","hash":"74734dde8d94e7268170f9b994dedfbdcb5b3a15","modified":1486532068527},{"_id":"public/css/fonts/roboto/Roboto-Thin.woff2","hash":"2449e3dac5ddb7c3da8bb07450493b62d052758c","modified":1486532068527},{"_id":"public/css/fonts/roboto/Roboto-Thin.woff","hash":"fbc3e71d456c96667d8082ab910e3946ef89240b","modified":1486532068528},{"_id":"public/images/blog/idrac-config.png","hash":"de74b8faf7d5c6314ed0a17f7f794829e012eff7","modified":1486532068655},{"_id":"public/images/blog/neutron_interact_with_nova_compute.png","hash":"a918f664295a32642ac7eff2c320ba0c3a7d05a2","modified":1486532068654},{"_id":"public/images/blog/vim_hack_01.gif","hash":"90f912eaa2b2c965d3c48485eac7495563f2fe70","modified":1486532068654},{"_id":"public/images/blog/vim_hack_02.gif","hash":"d00587463b4b892b7d5dff057d2046cf0473ef4c","modified":1486532068655},{"_id":"public/css/fonts/fontawesome/fontawesome-webfont.eot","hash":"965ce8f688fedbeed504efd498bc9c1622d12362","modified":1486532068655},{"_id":"public/css/fonts/fontawesome/FontAwesome.otf","hash":"1b22f17fdc38070de50e6d1ab3a32da71aa2d819","modified":1486532068657},{"_id":"public/css/fonts/fontawesome/fontawesome-webfont.woff2","hash":"97e438cc545714309882fbceadbf344fcaddcec5","modified":1486532068657},{"_id":"public/css/fonts/roboto/Roboto-Bold.ttf","hash":"47327df0f35e7cd7c8645874897a7449697544ae","modified":1486532068656},{"_id":"public/css/fonts/fontawesome/fontawesome-webfont.woff","hash":"6d7e6a5fc802b13694d8820fc0138037c0977d2e","modified":1486532068655},{"_id":"public/css/fonts/roboto/Roboto-Medium.ttf","hash":"6060ca726b9760b76f7c347dce9d2fa1fe42ec92","modified":1486532068657},{"_id":"public/css/fonts/roboto/Roboto-Light.ttf","hash":"e321c183e2b75ee19813892b7bac8d7c411cb88a","modified":1486532068658},{"_id":"public/css/fonts/roboto/Roboto-Regular.ttf","hash":"824b5480c977a8166e177e5357d13164ccc45f47","modified":1486532068657},{"_id":"public/css/fonts/roboto/Roboto-Thin.ttf","hash":"173ed64528b4d010a76d8d38deb1d7e7eed58eda","modified":1486532068658},{"_id":"public/js/search.js","hash":"55f55e48d7080b69416bae449d6ab59d5af79695","modified":1486532068675},{"_id":"public/js/main.js","hash":"f810f04ae77b60b12f5d5b5e17ac4325b77c9778","modified":1486532068675},{"_id":"public/js/waves.min.js","hash":"782d212abe569400397f5e62bd5c060f105564f7","modified":1486532068675},{"_id":"public/images/blog/Designate-MiniDNS-Pools.gif","hash":"c5c8200fd2eb738dd3a1ac01f804e8a1a6766d0f","modified":1486532068675},{"_id":"public/css/fonts/fontawesome/fontawesome-webfont.ttf","hash":"61d8d967807ef12598d81582fa95b9f600c3ee01","modified":1486532068675},{"_id":"public/images/project/Douban-Movie-Links-1.png","hash":"f10e67a7b7465f96bba573ca54630ba9fc269669","modified":1486532068688},{"_id":"public/css/fonts/fontawesome/fontawesome-webfont.svg","hash":"c0522272bbaef2acb3d341912754d6ea2d0ecfc0","modified":1486532068705},{"_id":"public/css/style.css","hash":"192df6aa523c987b7b96bd140d5749446d9563bc","modified":1486532069223},{"_id":"themes/indigo/layout/_partial/growingio-analytics.ejs","hash":"6e522bf9ffce57b10d71e615022a5217181d346e","modified":1480586051000},{"_id":"themes/indigo/layout/_partial/.script.ejs.swp","hash":"13b238118c29373479fa54e52dc98118b25f459c","modified":1480585999000},{"_id":"themes/indigo/layout/_partial/.growingio-analytics.ejs.swp","hash":"1e323752db0c07a6119ce2e95f9cf7e5bace53e0","modified":1480586055000},{"_id":"themes/indigo/source/.404.html.swp","hash":"8bcd142e95fd4eb1279bb7350399eaccd64f61a4","modified":1480587945000},{"_id":"themes/indigo/source/404.html","hash":"11a5bf58ae188241a87e5ff51fae67bddf8e1101","modified":1480588121000},{"_id":"public/404.html","hash":"11a5bf58ae188241a87e5ff51fae67bddf8e1101","modified":1486532068675}],"Category":[{"name":"blog","_id":"ciuyae20o000cyt7l5ifx36er"},{"name":"project","_id":"ciuyae21l001gyt7l7k85unx1"}],"Data":[],"Page":[{"_content":"<html>\n  <head>\n    <link rel=\"stylesheet\" href=\"http://cdn.bootcss.com/twitter-bootstrap/3.0.3/css/bootstrap.min.css\">\n    <script src=\"http://cdn.bootcss.com/jquery/1.10.2/jquery.min.js\"></script>\n    <script src=\"http://cdn.bootcss.com/twitter-bootstrap/3.0.3/js/bootstrap.min.js\"></script>\n  </head>\n  <body>\n    <table class=\"table table-hover\">\n      <tr>\n        <th>\n          Script\n        </th>\n        <th>\n          Match\n        </th>\n        <th>\n          Version\n        </th>\n      </tr>\n      \n      <tr>\n        <td><a href=\"printable_006.user.js\">iteye博客</a></td>\n        <td>http://*.iteye.com/blog/*</td>\n        <td>1.0</td>\n      </tr>\n      \n      <tr>\n        <td><a href=\"printable_004.user.js\">51CTO博客</a></td>\n        <td>http://*.blog.51cto.com/*/*</td>\n        <td>1.1</td>\n      </tr>\n      \n      <tr>\n        <td><a href=\"printable_001.user.js\">CSDN博客</a></td>\n        <td>http://blog.csdn.net/*/article/details/*</td>\n        <td>1.5</td>\n      </tr>\n      \n      <tr>\n        <td><a href=\"printable_002.user.js\">OsChina博客</a></td>\n        <td>http://my.oschina.net/*</td>\n        <td>1.0</td>\n      </tr>\n      \n      <tr>\n        <td><a href=\"printable_005.user.js\">Rackspace博客</a></td>\n        <td>http://developer.rackspace.com/blog/*</td>\n        <td>1.0</td>\n      </tr>\n      \n      <tr>\n        <td><a href=\"printable_003.user.js\">CoolShell博客</a></td>\n        <td>http://coolshell.cn/articles/*</td>\n        <td>1.0</td>\n      </tr>\n      \n      <tr>\n        <td><a href=\"printable_007.user.js\">Chenshake博客</a></td>\n        <td>http://www.chenshake.com/*</td>\n        <td>0.3</td>\n      </tr>\n      \n      <tr>\n        <td><a href=\"printable_008.user.js\">百度推广</a></td>\n        <td>http://www.baidu.com/*</td>\n        <td>0.1</td>\n      </tr>\n      \n      </table>\n  </body>\n</html>","source":"monkeysripts/index.html","raw":"<html>\n  <head>\n    <link rel=\"stylesheet\" href=\"http://cdn.bootcss.com/twitter-bootstrap/3.0.3/css/bootstrap.min.css\">\n    <script src=\"http://cdn.bootcss.com/jquery/1.10.2/jquery.min.js\"></script>\n    <script src=\"http://cdn.bootcss.com/twitter-bootstrap/3.0.3/js/bootstrap.min.js\"></script>\n  </head>\n  <body>\n    <table class=\"table table-hover\">\n      <tr>\n        <th>\n          Script\n        </th>\n        <th>\n          Match\n        </th>\n        <th>\n          Version\n        </th>\n      </tr>\n      \n      <tr>\n        <td><a href=\"printable_006.user.js\">iteye博客</a></td>\n        <td>http://*.iteye.com/blog/*</td>\n        <td>1.0</td>\n      </tr>\n      \n      <tr>\n        <td><a href=\"printable_004.user.js\">51CTO博客</a></td>\n        <td>http://*.blog.51cto.com/*/*</td>\n        <td>1.1</td>\n      </tr>\n      \n      <tr>\n        <td><a href=\"printable_001.user.js\">CSDN博客</a></td>\n        <td>http://blog.csdn.net/*/article/details/*</td>\n        <td>1.5</td>\n      </tr>\n      \n      <tr>\n        <td><a href=\"printable_002.user.js\">OsChina博客</a></td>\n        <td>http://my.oschina.net/*</td>\n        <td>1.0</td>\n      </tr>\n      \n      <tr>\n        <td><a href=\"printable_005.user.js\">Rackspace博客</a></td>\n        <td>http://developer.rackspace.com/blog/*</td>\n        <td>1.0</td>\n      </tr>\n      \n      <tr>\n        <td><a href=\"printable_003.user.js\">CoolShell博客</a></td>\n        <td>http://coolshell.cn/articles/*</td>\n        <td>1.0</td>\n      </tr>\n      \n      <tr>\n        <td><a href=\"printable_007.user.js\">Chenshake博客</a></td>\n        <td>http://www.chenshake.com/*</td>\n        <td>0.3</td>\n      </tr>\n      \n      <tr>\n        <td><a href=\"printable_008.user.js\">百度推广</a></td>\n        <td>http://www.baidu.com/*</td>\n        <td>0.1</td>\n      </tr>\n      \n      </table>\n  </body>\n</html>","date":"2016-09-08T02:25:32.000Z","updated":"2016-09-08T02:25:32.000Z","path":"monkeysripts/index.html","title":"","comments":1,"layout":"page","_id":"ciuyae1z40000yt7lnubon6je","content":"<html>\n  <head>\n    <link rel=\"stylesheet\" href=\"http://cdn.bootcss.com/twitter-bootstrap/3.0.3/css/bootstrap.min.css\">\n    <script src=\"http://cdn.bootcss.com/jquery/1.10.2/jquery.min.js\"></script>\n    <script src=\"http://cdn.bootcss.com/twitter-bootstrap/3.0.3/js/bootstrap.min.js\"></script>\n  </head>\n  <body>\n    <table class=\"table table-hover\">\n      <tr>\n        <th>\n          Script\n        </th>\n        <th>\n          Match\n        </th>\n        <th>\n          Version\n        </th>\n      </tr>\n      \n      <tr>\n        <td><a href=\"printable_006.user.js\">iteye博客</a></td>\n        <td>http://*.iteye.com/blog/*</td>\n        <td>1.0</td>\n      </tr>\n      \n      <tr>\n        <td><a href=\"printable_004.user.js\">51CTO博客</a></td>\n        <td>http://*.blog.51cto.com/*/*</td>\n        <td>1.1</td>\n      </tr>\n      \n      <tr>\n        <td><a href=\"printable_001.user.js\">CSDN博客</a></td>\n        <td>http://blog.csdn.net/*/article/details/*</td>\n        <td>1.5</td>\n      </tr>\n      \n      <tr>\n        <td><a href=\"printable_002.user.js\">OsChina博客</a></td>\n        <td>http://my.oschina.net/*</td>\n        <td>1.0</td>\n      </tr>\n      \n      <tr>\n        <td><a href=\"printable_005.user.js\">Rackspace博客</a></td>\n        <td>http://developer.rackspace.com/blog/*</td>\n        <td>1.0</td>\n      </tr>\n      \n      <tr>\n        <td><a href=\"printable_003.user.js\">CoolShell博客</a></td>\n        <td>http://coolshell.cn/articles/*</td>\n        <td>1.0</td>\n      </tr>\n      \n      <tr>\n        <td><a href=\"printable_007.user.js\">Chenshake博客</a></td>\n        <td>http://www.chenshake.com/*</td>\n        <td>0.3</td>\n      </tr>\n      \n      <tr>\n        <td><a href=\"printable_008.user.js\">百度推广</a></td>\n        <td>http://www.baidu.com/*</td>\n        <td>0.1</td>\n      </tr>\n      \n      </table>\n  </body>\n</html>","excerpt":"","more":"<html>\n  <head>\n    <link rel=\"stylesheet\" href=\"http://cdn.bootcss.com/twitter-bootstrap/3.0.3/css/bootstrap.min.css\">\n    <script src=\"http://cdn.bootcss.com/jquery/1.10.2/jquery.min.js\"></script>\n    <script src=\"http://cdn.bootcss.com/twitter-bootstrap/3.0.3/js/bootstrap.min.js\"></script>\n  </head>\n  <body>\n    <table class=\"table table-hover\">\n      <tr>\n        <th>\n          Script\n        </th>\n        <th>\n          Match\n        </th>\n        <th>\n          Version\n        </th>\n      </tr>\n      \n      <tr>\n        <td><a href=\"printable_006.user.js\">iteye博客</a></td>\n        <td>http://*.iteye.com/blog/*</td>\n        <td>1.0</td>\n      </tr>\n      \n      <tr>\n        <td><a href=\"printable_004.user.js\">51CTO博客</a></td>\n        <td>http://*.blog.51cto.com/*/*</td>\n        <td>1.1</td>\n      </tr>\n      \n      <tr>\n        <td><a href=\"printable_001.user.js\">CSDN博客</a></td>\n        <td>http://blog.csdn.net/*/article/details/*</td>\n        <td>1.5</td>\n      </tr>\n      \n      <tr>\n        <td><a href=\"printable_002.user.js\">OsChina博客</a></td>\n        <td>http://my.oschina.net/*</td>\n        <td>1.0</td>\n      </tr>\n      \n      <tr>\n        <td><a href=\"printable_005.user.js\">Rackspace博客</a></td>\n        <td>http://developer.rackspace.com/blog/*</td>\n        <td>1.0</td>\n      </tr>\n      \n      <tr>\n        <td><a href=\"printable_003.user.js\">CoolShell博客</a></td>\n        <td>http://coolshell.cn/articles/*</td>\n        <td>1.0</td>\n      </tr>\n      \n      <tr>\n        <td><a href=\"printable_007.user.js\">Chenshake博客</a></td>\n        <td>http://www.chenshake.com/*</td>\n        <td>0.3</td>\n      </tr>\n      \n      <tr>\n        <td><a href=\"printable_008.user.js\">百度推广</a></td>\n        <td>http://www.baidu.com/*</td>\n        <td>0.1</td>\n      </tr>\n      \n      </table>\n  </body>\n</html>"},{"_content":"// ==UserScript==\n// @name        blog.csdn.net\n// @namespace   http://www.lnmpy.com\n// @version     1.5\n// @description CSDN博客\n// @match       http://blog.csdn.net/*/article/details/*\n// @author      ElvisMacak\n// @run-at      document-end\n// ==/UserScript==\n\n$('div#side').remove();\n$('div#header').remove();\n$('div#navigator').remove();\n$('div.csdn-toolbar').remove();\n$('div.notice').remove();\n$('div.tag2box').remove();\n$('div.article_manage').remove();\n$('div#comment_title.panel_head').remove();\n$('div#comment_form').remove();\n$('div#comment_list').remove();\n$('div.announce').remove();\n$('div.article_next_prev').remove();\n$('div#bdshare').remove();\n$('div#bdshare_s').remove();\n$('div.pub_footerall').remove();\n$('div#d-top').remove();\n$('div.tag_list').remove();\n$('div#digg').remove();\n$('dl.blog-associat-tag').remove();\n$('dl.blog-ass-articl').remove();\n$('a[title=\"展开\"]').parent().parent().remove();\n$('#ad_cen').remove();\n$('#_popup_msg_container').remove();\n$('#job_blog_reco').remove();\n$('.pub_fo').remove();\n$('.tracking-ad').remove();\n\n\n\n$('div#body').css('width','98%').css('border',0);\n$('div#main').css('width','98%');\n$('div#main div.main').css('border',0);\n$('div#main').css('border',0);\n$('div.main').css(\"margin-left\", 0);\n$('body').css('background', 'none');\n$('div#container').css('background', 'none');\n$('ul.article_next_prev').remove();\n$('.bdsharebuttonbox').remove()\n","source":"monkeysripts/printable_001.user.js","raw":"// ==UserScript==\n// @name        blog.csdn.net\n// @namespace   http://www.lnmpy.com\n// @version     1.5\n// @description CSDN博客\n// @match       http://blog.csdn.net/*/article/details/*\n// @author      ElvisMacak\n// @run-at      document-end\n// ==/UserScript==\n\n$('div#side').remove();\n$('div#header').remove();\n$('div#navigator').remove();\n$('div.csdn-toolbar').remove();\n$('div.notice').remove();\n$('div.tag2box').remove();\n$('div.article_manage').remove();\n$('div#comment_title.panel_head').remove();\n$('div#comment_form').remove();\n$('div#comment_list').remove();\n$('div.announce').remove();\n$('div.article_next_prev').remove();\n$('div#bdshare').remove();\n$('div#bdshare_s').remove();\n$('div.pub_footerall').remove();\n$('div#d-top').remove();\n$('div.tag_list').remove();\n$('div#digg').remove();\n$('dl.blog-associat-tag').remove();\n$('dl.blog-ass-articl').remove();\n$('a[title=\"展开\"]').parent().parent().remove();\n$('#ad_cen').remove();\n$('#_popup_msg_container').remove();\n$('#job_blog_reco').remove();\n$('.pub_fo').remove();\n$('.tracking-ad').remove();\n\n\n\n$('div#body').css('width','98%').css('border',0);\n$('div#main').css('width','98%');\n$('div#main div.main').css('border',0);\n$('div#main').css('border',0);\n$('div.main').css(\"margin-left\", 0);\n$('body').css('background', 'none');\n$('div#container').css('background', 'none');\n$('ul.article_next_prev').remove();\n$('.bdsharebuttonbox').remove()\n","date":"2016-09-08T02:25:32.000Z","updated":"2016-09-08T02:25:32.000Z","path":"monkeysripts/printable_001.user.js","layout":"false","title":"","comments":1,"_id":"ciuyae1z60001yt7ll1ddru7z","content":"// ==UserScript==\n// @name        blog.csdn.net\n// @namespace   http://www.lnmpy.com\n// @version     1.5\n// @description CSDN博客\n// @match       http://blog.csdn.net/*/article/details/*\n// @author      ElvisMacak\n// @run-at      document-end\n// ==/UserScript==\n\n$('div#side').remove();\n$('div#header').remove();\n$('div#navigator').remove();\n$('div.csdn-toolbar').remove();\n$('div.notice').remove();\n$('div.tag2box').remove();\n$('div.article_manage').remove();\n$('div#comment_title.panel_head').remove();\n$('div#comment_form').remove();\n$('div#comment_list').remove();\n$('div.announce').remove();\n$('div.article_next_prev').remove();\n$('div#bdshare').remove();\n$('div#bdshare_s').remove();\n$('div.pub_footerall').remove();\n$('div#d-top').remove();\n$('div.tag_list').remove();\n$('div#digg').remove();\n$('dl.blog-associat-tag').remove();\n$('dl.blog-ass-articl').remove();\n$('a[title=\"展开\"]').parent().parent().remove();\n$('#ad_cen').remove();\n$('#_popup_msg_container').remove();\n$('#job_blog_reco').remove();\n$('.pub_fo').remove();\n$('.tracking-ad').remove();\n\n\n\n$('div#body').css('width','98%').css('border',0);\n$('div#main').css('width','98%');\n$('div#main div.main').css('border',0);\n$('div#main').css('border',0);\n$('div.main').css(\"margin-left\", 0);\n$('body').css('background', 'none');\n$('div#container').css('background', 'none');\n$('ul.article_next_prev').remove();\n$('.bdsharebuttonbox').remove()\n","excerpt":"","more":"// ==UserScript==\n// @name        blog.csdn.net\n// @namespace   http://www.lnmpy.com\n// @version     1.5\n// @description CSDN博客\n// @match       http://blog.csdn.net/*/article/details/*\n// @author      ElvisMacak\n// @run-at      document-end\n// ==/UserScript==\n\n$('div#side').remove();\n$('div#header').remove();\n$('div#navigator').remove();\n$('div.csdn-toolbar').remove();\n$('div.notice').remove();\n$('div.tag2box').remove();\n$('div.article_manage').remove();\n$('div#comment_title.panel_head').remove();\n$('div#comment_form').remove();\n$('div#comment_list').remove();\n$('div.announce').remove();\n$('div.article_next_prev').remove();\n$('div#bdshare').remove();\n$('div#bdshare_s').remove();\n$('div.pub_footerall').remove();\n$('div#d-top').remove();\n$('div.tag_list').remove();\n$('div#digg').remove();\n$('dl.blog-associat-tag').remove();\n$('dl.blog-ass-articl').remove();\n$('a[title=\"展开\"]').parent().parent().remove();\n$('#ad_cen').remove();\n$('#_popup_msg_container').remove();\n$('#job_blog_reco').remove();\n$('.pub_fo').remove();\n$('.tracking-ad').remove();\n\n\n\n$('div#body').css('width','98%').css('border',0);\n$('div#main').css('width','98%');\n$('div#main div.main').css('border',0);\n$('div#main').css('border',0);\n$('div.main').css(\"margin-left\", 0);\n$('body').css('background', 'none');\n$('div#container').css('background', 'none');\n$('ul.article_next_prev').remove();\n$('.bdsharebuttonbox').remove()\n"},{"_content":"// ==UserScript==\n// @name        my.oschina.net\n// @namespace   http://www.lnmpy.com\n// @version     1.0\n// @description OsChina博客\n// @match       http://my.oschina.net/*\n// @author      ElvisMacak\n// @run-at      document-end\n// ==/UserScript==\n\n\n$('div#SpaceLeft').remove();\n$('div#OSC_Banner').remove();\n$('div#OSC_Topbar').remove();\n$('div#topcontrol').remove();\n$('div#RelativeBlogs').remove();\n$('div#OSC_Footer').remove();\n$('div#inline_reply_editor').remove();\n$('div.BlogComments').remove();\n$('div.BlogLinks').remove();\n$('div.BlogShare').remove();\n$('div.BlogCommentForm').remove();\n$('div.BlogCopyright').remove();\n$('div.TopBar').remove();\n$('div.BlogStat').remove();\n$('div.tvote').remove();\n\n$('div#OSC_Content div.SpaceList:first').css('margin',0);\n$('div#OSC_Content div.SpaceList').slice(1).remove();\n","source":"monkeysripts/printable_002.user.js","raw":"// ==UserScript==\n// @name        my.oschina.net\n// @namespace   http://www.lnmpy.com\n// @version     1.0\n// @description OsChina博客\n// @match       http://my.oschina.net/*\n// @author      ElvisMacak\n// @run-at      document-end\n// ==/UserScript==\n\n\n$('div#SpaceLeft').remove();\n$('div#OSC_Banner').remove();\n$('div#OSC_Topbar').remove();\n$('div#topcontrol').remove();\n$('div#RelativeBlogs').remove();\n$('div#OSC_Footer').remove();\n$('div#inline_reply_editor').remove();\n$('div.BlogComments').remove();\n$('div.BlogLinks').remove();\n$('div.BlogShare').remove();\n$('div.BlogCommentForm').remove();\n$('div.BlogCopyright').remove();\n$('div.TopBar').remove();\n$('div.BlogStat').remove();\n$('div.tvote').remove();\n\n$('div#OSC_Content div.SpaceList:first').css('margin',0);\n$('div#OSC_Content div.SpaceList').slice(1).remove();\n","date":"2016-09-08T02:25:32.000Z","updated":"2016-09-08T02:25:32.000Z","path":"monkeysripts/printable_002.user.js","layout":"false","title":"","comments":1,"_id":"ciuyae1z70002yt7lq29oiy0h","content":"// ==UserScript==\n// @name        my.oschina.net\n// @namespace   http://www.lnmpy.com\n// @version     1.0\n// @description OsChina博客\n// @match       http://my.oschina.net/*\n// @author      ElvisMacak\n// @run-at      document-end\n// ==/UserScript==\n\n\n$('div#SpaceLeft').remove();\n$('div#OSC_Banner').remove();\n$('div#OSC_Topbar').remove();\n$('div#topcontrol').remove();\n$('div#RelativeBlogs').remove();\n$('div#OSC_Footer').remove();\n$('div#inline_reply_editor').remove();\n$('div.BlogComments').remove();\n$('div.BlogLinks').remove();\n$('div.BlogShare').remove();\n$('div.BlogCommentForm').remove();\n$('div.BlogCopyright').remove();\n$('div.TopBar').remove();\n$('div.BlogStat').remove();\n$('div.tvote').remove();\n\n$('div#OSC_Content div.SpaceList:first').css('margin',0);\n$('div#OSC_Content div.SpaceList').slice(1).remove();\n","excerpt":"","more":"// ==UserScript==\n// @name        my.oschina.net\n// @namespace   http://www.lnmpy.com\n// @version     1.0\n// @description OsChina博客\n// @match       http://my.oschina.net/*\n// @author      ElvisMacak\n// @run-at      document-end\n// ==/UserScript==\n\n\n$('div#SpaceLeft').remove();\n$('div#OSC_Banner').remove();\n$('div#OSC_Topbar').remove();\n$('div#topcontrol').remove();\n$('div#RelativeBlogs').remove();\n$('div#OSC_Footer').remove();\n$('div#inline_reply_editor').remove();\n$('div.BlogComments').remove();\n$('div.BlogLinks').remove();\n$('div.BlogShare').remove();\n$('div.BlogCommentForm').remove();\n$('div.BlogCopyright').remove();\n$('div.TopBar').remove();\n$('div.BlogStat').remove();\n$('div.tvote').remove();\n\n$('div#OSC_Content div.SpaceList:first').css('margin',0);\n$('div#OSC_Content div.SpaceList').slice(1).remove();\n"},{"_content":"// ==UserScript==\n// @name        51cto.com\n// @namespace   http://www.lnmpy.com\n// @version     1.1\n// @description 51CTO博客\n// @match       http://*.blog.51cto.com/*/*\n// @author      ElvisMacak\n// @run-at      document-end\n// ==/UserScript==\n\n\n\n$('#bdshare_s').remove();\n$('#message').remove();\n$('#home_top').remove();\n$('#s3.subMenu3').remove();\n$('#share.share').remove();\n$('.headerBox').remove();\n$('.mainNav').remove();\n$('.blogLeft').remove();\n$('.CopyrightStatement').remove();\n$('.art_tj').remove();\n$('.showTags').remove();\n$('.m_sharebtn clear').remove();\n$('.showBottom').remove();\n$('div.relatedArt.box').remove();\n$('div.artComm.box').remove();\n$('form#form1').remove();\n$('div.backToTop.tops').remove();\n$('div#footer').remove();\n$('div.m_sharebtn').remove();\n$('.box.edu-col-b').remove();\n\n\n$('div.blogRight').css('width','100%');\n$('body').css('background','none');\n\n","source":"monkeysripts/printable_004.user.js","raw":"// ==UserScript==\n// @name        51cto.com\n// @namespace   http://www.lnmpy.com\n// @version     1.1\n// @description 51CTO博客\n// @match       http://*.blog.51cto.com/*/*\n// @author      ElvisMacak\n// @run-at      document-end\n// ==/UserScript==\n\n\n\n$('#bdshare_s').remove();\n$('#message').remove();\n$('#home_top').remove();\n$('#s3.subMenu3').remove();\n$('#share.share').remove();\n$('.headerBox').remove();\n$('.mainNav').remove();\n$('.blogLeft').remove();\n$('.CopyrightStatement').remove();\n$('.art_tj').remove();\n$('.showTags').remove();\n$('.m_sharebtn clear').remove();\n$('.showBottom').remove();\n$('div.relatedArt.box').remove();\n$('div.artComm.box').remove();\n$('form#form1').remove();\n$('div.backToTop.tops').remove();\n$('div#footer').remove();\n$('div.m_sharebtn').remove();\n$('.box.edu-col-b').remove();\n\n\n$('div.blogRight').css('width','100%');\n$('body').css('background','none');\n\n","date":"2016-09-08T02:25:32.000Z","updated":"2016-09-08T02:25:32.000Z","path":"monkeysripts/printable_004.user.js","layout":"false","title":"","comments":1,"_id":"ciuyae1z70003yt7l6scgu2je","content":"// ==UserScript==\n// @name        51cto.com\n// @namespace   http://www.lnmpy.com\n// @version     1.1\n// @description 51CTO博客\n// @match       http://*.blog.51cto.com/*/*\n// @author      ElvisMacak\n// @run-at      document-end\n// ==/UserScript==\n\n\n\n$('#bdshare_s').remove();\n$('#message').remove();\n$('#home_top').remove();\n$('#s3.subMenu3').remove();\n$('#share.share').remove();\n$('.headerBox').remove();\n$('.mainNav').remove();\n$('.blogLeft').remove();\n$('.CopyrightStatement').remove();\n$('.art_tj').remove();\n$('.showTags').remove();\n$('.m_sharebtn clear').remove();\n$('.showBottom').remove();\n$('div.relatedArt.box').remove();\n$('div.artComm.box').remove();\n$('form#form1').remove();\n$('div.backToTop.tops').remove();\n$('div#footer').remove();\n$('div.m_sharebtn').remove();\n$('.box.edu-col-b').remove();\n\n\n$('div.blogRight').css('width','100%');\n$('body').css('background','none');\n\n","excerpt":"","more":"// ==UserScript==\n// @name        51cto.com\n// @namespace   http://www.lnmpy.com\n// @version     1.1\n// @description 51CTO博客\n// @match       http://*.blog.51cto.com/*/*\n// @author      ElvisMacak\n// @run-at      document-end\n// ==/UserScript==\n\n\n\n$('#bdshare_s').remove();\n$('#message').remove();\n$('#home_top').remove();\n$('#s3.subMenu3').remove();\n$('#share.share').remove();\n$('.headerBox').remove();\n$('.mainNav').remove();\n$('.blogLeft').remove();\n$('.CopyrightStatement').remove();\n$('.art_tj').remove();\n$('.showTags').remove();\n$('.m_sharebtn clear').remove();\n$('.showBottom').remove();\n$('div.relatedArt.box').remove();\n$('div.artComm.box').remove();\n$('form#form1').remove();\n$('div.backToTop.tops').remove();\n$('div#footer').remove();\n$('div.m_sharebtn').remove();\n$('.box.edu-col-b').remove();\n\n\n$('div.blogRight').css('width','100%');\n$('body').css('background','none');\n\n"},{"_content":"// ==UserScript==\n// @name        coolshell.net\n// @namespace   http://www.lnmpy.com\n// @version     1.0\n// @description CoolShell博客\n// @match       http://coolshell.cn/articles/*\n// @author      ElvisMacak\n// @run-at      document-end\n// ==/UserScript==\n\n\n\n$('div#header').remove();\n$('div#navigation').remove();\n$('div#sidebar').remove();\n$('div#postpath').remove();\n$('div#related_posts').remove();\n$('div#comments').remove();\n$('div#postnavi').remove();\n$('div#footer').remove();\n$('div.info').remove();\n$('div.under').remove();\n$('div.jiathis_style').remove();\n$('div.post-ratings').remove();\n\n$('form#commentform').remove()\n\n$('div#main').css('width', '100%');\n","source":"monkeysripts/printable_003.user.js","raw":"// ==UserScript==\n// @name        coolshell.net\n// @namespace   http://www.lnmpy.com\n// @version     1.0\n// @description CoolShell博客\n// @match       http://coolshell.cn/articles/*\n// @author      ElvisMacak\n// @run-at      document-end\n// ==/UserScript==\n\n\n\n$('div#header').remove();\n$('div#navigation').remove();\n$('div#sidebar').remove();\n$('div#postpath').remove();\n$('div#related_posts').remove();\n$('div#comments').remove();\n$('div#postnavi').remove();\n$('div#footer').remove();\n$('div.info').remove();\n$('div.under').remove();\n$('div.jiathis_style').remove();\n$('div.post-ratings').remove();\n\n$('form#commentform').remove()\n\n$('div#main').css('width', '100%');\n","date":"2016-09-08T02:25:32.000Z","updated":"2016-09-08T02:25:32.000Z","path":"monkeysripts/printable_003.user.js","layout":"false","title":"","comments":1,"_id":"ciuyae1z80004yt7lcrub9kk6","content":"// ==UserScript==\n// @name        coolshell.net\n// @namespace   http://www.lnmpy.com\n// @version     1.0\n// @description CoolShell博客\n// @match       http://coolshell.cn/articles/*\n// @author      ElvisMacak\n// @run-at      document-end\n// ==/UserScript==\n\n\n\n$('div#header').remove();\n$('div#navigation').remove();\n$('div#sidebar').remove();\n$('div#postpath').remove();\n$('div#related_posts').remove();\n$('div#comments').remove();\n$('div#postnavi').remove();\n$('div#footer').remove();\n$('div.info').remove();\n$('div.under').remove();\n$('div.jiathis_style').remove();\n$('div.post-ratings').remove();\n\n$('form#commentform').remove()\n\n$('div#main').css('width', '100%');\n","excerpt":"","more":"// ==UserScript==\n// @name        coolshell.net\n// @namespace   http://www.lnmpy.com\n// @version     1.0\n// @description CoolShell博客\n// @match       http://coolshell.cn/articles/*\n// @author      ElvisMacak\n// @run-at      document-end\n// ==/UserScript==\n\n\n\n$('div#header').remove();\n$('div#navigation').remove();\n$('div#sidebar').remove();\n$('div#postpath').remove();\n$('div#related_posts').remove();\n$('div#comments').remove();\n$('div#postnavi').remove();\n$('div#footer').remove();\n$('div.info').remove();\n$('div.under').remove();\n$('div.jiathis_style').remove();\n$('div.post-ratings').remove();\n\n$('form#commentform').remove()\n\n$('div#main').css('width', '100%');\n"},{"_content":"// ==UserScript==\n// @name        rackspace.com\n// @namespace   http://www.lnmpy.com\n// @version     1.0\n// @description Rackspace博客\n// @match       http://developer.rackspace.com/blog/*\n// @author      ElvisMacak\n// @run-at      document-end\n// ==/UserScript==\n\n$('.navbar-inner').remove();\n$('.sidebar').remove();\n$('#footer').remove();\n$('footer').remove();\n$('.categories').remove();\n$('#basement-wrap').remove();\n$('article').removeClass('span9');\n","source":"monkeysripts/printable_005.user.js","raw":"// ==UserScript==\n// @name        rackspace.com\n// @namespace   http://www.lnmpy.com\n// @version     1.0\n// @description Rackspace博客\n// @match       http://developer.rackspace.com/blog/*\n// @author      ElvisMacak\n// @run-at      document-end\n// ==/UserScript==\n\n$('.navbar-inner').remove();\n$('.sidebar').remove();\n$('#footer').remove();\n$('footer').remove();\n$('.categories').remove();\n$('#basement-wrap').remove();\n$('article').removeClass('span9');\n","date":"2016-09-08T02:25:32.000Z","updated":"2016-09-08T02:25:32.000Z","path":"monkeysripts/printable_005.user.js","layout":"false","title":"","comments":1,"_id":"ciuyae1z90005yt7l1qrpfrjs","content":"// ==UserScript==\n// @name        rackspace.com\n// @namespace   http://www.lnmpy.com\n// @version     1.0\n// @description Rackspace博客\n// @match       http://developer.rackspace.com/blog/*\n// @author      ElvisMacak\n// @run-at      document-end\n// ==/UserScript==\n\n$('.navbar-inner').remove();\n$('.sidebar').remove();\n$('#footer').remove();\n$('footer').remove();\n$('.categories').remove();\n$('#basement-wrap').remove();\n$('article').removeClass('span9');\n","excerpt":"","more":"// ==UserScript==\n// @name        rackspace.com\n// @namespace   http://www.lnmpy.com\n// @version     1.0\n// @description Rackspace博客\n// @match       http://developer.rackspace.com/blog/*\n// @author      ElvisMacak\n// @run-at      document-end\n// ==/UserScript==\n\n$('.navbar-inner').remove();\n$('.sidebar').remove();\n$('#footer').remove();\n$('footer').remove();\n$('.categories').remove();\n$('#basement-wrap').remove();\n$('article').removeClass('span9');\n"},{"_content":"// ==UserScript==\n// @name        iteye.com\n// @namespace   http://www.lnmpy.com\n// @version     1.0\n// @description iteye博客\n// @match       http://*.iteye.com/blog/*\n// @author      ElvisMacak\n// @run-at      document-end\n// ==/UserScript==\n\nfunction __removeAll(nodes){for(var i = nodes.length - 1; i >= 0; i--){nodes[i].remove();};}\nfunction __clearWidth(nodes){for(var i = nodes.length - 1; i >= 0; i--){nodes[i].style.width='100%';};}\ndocument.getElementById('header').remove();\ndocument.getElementById('branding').remove();\ndocument.getElementById('footer').remove();\ndocument.getElementById('local').remove();\ndocument.getElementById('bottoms').remove();\ndocument.getElementById('page').style.backgroundColor = '#FFF';\ndocument.getElementById('main').style.width =\"100%\";\ndocument.getElementById('main').style.border = 0;\n__clearWidth(document.getElementsByClassName('blog_main'));\n__removeAll(document.getElementsByClassName('attachments'));\n__removeAll(document.getElementsByClassName('blog_categories'));\n__removeAll(document.getElementsByClassName('news_tag'));\n__removeAll(document.getElementsByClassName('blog_categories'));\n__removeAll(document.getElementsByClassName('blog_nav'));\n__removeAll(document.getElementsByClassName('blog_bottom'));\n__removeAll(document.getElementsByClassName('blog_comment'));\n","source":"monkeysripts/printable_006.user.js","raw":"// ==UserScript==\n// @name        iteye.com\n// @namespace   http://www.lnmpy.com\n// @version     1.0\n// @description iteye博客\n// @match       http://*.iteye.com/blog/*\n// @author      ElvisMacak\n// @run-at      document-end\n// ==/UserScript==\n\nfunction __removeAll(nodes){for(var i = nodes.length - 1; i >= 0; i--){nodes[i].remove();};}\nfunction __clearWidth(nodes){for(var i = nodes.length - 1; i >= 0; i--){nodes[i].style.width='100%';};}\ndocument.getElementById('header').remove();\ndocument.getElementById('branding').remove();\ndocument.getElementById('footer').remove();\ndocument.getElementById('local').remove();\ndocument.getElementById('bottoms').remove();\ndocument.getElementById('page').style.backgroundColor = '#FFF';\ndocument.getElementById('main').style.width =\"100%\";\ndocument.getElementById('main').style.border = 0;\n__clearWidth(document.getElementsByClassName('blog_main'));\n__removeAll(document.getElementsByClassName('attachments'));\n__removeAll(document.getElementsByClassName('blog_categories'));\n__removeAll(document.getElementsByClassName('news_tag'));\n__removeAll(document.getElementsByClassName('blog_categories'));\n__removeAll(document.getElementsByClassName('blog_nav'));\n__removeAll(document.getElementsByClassName('blog_bottom'));\n__removeAll(document.getElementsByClassName('blog_comment'));\n","date":"2016-09-08T02:25:32.000Z","updated":"2016-09-08T02:25:32.000Z","path":"monkeysripts/printable_006.user.js","layout":"false","title":"","comments":1,"_id":"ciuyae1ze0006yt7lxn10vn7c","content":"// ==UserScript==\n// @name        iteye.com\n// @namespace   http://www.lnmpy.com\n// @version     1.0\n// @description iteye博客\n// @match       http://*.iteye.com/blog/*\n// @author      ElvisMacak\n// @run-at      document-end\n// ==/UserScript==\n\nfunction __removeAll(nodes){for(var i = nodes.length - 1; i >= 0; i--){nodes[i].remove();};}\nfunction __clearWidth(nodes){for(var i = nodes.length - 1; i >= 0; i--){nodes[i].style.width='100%';};}\ndocument.getElementById('header').remove();\ndocument.getElementById('branding').remove();\ndocument.getElementById('footer').remove();\ndocument.getElementById('local').remove();\ndocument.getElementById('bottoms').remove();\ndocument.getElementById('page').style.backgroundColor = '#FFF';\ndocument.getElementById('main').style.width =\"100%\";\ndocument.getElementById('main').style.border = 0;\n__clearWidth(document.getElementsByClassName('blog_main'));\n__removeAll(document.getElementsByClassName('attachments'));\n__removeAll(document.getElementsByClassName('blog_categories'));\n__removeAll(document.getElementsByClassName('news_tag'));\n__removeAll(document.getElementsByClassName('blog_categories'));\n__removeAll(document.getElementsByClassName('blog_nav'));\n__removeAll(document.getElementsByClassName('blog_bottom'));\n__removeAll(document.getElementsByClassName('blog_comment'));\n","excerpt":"","more":"// ==UserScript==\n// @name        iteye.com\n// @namespace   http://www.lnmpy.com\n// @version     1.0\n// @description iteye博客\n// @match       http://*.iteye.com/blog/*\n// @author      ElvisMacak\n// @run-at      document-end\n// ==/UserScript==\n\nfunction __removeAll(nodes){for(var i = nodes.length - 1; i >= 0; i--){nodes[i].remove();};}\nfunction __clearWidth(nodes){for(var i = nodes.length - 1; i >= 0; i--){nodes[i].style.width='100%';};}\ndocument.getElementById('header').remove();\ndocument.getElementById('branding').remove();\ndocument.getElementById('footer').remove();\ndocument.getElementById('local').remove();\ndocument.getElementById('bottoms').remove();\ndocument.getElementById('page').style.backgroundColor = '#FFF';\ndocument.getElementById('main').style.width =\"100%\";\ndocument.getElementById('main').style.border = 0;\n__clearWidth(document.getElementsByClassName('blog_main'));\n__removeAll(document.getElementsByClassName('attachments'));\n__removeAll(document.getElementsByClassName('blog_categories'));\n__removeAll(document.getElementsByClassName('news_tag'));\n__removeAll(document.getElementsByClassName('blog_categories'));\n__removeAll(document.getElementsByClassName('blog_nav'));\n__removeAll(document.getElementsByClassName('blog_bottom'));\n__removeAll(document.getElementsByClassName('blog_comment'));\n"},{"_content":"// ==UserScript==\n// @name        chenshake.com\n// @namespace   http://www.lnmpy.com\n// @version     0.3\n// @description Chenshake博客\n// @match       http://www.chenshake.com/*\n// @author      ElvisMacak\n// @run-at      document-end\n// ==/UserScript==\n\n\njQuery('#header-container').remove();\njQuery('#sidebar-shell-1').remove();\njQuery('#comments').remove();\njQuery('nav.post-nav.fix').remove();\njQuery('#wrapper').css('max-width','none');\njQuery('#wrapper').css('width','96%');\njQuery('#wrapper').css('margin','20px 1%');\njQuery('#container').css('padding-right','0');\njQuery('#main-col').css('width','100%');\njQuery('#main-col').css('float','none');\njQuery('body').css('background-color','white');\n","source":"monkeysripts/printable_007.user.js","raw":"// ==UserScript==\n// @name        chenshake.com\n// @namespace   http://www.lnmpy.com\n// @version     0.3\n// @description Chenshake博客\n// @match       http://www.chenshake.com/*\n// @author      ElvisMacak\n// @run-at      document-end\n// ==/UserScript==\n\n\njQuery('#header-container').remove();\njQuery('#sidebar-shell-1').remove();\njQuery('#comments').remove();\njQuery('nav.post-nav.fix').remove();\njQuery('#wrapper').css('max-width','none');\njQuery('#wrapper').css('width','96%');\njQuery('#wrapper').css('margin','20px 1%');\njQuery('#container').css('padding-right','0');\njQuery('#main-col').css('width','100%');\njQuery('#main-col').css('float','none');\njQuery('body').css('background-color','white');\n","date":"2016-09-08T02:25:32.000Z","updated":"2016-09-08T02:25:32.000Z","path":"monkeysripts/printable_007.user.js","layout":"false","title":"","comments":1,"_id":"ciuyae1zg0007yt7lxqa579e7","content":"// ==UserScript==\n// @name        chenshake.com\n// @namespace   http://www.lnmpy.com\n// @version     0.3\n// @description Chenshake博客\n// @match       http://www.chenshake.com/*\n// @author      ElvisMacak\n// @run-at      document-end\n// ==/UserScript==\n\n\njQuery('#header-container').remove();\njQuery('#sidebar-shell-1').remove();\njQuery('#comments').remove();\njQuery('nav.post-nav.fix').remove();\njQuery('#wrapper').css('max-width','none');\njQuery('#wrapper').css('width','96%');\njQuery('#wrapper').css('margin','20px 1%');\njQuery('#container').css('padding-right','0');\njQuery('#main-col').css('width','100%');\njQuery('#main-col').css('float','none');\njQuery('body').css('background-color','white');\n","excerpt":"","more":"// ==UserScript==\n// @name        chenshake.com\n// @namespace   http://www.lnmpy.com\n// @version     0.3\n// @description Chenshake博客\n// @match       http://www.chenshake.com/*\n// @author      ElvisMacak\n// @run-at      document-end\n// ==/UserScript==\n\n\njQuery('#header-container').remove();\njQuery('#sidebar-shell-1').remove();\njQuery('#comments').remove();\njQuery('nav.post-nav.fix').remove();\njQuery('#wrapper').css('max-width','none');\njQuery('#wrapper').css('width','96%');\njQuery('#wrapper').css('margin','20px 1%');\njQuery('#container').css('padding-right','0');\njQuery('#main-col').css('width','100%');\njQuery('#main-col').css('float','none');\njQuery('body').css('background-color','white');\n"},{"_content":"// ==UserScript==\n// @name        baidu.com\n// @namespace   http://www.baidu.com\n// @version     0.1\n// @description 百度推广\n// @match       http://www.baidu.com/*\n// @author      ElvisMacak\n// @run-at      document-end\n// ==/UserScript==\n\n\njQuery('#content_left>table').remove()\njQuery('#content_left>div').map(function(e, elem){ if (elem.className != \"result c-container \") {elem.remove()}})\n","source":"monkeysripts/printable_008.user.js","raw":"// ==UserScript==\n// @name        baidu.com\n// @namespace   http://www.baidu.com\n// @version     0.1\n// @description 百度推广\n// @match       http://www.baidu.com/*\n// @author      ElvisMacak\n// @run-at      document-end\n// ==/UserScript==\n\n\njQuery('#content_left>table').remove()\njQuery('#content_left>div').map(function(e, elem){ if (elem.className != \"result c-container \") {elem.remove()}})\n","date":"2016-09-08T02:25:32.000Z","updated":"2016-09-08T02:25:32.000Z","path":"monkeysripts/printable_008.user.js","layout":"false","title":"","comments":1,"_id":"ciuyae1zi0008yt7lnl6fndl2","content":"// ==UserScript==\n// @name        baidu.com\n// @namespace   http://www.baidu.com\n// @version     0.1\n// @description 百度推广\n// @match       http://www.baidu.com/*\n// @author      ElvisMacak\n// @run-at      document-end\n// ==/UserScript==\n\n\njQuery('#content_left>table').remove()\njQuery('#content_left>div').map(function(e, elem){ if (elem.className != \"result c-container \") {elem.remove()}})\n","excerpt":"","more":"// ==UserScript==\n// @name        baidu.com\n// @namespace   http://www.baidu.com\n// @version     0.1\n// @description 百度推广\n// @match       http://www.baidu.com/*\n// @author      ElvisMacak\n// @run-at      document-end\n// ==/UserScript==\n\n\njQuery('#content_left>table').remove()\njQuery('#content_left>div').map(function(e, elem){ if (elem.className != \"result c-container \") {elem.remove()}})\n"},{"layout":"tags","noDate":true,"comments":0,"_content":"","source":"tags/index.md","raw":"---\nlayout: tags\nnoDate: true\ncomments: false\n---\n","date":"2016-07-17T08:47:01.000Z","updated":"2016-07-17T08:47:01.000Z","path":"tags/index.html","title":"","_id":"ciuyae1zx0009yt7le08hwvhv","content":"","excerpt":"","more":""}],"Post":[{"title":"清除Kindle Lirary","date":"2013-12-08T16:00:00.000Z","_content":"\n## Mark it!!\n\n网上搜了下，出来的基本上是都是[js书签版本](1)，而且支持IE。。。我就懒得折腾下那个IE了，直接开Chrome的开发工具台(右键`审核元素`，进入`控制台`即可)。再粘贴以下内。\n\n当然和那个脚本一样，一次只能删一页，搞完再自己刷新吧。等有空再弄一个插件吧。思路是嵌入脚本利用localStorage来记录刷新次数。\n\n    jQuery('tr[asin]').each(function(i,e){\n        console.log(jQuery(e).attr('asin'));\n        jQuery.post('https://www.amazon.com/gp/digital/fiona/du/fiona-delete.html',\n    {'contentName':jQuery(e).attr('asin'),'loanId':'','sid':'你的sid','isAjax':1,'category':'kindle_pdoc','orderID':'undefined'});\n    })\n\n## 相关资料\n 1. [Zhihu](http://www.zhihu.com/question/20246215)\n","source":"_posts/blog/delete-kindle-library.md","raw":"---\ntitle:  清除Kindle Lirary\ncategories: blog\ndate: 2013-12-09\n---\n\n## Mark it!!\n\n网上搜了下，出来的基本上是都是[js书签版本](1)，而且支持IE。。。我就懒得折腾下那个IE了，直接开Chrome的开发工具台(右键`审核元素`，进入`控制台`即可)。再粘贴以下内。\n\n当然和那个脚本一样，一次只能删一页，搞完再自己刷新吧。等有空再弄一个插件吧。思路是嵌入脚本利用localStorage来记录刷新次数。\n\n    jQuery('tr[asin]').each(function(i,e){\n        console.log(jQuery(e).attr('asin'));\n        jQuery.post('https://www.amazon.com/gp/digital/fiona/du/fiona-delete.html',\n    {'contentName':jQuery(e).attr('asin'),'loanId':'','sid':'你的sid','isAjax':1,'category':'kindle_pdoc','orderID':'undefined'});\n    })\n\n## 相关资料\n 1. [Zhihu](http://www.zhihu.com/question/20246215)\n","slug":"blog/delete-kindle-library","published":1,"updated":"2016-07-17T11:43:03.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciuyae20h000ayt7lxg3kg1zo","content":"<h2 id=\"Mark-it\"><a href=\"#Mark-it\" class=\"headerlink\" title=\"Mark it!!\"></a>Mark it!!</h2><p>网上搜了下，出来的基本上是都是<a href=\"1\">js书签版本</a>，而且支持IE。。。我就懒得折腾下那个IE了，直接开Chrome的开发工具台(右键<code>审核元素</code>，进入<code>控制台</code>即可)。再粘贴以下内。</p>\n<p>当然和那个脚本一样，一次只能删一页，搞完再自己刷新吧。等有空再弄一个插件吧。思路是嵌入脚本利用localStorage来记录刷新次数。</p>\n<pre><code>jQuery(&apos;tr[asin]&apos;).each(function(i,e){\n    console.log(jQuery(e).attr(&apos;asin&apos;));\n    jQuery.post(&apos;https://www.amazon.com/gp/digital/fiona/du/fiona-delete.html&apos;,\n{&apos;contentName&apos;:jQuery(e).attr(&apos;asin&apos;),&apos;loanId&apos;:&apos;&apos;,&apos;sid&apos;:&apos;你的sid&apos;,&apos;isAjax&apos;:1,&apos;category&apos;:&apos;kindle_pdoc&apos;,&apos;orderID&apos;:&apos;undefined&apos;});\n})\n</code></pre><h2 id=\"相关资料\"><a href=\"#相关资料\" class=\"headerlink\" title=\"相关资料\"></a>相关资料</h2><ol>\n<li><a href=\"http://www.zhihu.com/question/20246215\" target=\"_blank\" rel=\"external\">Zhihu</a></li>\n</ol>\n","excerpt":"","more":"<h2 id=\"Mark-it\"><a href=\"#Mark-it\" class=\"headerlink\" title=\"Mark it!!\"></a>Mark it!!</h2><p>网上搜了下，出来的基本上是都是<a href=\"1\">js书签版本</a>，而且支持IE。。。我就懒得折腾下那个IE了，直接开Chrome的开发工具台(右键<code>审核元素</code>，进入<code>控制台</code>即可)。再粘贴以下内。</p>\n<p>当然和那个脚本一样，一次只能删一页，搞完再自己刷新吧。等有空再弄一个插件吧。思路是嵌入脚本利用localStorage来记录刷新次数。</p>\n<pre><code>jQuery(&apos;tr[asin]&apos;).each(function(i,e){\n    console.log(jQuery(e).attr(&apos;asin&apos;));\n    jQuery.post(&apos;https://www.amazon.com/gp/digital/fiona/du/fiona-delete.html&apos;,\n{&apos;contentName&apos;:jQuery(e).attr(&apos;asin&apos;),&apos;loanId&apos;:&apos;&apos;,&apos;sid&apos;:&apos;你的sid&apos;,&apos;isAjax&apos;:1,&apos;category&apos;:&apos;kindle_pdoc&apos;,&apos;orderID&apos;:&apos;undefined&apos;});\n})\n</code></pre><h2 id=\"相关资料\"><a href=\"#相关资料\" class=\"headerlink\" title=\"相关资料\"></a>相关资料</h2><ol>\n<li><a href=\"http://www.zhihu.com/question/20246215\">Zhihu</a></li>\n</ol>\n"},{"title":"Chrome新标签页的定制","date":"2014-01-22T16:00:00.000Z","_content":"\n\nChrome的小白用户太多了，很多人都不知道可以直接在地址栏输入内容就可以搜索，这个“租值消耗”太大了。就像输入验证码真是太耗时间了，然后就有人打起了这个主意一样。Google估计是看不下去了，就rape(qiang jian)了广大人民群众的新标签页(New Tab)，然后就有了各种吐嘈, 这丫就长这样：\n<img src=\"/images/blog/Chrome-shit-new-tab.png\" alt=\"坑人的Chrome New Tab\">\n\n为了干掉它，我可是纠结了不少功夫，走了不少弯路。\n\n\n其实呢，在Chrome33+以前的版本中，还有这么个东西，在浏览器中输入下面的url:\n\n    chrome://flags/#enable-instant-extended-api\n\n将其值设置为`Disable`了，然后重启下chrome就可以了。\n\n\n不过想不通的是，在Chrome33+以后，竟然没有了这个选项......不得不说，Google，你好坑----\n\n\n还好，办法总是有的，于是在这种莫名奇妙的需求下就产生了两个插件:[Replace Tab Page](https://chrome.google.com/webstore/detail/replace-new-tab-page/cnkhddihkmmiiclaipbaaelfojkmlkja)和[New Tab Redirect](https://chrome.google.com/webstore/detail/new-tab-redirect/icpgjfneehieebagbmdbhnlpiopdcmna)。使用起来就非常简单了，而且更方便。这下可以回到原来清爽快捷的`chrome://apps`了(我的就是这个)。\n\n\neasy吧~\n","source":"_posts/blog/chrome-new-page.md","raw":"---\ntitle:  Chrome新标签页的定制\ncategories: blog\ndate: 2014-01-23\n---\n\n\nChrome的小白用户太多了，很多人都不知道可以直接在地址栏输入内容就可以搜索，这个“租值消耗”太大了。就像输入验证码真是太耗时间了，然后就有人打起了这个主意一样。Google估计是看不下去了，就rape(qiang jian)了广大人民群众的新标签页(New Tab)，然后就有了各种吐嘈, 这丫就长这样：\n<img src=\"/images/blog/Chrome-shit-new-tab.png\" alt=\"坑人的Chrome New Tab\">\n\n为了干掉它，我可是纠结了不少功夫，走了不少弯路。\n\n\n其实呢，在Chrome33+以前的版本中，还有这么个东西，在浏览器中输入下面的url:\n\n    chrome://flags/#enable-instant-extended-api\n\n将其值设置为`Disable`了，然后重启下chrome就可以了。\n\n\n不过想不通的是，在Chrome33+以后，竟然没有了这个选项......不得不说，Google，你好坑----\n\n\n还好，办法总是有的，于是在这种莫名奇妙的需求下就产生了两个插件:[Replace Tab Page](https://chrome.google.com/webstore/detail/replace-new-tab-page/cnkhddihkmmiiclaipbaaelfojkmlkja)和[New Tab Redirect](https://chrome.google.com/webstore/detail/new-tab-redirect/icpgjfneehieebagbmdbhnlpiopdcmna)。使用起来就非常简单了，而且更方便。这下可以回到原来清爽快捷的`chrome://apps`了(我的就是这个)。\n\n\neasy吧~\n","slug":"blog/chrome-new-page","published":1,"updated":"2016-07-17T11:33:43.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciuyae20l000byt7llyxonxz1","content":"<p>Chrome的小白用户太多了，很多人都不知道可以直接在地址栏输入内容就可以搜索，这个“租值消耗”太大了。就像输入验证码真是太耗时间了，然后就有人打起了这个主意一样。Google估计是看不下去了，就rape(qiang jian)了广大人民群众的新标签页(New Tab)，然后就有了各种吐嘈, 这丫就长这样：<br><img src=\"/images/blog/Chrome-shit-new-tab.png\" alt=\"坑人的Chrome New Tab\"></p>\n<p>为了干掉它，我可是纠结了不少功夫，走了不少弯路。</p>\n<p>其实呢，在Chrome33+以前的版本中，还有这么个东西，在浏览器中输入下面的url:</p>\n<pre><code>chrome://flags/#enable-instant-extended-api\n</code></pre><p>将其值设置为<code>Disable</code>了，然后重启下chrome就可以了。</p>\n<p>不过想不通的是，在Chrome33+以后，竟然没有了这个选项……不得不说，Google，你好坑—-</p>\n<p>还好，办法总是有的，于是在这种莫名奇妙的需求下就产生了两个插件:<a href=\"https://chrome.google.com/webstore/detail/replace-new-tab-page/cnkhddihkmmiiclaipbaaelfojkmlkja\" target=\"_blank\" rel=\"external\">Replace Tab Page</a>和<a href=\"https://chrome.google.com/webstore/detail/new-tab-redirect/icpgjfneehieebagbmdbhnlpiopdcmna\" target=\"_blank\" rel=\"external\">New Tab Redirect</a>。使用起来就非常简单了，而且更方便。这下可以回到原来清爽快捷的<code>chrome://apps</code>了(我的就是这个)。</p>\n<p>easy吧~</p>\n","excerpt":"","more":"<p>Chrome的小白用户太多了，很多人都不知道可以直接在地址栏输入内容就可以搜索，这个“租值消耗”太大了。就像输入验证码真是太耗时间了，然后就有人打起了这个主意一样。Google估计是看不下去了，就rape(qiang jian)了广大人民群众的新标签页(New Tab)，然后就有了各种吐嘈, 这丫就长这样：<br><img src=\"/images/blog/Chrome-shit-new-tab.png\" alt=\"坑人的Chrome New Tab\"></p>\n<p>为了干掉它，我可是纠结了不少功夫，走了不少弯路。</p>\n<p>其实呢，在Chrome33+以前的版本中，还有这么个东西，在浏览器中输入下面的url:</p>\n<pre><code>chrome://flags/#enable-instant-extended-api\n</code></pre><p>将其值设置为<code>Disable</code>了，然后重启下chrome就可以了。</p>\n<p>不过想不通的是，在Chrome33+以后，竟然没有了这个选项……不得不说，Google，你好坑—-</p>\n<p>还好，办法总是有的，于是在这种莫名奇妙的需求下就产生了两个插件:<a href=\"https://chrome.google.com/webstore/detail/replace-new-tab-page/cnkhddihkmmiiclaipbaaelfojkmlkja\">Replace Tab Page</a>和<a href=\"https://chrome.google.com/webstore/detail/new-tab-redirect/icpgjfneehieebagbmdbhnlpiopdcmna\">New Tab Redirect</a>。使用起来就非常简单了，而且更方便。这下可以回到原来清爽快捷的<code>chrome://apps</code>了(我的就是这个)。</p>\n<p>easy吧~</p>\n"},{"title":"AngularJs Nginx的配置","date":"2016-07-22T07:03:55.000Z","_content":"\n\n最近为一个angular的project配置Nginx时踩了些坑, 在此mark一下.\n\n## 定义\n`proxy_pass`: 就是域名的代理, 将匹配的url请求转发到对应的domain中, 简单用法如下:\n```\nlocation ^~ /api/ {\nproxy_pass http://example.com/mock-api;\n}\n```\n\n`rewrite`: 重写url, 支持正则匹配和分组提取, 简单用法如下:\n\n\n```\nrewrite /api/(.+)$ /mock-api/$1 break;\n```\n\n> rewrite 有几种不同的flag: last, break等. 常用的就这两个.\n\n## 背景\n\nAngular中的请求规则一般很简单, 主要分为三类:\n\n0. index.html\n0. 各种js, css等static资源\n0. api\n\n先介绍下背景, 一开始`api-server`负责所有的请求和资源, nginx的配置也就非常简单, 就是将所有的请求都转给api-server中.\n\n简化版的配置如下:\n\n```\nlocation @server {\n    proxy_pass http://localhost:8080;\n}\nlocation /api {\n    allow 176.168.2.100;\n    try_files $url @server;\n}\n\nlocation /static {\n    expires 86400;\n    try_files $url @server;\n}\n\nlocation / {\n    expires -1;\n    try_files $url @server;\n}\n```\n\n不过基于性能的考虑, 要将`index.html`和`static`资源都放在cdn中, `api-server`就只负责api那一部分. 所以nginx的配置变成了这样:\n\n**先提前说下, 下面的配置里面有两个bug**\n\n```\nlocation /api {\n    allow 176.168.2.100;\n    proxy_pass http://localhost:8080;\n}\n\nlocation /static {\n    expires 86400;\n    rewrite ^/.*$ /;\n    proxy_pass http://cdn/prod/static;\n}\n\nlocation / {\n    expires -1;\n    rewrite ^/.*$ /index.html;\n    proxy_pass http://cdn/prod;\n}\n```\n\n## bug1: rewrite 匹配循环\n\n> 好吧, 这里一开始是不清楚rewrite flag的区别\n\n```\nrewrite ^/.*$ /index.html;\n// 会rewrite后重新进行location的匹配\n// 也就是说 `location /`会一次一次的匹配自己, 导致nginx报错\n// 所以应该改成下面这样, break表明不再进行location的匹配\n\nrewrite ^/.*$ /index.html break;\n```\n\n## bug2: proxy_pass与rewrite一起忽略后缀\n\n```\n// 单独一个proxy_pass, 所有请求都会转到 http://cdn/prod\nlocation / {\n    proxy_pass http://cdn/prod;\n}\n```\n\n```\n// 按照这个的预期, 所有请求都会转到 http://cdn/prod/index.html\nlocation / {\n    rewrite ^/.*$ /index.html break;\n    proxy_pass http://cdn/prod;\n}\n```\n\n但事实并非如此, 实际中所有的请求都被转到了 `http://cdn/index.html`, `rewrite` 与 `proxy_pass`一起, `proxy_pass`就只认host部分\n\n```\nlocation / {\n    rewrite ^/.*$ /prod/index.html break;\n    proxy_pass http://cdn;\n}\n```\n\n这个限制完全没有想到, 通过debug_log一步一步的调试出来, 也是非常的无奈, 所以, proxy_pass比较好的使用方式就是只proxy domain比较好.\n\n\n## fixed: 正解\n所以正解应该为:\n```\nlocation /api {\n    allow 176.168.2.100;\n    proxy_pass http://localhost:8080;\n}\n\nlocation /static {\n    expires 86400;\n    rewrite ^/.*$ /;\n    proxy_pass http://cdn/prod/static;\n}\n\nlocation / {\n    expires -1;\n    rewrite ^/.*$ /prod/index.html;\n    proxy_pass http://cdn;\n}\n```\n\n## 参考\n0. [Official Reference](http://nginx.org/en/docs/http/ngx_http_proxy_module.html)\n0. [nginx配置location总结及rewrite规则写法](http://seanlook.com/2015/05/17/nginx-location-rewrite/)\n","source":"_posts/blog/angular-nginx-config.md","raw":"---\ntitle: AngularJs Nginx的配置\ndate: 2016-07-22 15:03:55\ntags:\n- nginx\n- server\n- angular\n---\n\n\n最近为一个angular的project配置Nginx时踩了些坑, 在此mark一下.\n\n## 定义\n`proxy_pass`: 就是域名的代理, 将匹配的url请求转发到对应的domain中, 简单用法如下:\n```\nlocation ^~ /api/ {\nproxy_pass http://example.com/mock-api;\n}\n```\n\n`rewrite`: 重写url, 支持正则匹配和分组提取, 简单用法如下:\n\n\n```\nrewrite /api/(.+)$ /mock-api/$1 break;\n```\n\n> rewrite 有几种不同的flag: last, break等. 常用的就这两个.\n\n## 背景\n\nAngular中的请求规则一般很简单, 主要分为三类:\n\n0. index.html\n0. 各种js, css等static资源\n0. api\n\n先介绍下背景, 一开始`api-server`负责所有的请求和资源, nginx的配置也就非常简单, 就是将所有的请求都转给api-server中.\n\n简化版的配置如下:\n\n```\nlocation @server {\n    proxy_pass http://localhost:8080;\n}\nlocation /api {\n    allow 176.168.2.100;\n    try_files $url @server;\n}\n\nlocation /static {\n    expires 86400;\n    try_files $url @server;\n}\n\nlocation / {\n    expires -1;\n    try_files $url @server;\n}\n```\n\n不过基于性能的考虑, 要将`index.html`和`static`资源都放在cdn中, `api-server`就只负责api那一部分. 所以nginx的配置变成了这样:\n\n**先提前说下, 下面的配置里面有两个bug**\n\n```\nlocation /api {\n    allow 176.168.2.100;\n    proxy_pass http://localhost:8080;\n}\n\nlocation /static {\n    expires 86400;\n    rewrite ^/.*$ /;\n    proxy_pass http://cdn/prod/static;\n}\n\nlocation / {\n    expires -1;\n    rewrite ^/.*$ /index.html;\n    proxy_pass http://cdn/prod;\n}\n```\n\n## bug1: rewrite 匹配循环\n\n> 好吧, 这里一开始是不清楚rewrite flag的区别\n\n```\nrewrite ^/.*$ /index.html;\n// 会rewrite后重新进行location的匹配\n// 也就是说 `location /`会一次一次的匹配自己, 导致nginx报错\n// 所以应该改成下面这样, break表明不再进行location的匹配\n\nrewrite ^/.*$ /index.html break;\n```\n\n## bug2: proxy_pass与rewrite一起忽略后缀\n\n```\n// 单独一个proxy_pass, 所有请求都会转到 http://cdn/prod\nlocation / {\n    proxy_pass http://cdn/prod;\n}\n```\n\n```\n// 按照这个的预期, 所有请求都会转到 http://cdn/prod/index.html\nlocation / {\n    rewrite ^/.*$ /index.html break;\n    proxy_pass http://cdn/prod;\n}\n```\n\n但事实并非如此, 实际中所有的请求都被转到了 `http://cdn/index.html`, `rewrite` 与 `proxy_pass`一起, `proxy_pass`就只认host部分\n\n```\nlocation / {\n    rewrite ^/.*$ /prod/index.html break;\n    proxy_pass http://cdn;\n}\n```\n\n这个限制完全没有想到, 通过debug_log一步一步的调试出来, 也是非常的无奈, 所以, proxy_pass比较好的使用方式就是只proxy domain比较好.\n\n\n## fixed: 正解\n所以正解应该为:\n```\nlocation /api {\n    allow 176.168.2.100;\n    proxy_pass http://localhost:8080;\n}\n\nlocation /static {\n    expires 86400;\n    rewrite ^/.*$ /;\n    proxy_pass http://cdn/prod/static;\n}\n\nlocation / {\n    expires -1;\n    rewrite ^/.*$ /prod/index.html;\n    proxy_pass http://cdn;\n}\n```\n\n## 参考\n0. [Official Reference](http://nginx.org/en/docs/http/ngx_http_proxy_module.html)\n0. [nginx配置location总结及rewrite规则写法](http://seanlook.com/2015/05/17/nginx-location-rewrite/)\n","slug":"blog/angular-nginx-config","published":1,"updated":"2016-07-22T09:07:17.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciuyae20q000dyt7l1lfn7358","content":"<p>最近为一个angular的project配置Nginx时踩了些坑, 在此mark一下.</p>\n<h2 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h2><p><code>proxy_pass</code>: 就是域名的代理, 将匹配的url请求转发到对应的domain中, 简单用法如下:<br><figure class=\"highlight nginx\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"attribute\">location</span><span class=\"regexp\"> ^~</span> /api/ &#123;</div><div class=\"line\"><span class=\"attribute\">proxy_pass</span> http://example.com/mock-api;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><code>rewrite</code>: 重写url, 支持正则匹配和分组提取, 简单用法如下:</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"code\"><pre><div class=\"line\">rewrite <span class=\"regexp\">/api/</span>(.+)$ <span class=\"regexp\">/mock-api/</span><span class=\"variable\">$1</span> <span class=\"keyword\">break</span>;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>rewrite 有几种不同的flag: last, break等. 常用的就这两个.</p>\n</blockquote>\n<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>Angular中的请求规则一般很简单, 主要分为三类:</p>\n<ol>\n<li>index.html</li>\n<li>各种js, css等static资源</li>\n<li>api</li>\n</ol>\n<p>先介绍下背景, 一开始<code>api-server</code>负责所有的请求和资源, nginx的配置也就非常简单, 就是将所有的请求都转给api-server中.</p>\n<p>简化版的配置如下:</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"attribute\">location</span> <span class=\"variable\">@server</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">proxy_pass</span> http://localhost:8080;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"attribute\">location</span> /api &#123;</div><div class=\"line\">    <span class=\"attribute\">allow</span> <span class=\"number\">176.168.2.100</span>;</div><div class=\"line\">    <span class=\"attribute\">try_files</span> <span class=\"variable\">$url</span> <span class=\"variable\">@server</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"attribute\">location</span> /static &#123;</div><div class=\"line\">    <span class=\"attribute\">expires</span> <span class=\"number\">86400</span>;</div><div class=\"line\">    <span class=\"attribute\">try_files</span> <span class=\"variable\">$url</span> <span class=\"variable\">@server</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"attribute\">location</span> / &#123;</div><div class=\"line\">    <span class=\"attribute\">expires</span> -<span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"attribute\">try_files</span> <span class=\"variable\">$url</span> <span class=\"variable\">@server</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>不过基于性能的考虑, 要将<code>index.html</code>和<code>static</code>资源都放在cdn中, <code>api-server</code>就只负责api那一部分. 所以nginx的配置变成了这样:</p>\n<p><strong>先提前说下, 下面的配置里面有两个bug</strong></p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"attribute\">location</span> /api &#123;</div><div class=\"line\">    <span class=\"attribute\">allow</span> <span class=\"number\">176.168.2.100</span>;</div><div class=\"line\">    <span class=\"attribute\">proxy_pass</span> http://localhost:8080;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"attribute\">location</span> /static &#123;</div><div class=\"line\">    <span class=\"attribute\">expires</span> <span class=\"number\">86400</span>;</div><div class=\"line\">    <span class=\"attribute\">rewrite</span><span class=\"regexp\"> ^/.*$</span> /;</div><div class=\"line\">    <span class=\"attribute\">proxy_pass</span> http://cdn/prod/static;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"attribute\">location</span> / &#123;</div><div class=\"line\">    <span class=\"attribute\">expires</span> -<span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"attribute\">rewrite</span><span class=\"regexp\"> ^/.*$</span> /index.html;</div><div class=\"line\">    <span class=\"attribute\">proxy_pass</span> http://cdn/prod;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"bug1-rewrite-匹配循环\"><a href=\"#bug1-rewrite-匹配循环\" class=\"headerlink\" title=\"bug1: rewrite 匹配循环\"></a>bug1: rewrite 匹配循环</h2><blockquote>\n<p>好吧, 这里一开始是不清楚rewrite flag的区别</p>\n</blockquote>\n<figure class=\"highlight axapta\"><table><tr><td class=\"code\"><pre><div class=\"line\">rewrite ^/.*$ /<span class=\"keyword\">index</span>.html;</div><div class=\"line\"><span class=\"comment\">// 会rewrite后重新进行location的匹配</span></div><div class=\"line\"><span class=\"comment\">// 也就是说 `location /`会一次一次的匹配自己, 导致nginx报错</span></div><div class=\"line\"><span class=\"comment\">// 所以应该改成下面这样, break表明不再进行location的匹配</span></div><div class=\"line\"></div><div class=\"line\">rewrite ^/.*$ /<span class=\"keyword\">index</span>.html <span class=\"keyword\">break</span>;</div></pre></td></tr></table></figure>\n<h2 id=\"bug2-proxy-pass与rewrite一起忽略后缀\"><a href=\"#bug2-proxy-pass与rewrite一起忽略后缀\" class=\"headerlink\" title=\"bug2: proxy_pass与rewrite一起忽略后缀\"></a>bug2: proxy_pass与rewrite一起忽略后缀</h2><figure class=\"highlight less\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 单独一个proxy_pass, 所有请求都会转到 http://cdn/prod</span></div><div class=\"line\"><span class=\"selector-tag\">location</span> / &#123;</div><div class=\"line\">    proxy_pass <span class=\"attribute\">http</span>:<span class=\"comment\">//cdn/prod;</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight crystal\"><table><tr><td class=\"code\"><pre><div class=\"line\">/<span class=\"regexp\">/ 按照这个的预期, 所有请求都会转到 http:/</span><span class=\"regexp\">/cdn/prod</span><span class=\"regexp\">/index.html</span></div><div class=\"line\">location / &#123;</div><div class=\"line\">    rewrite ^<span class=\"regexp\">/.*$ /index</span>.html <span class=\"keyword\">break</span>;</div><div class=\"line\">    proxy_pass <span class=\"symbol\">http:</span>/<span class=\"regexp\">/cdn/prod</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>但事实并非如此, 实际中所有的请求都被转到了 <code>http://cdn/index.html</code>, <code>rewrite</code> 与 <code>proxy_pass</code>一起, <code>proxy_pass</code>就只认host部分</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"attribute\">location</span> / &#123;</div><div class=\"line\">    <span class=\"attribute\">rewrite</span><span class=\"regexp\"> ^/.*$</span> /prod/index.html <span class=\"literal\">break</span>;</div><div class=\"line\">    <span class=\"attribute\">proxy_pass</span> http://cdn;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这个限制完全没有想到, 通过debug_log一步一步的调试出来, 也是非常的无奈, 所以, proxy_pass比较好的使用方式就是只proxy domain比较好.</p>\n<h2 id=\"fixed-正解\"><a href=\"#fixed-正解\" class=\"headerlink\" title=\"fixed: 正解\"></a>fixed: 正解</h2><p>所以正解应该为:<br><figure class=\"highlight nginx\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"attribute\">location</span> /api &#123;</div><div class=\"line\">    <span class=\"attribute\">allow</span> <span class=\"number\">176.168.2.100</span>;</div><div class=\"line\">    <span class=\"attribute\">proxy_pass</span> http://localhost:8080;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"attribute\">location</span> /static &#123;</div><div class=\"line\">    <span class=\"attribute\">expires</span> <span class=\"number\">86400</span>;</div><div class=\"line\">    <span class=\"attribute\">rewrite</span><span class=\"regexp\"> ^/.*$</span> /;</div><div class=\"line\">    <span class=\"attribute\">proxy_pass</span> http://cdn/prod/static;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"attribute\">location</span> / &#123;</div><div class=\"line\">    <span class=\"attribute\">expires</span> -<span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"attribute\">rewrite</span><span class=\"regexp\"> ^/.*$</span> /prod/index.html;</div><div class=\"line\">    <span class=\"attribute\">proxy_pass</span> http://cdn;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ol>\n<li><a href=\"http://nginx.org/en/docs/http/ngx_http_proxy_module.html\" target=\"_blank\" rel=\"external\">Official Reference</a></li>\n<li><a href=\"http://seanlook.com/2015/05/17/nginx-location-rewrite/\" target=\"_blank\" rel=\"external\">nginx配置location总结及rewrite规则写法</a></li>\n</ol>\n","excerpt":"","more":"<p>最近为一个angular的project配置Nginx时踩了些坑, 在此mark一下.</p>\n<h2 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h2><p><code>proxy_pass</code>: 就是域名的代理, 将匹配的url请求转发到对应的domain中, 简单用法如下:<br><figure class=\"highlight nginx\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"attribute\">location</span><span class=\"regexp\"> ^~</span> /api/ &#123;</div><div class=\"line\"><span class=\"attribute\">proxy_pass</span> http://example.com/mock-api;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><code>rewrite</code>: 重写url, 支持正则匹配和分组提取, 简单用法如下:</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"code\"><pre><div class=\"line\">rewrite <span class=\"regexp\">/api/</span>(.+)$ <span class=\"regexp\">/mock-api/</span><span class=\"variable\">$1</span> <span class=\"keyword\">break</span>;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>rewrite 有几种不同的flag: last, break等. 常用的就这两个.</p>\n</blockquote>\n<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>Angular中的请求规则一般很简单, 主要分为三类:</p>\n<ol>\n<li>index.html</li>\n<li>各种js, css等static资源</li>\n<li>api</li>\n</ol>\n<p>先介绍下背景, 一开始<code>api-server</code>负责所有的请求和资源, nginx的配置也就非常简单, 就是将所有的请求都转给api-server中.</p>\n<p>简化版的配置如下:</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"attribute\">location</span> <span class=\"variable\">@server</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">proxy_pass</span> http://localhost:8080;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"attribute\">location</span> /api &#123;</div><div class=\"line\">    <span class=\"attribute\">allow</span> <span class=\"number\">176.168.2.100</span>;</div><div class=\"line\">    <span class=\"attribute\">try_files</span> <span class=\"variable\">$url</span> <span class=\"variable\">@server</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"attribute\">location</span> /static &#123;</div><div class=\"line\">    <span class=\"attribute\">expires</span> <span class=\"number\">86400</span>;</div><div class=\"line\">    <span class=\"attribute\">try_files</span> <span class=\"variable\">$url</span> <span class=\"variable\">@server</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"attribute\">location</span> / &#123;</div><div class=\"line\">    <span class=\"attribute\">expires</span> -<span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"attribute\">try_files</span> <span class=\"variable\">$url</span> <span class=\"variable\">@server</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>不过基于性能的考虑, 要将<code>index.html</code>和<code>static</code>资源都放在cdn中, <code>api-server</code>就只负责api那一部分. 所以nginx的配置变成了这样:</p>\n<p><strong>先提前说下, 下面的配置里面有两个bug</strong></p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"attribute\">location</span> /api &#123;</div><div class=\"line\">    <span class=\"attribute\">allow</span> <span class=\"number\">176.168.2.100</span>;</div><div class=\"line\">    <span class=\"attribute\">proxy_pass</span> http://localhost:8080;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"attribute\">location</span> /static &#123;</div><div class=\"line\">    <span class=\"attribute\">expires</span> <span class=\"number\">86400</span>;</div><div class=\"line\">    <span class=\"attribute\">rewrite</span><span class=\"regexp\"> ^/.*$</span> /;</div><div class=\"line\">    <span class=\"attribute\">proxy_pass</span> http://cdn/prod/static;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"attribute\">location</span> / &#123;</div><div class=\"line\">    <span class=\"attribute\">expires</span> -<span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"attribute\">rewrite</span><span class=\"regexp\"> ^/.*$</span> /index.html;</div><div class=\"line\">    <span class=\"attribute\">proxy_pass</span> http://cdn/prod;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"bug1-rewrite-匹配循环\"><a href=\"#bug1-rewrite-匹配循环\" class=\"headerlink\" title=\"bug1: rewrite 匹配循环\"></a>bug1: rewrite 匹配循环</h2><blockquote>\n<p>好吧, 这里一开始是不清楚rewrite flag的区别</p>\n</blockquote>\n<figure class=\"highlight axapta\"><table><tr><td class=\"code\"><pre><div class=\"line\">rewrite ^/.*$ /<span class=\"keyword\">index</span>.html;</div><div class=\"line\"><span class=\"comment\">// 会rewrite后重新进行location的匹配</span></div><div class=\"line\"><span class=\"comment\">// 也就是说 `location /`会一次一次的匹配自己, 导致nginx报错</span></div><div class=\"line\"><span class=\"comment\">// 所以应该改成下面这样, break表明不再进行location的匹配</span></div><div class=\"line\"></div><div class=\"line\">rewrite ^/.*$ /<span class=\"keyword\">index</span>.html <span class=\"keyword\">break</span>;</div></pre></td></tr></table></figure>\n<h2 id=\"bug2-proxy-pass与rewrite一起忽略后缀\"><a href=\"#bug2-proxy-pass与rewrite一起忽略后缀\" class=\"headerlink\" title=\"bug2: proxy_pass与rewrite一起忽略后缀\"></a>bug2: proxy_pass与rewrite一起忽略后缀</h2><figure class=\"highlight less\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 单独一个proxy_pass, 所有请求都会转到 http://cdn/prod</span></div><div class=\"line\"><span class=\"selector-tag\">location</span> / &#123;</div><div class=\"line\">    proxy_pass <span class=\"attribute\">http</span>:<span class=\"comment\">//cdn/prod;</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight crystal\"><table><tr><td class=\"code\"><pre><div class=\"line\">/<span class=\"regexp\">/ 按照这个的预期, 所有请求都会转到 http:/</span><span class=\"regexp\">/cdn/prod</span><span class=\"regexp\">/index.html</div><div class=\"line\">location /</span> &#123;</div><div class=\"line\">    rewrite ^<span class=\"regexp\">/.*$ /index</span>.html <span class=\"keyword\">break</span>;</div><div class=\"line\">    proxy_pass <span class=\"symbol\">http:</span>/<span class=\"regexp\">/cdn/prod</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>但事实并非如此, 实际中所有的请求都被转到了 <code>http://cdn/index.html</code>, <code>rewrite</code> 与 <code>proxy_pass</code>一起, <code>proxy_pass</code>就只认host部分</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"attribute\">location</span> / &#123;</div><div class=\"line\">    <span class=\"attribute\">rewrite</span><span class=\"regexp\"> ^/.*$</span> /prod/index.html <span class=\"literal\">break</span>;</div><div class=\"line\">    <span class=\"attribute\">proxy_pass</span> http://cdn;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这个限制完全没有想到, 通过debug_log一步一步的调试出来, 也是非常的无奈, 所以, proxy_pass比较好的使用方式就是只proxy domain比较好.</p>\n<h2 id=\"fixed-正解\"><a href=\"#fixed-正解\" class=\"headerlink\" title=\"fixed: 正解\"></a>fixed: 正解</h2><p>所以正解应该为:<br><figure class=\"highlight nginx\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"attribute\">location</span> /api &#123;</div><div class=\"line\">    <span class=\"attribute\">allow</span> <span class=\"number\">176.168.2.100</span>;</div><div class=\"line\">    <span class=\"attribute\">proxy_pass</span> http://localhost:8080;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"attribute\">location</span> /static &#123;</div><div class=\"line\">    <span class=\"attribute\">expires</span> <span class=\"number\">86400</span>;</div><div class=\"line\">    <span class=\"attribute\">rewrite</span><span class=\"regexp\"> ^/.*$</span> /;</div><div class=\"line\">    <span class=\"attribute\">proxy_pass</span> http://cdn/prod/static;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"attribute\">location</span> / &#123;</div><div class=\"line\">    <span class=\"attribute\">expires</span> -<span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"attribute\">rewrite</span><span class=\"regexp\"> ^/.*$</span> /prod/index.html;</div><div class=\"line\">    <span class=\"attribute\">proxy_pass</span> http://cdn;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ol>\n<li><a href=\"http://nginx.org/en/docs/http/ngx_http_proxy_module.html\">Official Reference</a></li>\n<li><a href=\"http://seanlook.com/2015/05/17/nginx-location-rewrite/\">nginx配置location总结及rewrite规则写法</a></li>\n</ol>\n"},{"title":"Guacamole源码分析","date":"2013-12-03T16:00:00.000Z","_content":"\n## 环境的搭建\n特别注明下版本信息和时间：`Ubuntu 13.10@2013-12-03`，已upgrade到最新state，`gucamole-0.83`。\n\n对于环境的搭建，可以参考我的另外一篇博客[Ubuntu上搭建Guacamole](http://www.lnmpy.com/install-guacamole/)，不过有点啰嗦..。此处可以再简单描述下。\n\n### Guacamole的安装\n依赖的编译环境和测试运行环境，(不同的系统自己斟酌，假定你gcc等已经安装了,所以千万不要来一句`wget找不到啊`!- -)\n\n    apt-get install -y libfreerdp-dev libssl-dev libssh-dev libfreerdp-dev libvorbis-dev libpulse-dev libvncserver-dev libpango1.0-dev libcairo2-dev maven\n\n    apt-get install -y tomcat7 vnc4server\n\n\n下载源码，0.83版本，路径均我放到/tmp下\n\n\n    cd /tmp\n    wget http://downloads.sourceforge.net/project/guacamole/current/source/guacamole-client-0.8.3.tar.gz && tar -xvf guacamole-client-0.8.3.tar.gz && cd guacamole-client-0.8.3/guacamole && mvn package && ln -sf /tmp/guacamole-client-0.8.3/guacamole/target/guacamole-0.8.3.war /var/lib/tomcat7/webapps/guacamole-0.8.3.war\n\n    wget http://jaist.dl.sourceforge.net/project/guacamole/current/source/guacamole-server-0.8.3.tar.gz && tar -xvf guacamole-server-0.8.3.tar.gz && cd guacamole-server-0.8.3 && ./configure && sed -i 's/-pedantic//' src/protocols/ssh/Makefile && make && make install && guacd\n\n\n### Guacamole配置\n配置guacamole，参见http://guac-dev.org/doc/gug/configuring-guacamole.html，没有在环境变量中定义`GUACAMOLE_HOME`，默认路径在`/usr/share/tomcat7/.guacamole/`,配置文件参见我的另外一篇博客[Ubuntu上搭建Guacamole](http://www.lnmpy.com/install-guacamole/)\n\n### Guacamole的MySQL扩展\n整合MySQL的登录验证的模块参见http://guac-dev.org/doc/gug/mysql-auth.html或者[Ubuntu上搭建Guacamole](http://www.lnmpy.com/install-guacamole/)中有描述\n\n***\n\n## Guacamole的源码分析\nguacamole结构上分为4层，建议先阅读下http://guac-dev.org/doc/gug/guacamole-architecture.html和http://guac-dev.org/doc/gug/guacamole-protocol.html，就可以对Guacamole的架构和协议有个基本的认识。\n\n>\n0. JS (WebSocket/xmlhttprequest + canvas)\n0. JavaServlet\n0. guacd, 底层的daemon\n0. libfreerdp，libssh等\n\n### Guacamole协议\n原文其实也说不大清，但其实通过修改下代码，JS与JavaServlet， Servlet与guacd交互，都是采用这种格式。我贴下从guacd中抓下来的部分日志，与原文一致。\n\n    4.sync,13.1386052271656;0,1.0,1.7,2.16;l,2.14,1.0,1.0,1.0,1.0,3.255;4.rect,1.0,3.160,3.285,2.10,2.19;5.cfill,2.14,1.0,3.153,3.153,3.153,3.255;4.rect,2.-1,1.0,1.0,3.520,2.19;5.cfill,1.6,2.-1,3.103,3.255,3.103,3.255;4.rect,2.-2,1.0,1.0,3.520,2.19;5.cfill,2.14,2.-2,1.0,1.0,1.0,3.255;4.copy,2.-1,1.0,1.0,3.520,2.19,2.14,2.-2,1.0,1.0;4.copy,2.-2,2.10,1.0,2.10,2.19,2.14,1.0,1.0,3.285;4.copy,2.-2,2.20,1.0,2.10,2.19,2.14,1.0,2.10,3.285;4.rect,2.-1,3.520,1.0,2.10,2.19;5.cfill,1.2,2.-1,1.0,1.0,1.0,3.255;3.png,2.14,2.-1,3.520,1.0,380.iVBORw0KGgoAAAANSUhEUgAAAAoAAAATCAYAAACp65zuAAAABmJLR0QA/wD/AP+gvaeTAAAA0ElEQVQokeXQO0oDURSA4e/eHVjaiJWgWNiI67AZV5BnZekqLBMmVboMBMQXgjYuwS3YpkmC+IqEuTZJHMkKxL89H+fA4T8WWqm1USpHOMtDfl4dNlLjCc95yI9jN3QneEBWRbVU28EBCogQhAGO6qm+tYRRzPCWpJsVjOIVPoJQ3XqC617ova9gJ3Reg3C7hO3U3sU+Bj8XFiWpSNJhMzW35+YZJmPj+zU4M7vDC7LF5othGH6twX7of+IySafYK5VF9QvR7wbYxGhq+uiP9Q20D0RUZK/+VAAAAABJRU5ErkJggg==;\n\n\n当然，guacd与libfreerdp和libfreerdp与rdp-server是怎么交互的，这个就需要咱自己来整理了。\n### JS (WebSocket/xmlhttprequest + canvas)\n核心就是那几个js文件：\n\nscripts文件夹下的:service.js，admin-ui.js等\n\nguacamole-common-js下的guacamole.js,layer.js,tunnel.js等。\n\n#### script\n`*-ui.js`: 如其名，只是用来处理dom-ui的\n\n`session.js`: 使用localStorage来存取的，保存的是诸如clipboard,其提供了钩子函数\n\n    //钩子函数，外部赋值，又reload调用\n    this.onchange = null;\n\n    /*\n     * 监听storage，也就是说注册的外部函数会被自动调用。\n     * 典型的的是你在rdp里面粘贴板内容会更新到在textarea[id=\"clipborad\"]中\n     */\n    window.addEventListener(\"storage\", guac_state.reload, false);\n\n`history.js`: 同session.js，只是处理的是你的connection记录。\n\n`service.js`: 提供了GuacamoleService核心类，其定义了`GuacamoleService.Protocol`,`GuacamoleService.Protocol.Parameter`,`GuacamoleService.Connection`,`GuacamoleService.ConnectionGroup`等一些属性。\n还提供了以下方法（只展示部分）\n\n    /*\n     * 有权限的用户能够操作自己的Connection\n     */\n    GuacamoleService.Connections = {\n        'list':*,\n        'create':*,\n        'move':*,\n        ...\n    }\n    /*\n     * admin用户可以查看其他用户，会使用到这些方法\n     */\n    GuacamoleService.Users = {\n        'list':*,\n        'create':*,\n        ...\n    }\n    /*\n     * 创建Connection的过程中会提示选择Protocol，\n     */\n    GuacamoleService.Protocols = {\n        'list':*\n    }\n\n#### guacamole-common-js\n`mouse.js`,`keyboard.js`,`oskeyboard.js`: 创建实例会注册了一堆像`mouseout`之类的监听行为，其会被`scripts/client-ui.js`调用。\n\n     /*\n      * 以下代码在scripts/client-ui.js中\n      */\n     var keyboard = new Guacamole.Keyboard(document);\n     ...\n     // 定义好钩子函数，会帮我们自动调用\n     keyboard.onkeyup = function (keysym) {\n        guac.sendKeyEvent(1, keysym);\n        ...\n     /*\n      * 以下代码在guacamole-common-js/guacamole.js中\n      */\n     this.sendKeyEvent = function(pressed, keysym) {\n       if (!isConnected())\n         return;\n       tunnel.sendMessage(\"key\", keysym, pressed);// 利用tunnel.js来发送请求\n     };\n\n     //！！！！注意，尽管又是监听事件，又是请求网络，但这里并不涉及到图形的绘制，其不与layer.js直接交互\n\n\n`layer.js`: 提供canvas， 以及围绕这这个canvas的各个自定义的接口\n\n    // 创建一个canvas, 然后各种在这个canvas上进行操作\n    var display = document.createElement(\"canvas\");\n\n`audtio.js`: 没啥特别的， 只是需要提出的是:\n\n    if (window.webkitAudioContext) {\n        // 使用webkitAudioContext来播放，当然性能更高了\n    }else{\n        // 使用Audio类，使用base64编码的值来播放\n    }\n\n`tunnel.js`: 判断浏览器是否支持WebSocket，如果不支持则采用性能较低的xmlHtttpRequest，轮询。这里只是网络请求的封装，并不涉及到协议格式。这里我也没有太多细看。懵懂，点到为止。\n\n`guacamole.js`: 最核心的部分了，其主要涉及两项任务:（业务实现较多，但也就这样了）\n\n - JS部分协议的定义，解析数据，重绘layer，如\"size\"操作等\n - 内部定义一个Interval，相当于while(true)来重绘layer。\n\n### JavaServlet\nTODO\n\n### guacd, 底层的daemon服务\n分为三个部分:\n\n - guacd\n - libguac\n - protocols\n\n#### guacd\nguacd只是一个简单的daemon，只用来监听网络。\n\n    int main(...) {\n        ...\n        for (;;) {\n            ...\n            connected_socket_fd = accept(socket_fd, (struct sockaddr*) &client_addr, &client_addr_len); // BLOCK监听的\n            fork(); // 判断那我就免了。\n            socket = guac_socket_open(connected_socket_fd);\n            guacd_handle_connection(socket);\n            ...\n        }\n        ...\n    }\n\n    void guacd_handle_connection(guac_socket* socket) {\n        ...\n        // 先获取各种参数，libguac下的api\n        select = guac_instruction_expect(socket, GUACD_USEC_TIMEOUT, \"select\");\n        ...\n        // 启动线程来执行网络操作\n        guacd_client_start(client); //\n        ...\n\n    }\n\n    int guacd_client_start(guac_client* client) {\n        ...\n        // 起了两个线程\n        // 注意两个线程的参数都是client，也就是读写同一个socket，只是划分了责任而已\n        pthread_create(&output_thread, NULL, __guacd_client_output_thread, (void*) client);\n        pthread_create(&input_thread, NULL, __guacd_client_input_thread, (void*) client);\n        ...\n    }\n\n    void* __guacd_client_input_thread(void* data) {\n        // 当然有个while True\n        ...\n        // 读取指令，libguac下的api\n        guac_instruction* instruction = guac_instruction_read(socket, GUACD_USEC_TIMEOUT);\n        ...\n        // 再调用libguac中的函数来实现对应指令的操作，之后再讨论细节\n        guac_client_handle_instruction(client, instruction);\n        ...\n    }\n\n    void* __guacd_client_output_thread(void* data) {\n        // 当然有个while True\n        ...\n        // 发送同步信息\n        guac_protocol_send_sync(socket, client->last_sent_timestamp)\n        guac_socket_flush(socket);\n        ...\n        // 同步信息加上instruction指令信息，由protocol部分来实现。\n        guac_protocol_send_sync(socket, client->last_sent_timestamp)\n        client->handle_messages(client);\n        guac_socket_flush(socket);\n        ...\n    }\n\n以上基本上就是guacd的功能结构了，结构简单，很清晰，我就一锅端了，不具体表明在哪个文件中\n\n#### libguac\n这里面就重点了解几个文件就行了，我挑几个描述下其部分代码。\n##### socket.h/c\n提供了`guac_socket`定义，一些socket操作方法\n\n    struct guac_socket {\n        void* data;\n        ...\n        guac_socket_write_handler* write_handler; //需要外部定义的接口\n        ...\n    }\n\n    ssize_t guac_socket_write(guac_socket* socket,\n            const void* buf, size_t count) {\n        ...\n        int written = __guac_socket_write(socket, buffer, count);\n        ...\n    }\n\n    static ssize_t __guac_socket_write(guac_socket* socket,\n        const void* buf, size_t count) {\n        ...\n        if (socket->write_handler)\n            return socket->write_handler(socket, buf, count); // 这个write_handler的初始化在socket-fd.c中\n        ...\n    }\n\n##### protocol.h/c\n提供协议的各种操作指令的发送，以及定义了\n\n\n    typedef enum guac_composite_mode;\n    typedef enum guac_transfer_function;\n\n    // 一堆协议方法，这些是对外直接开放的，用户可以利用这些来编写自定义的protocol插件\n    int guac_protocol_send_move(guac_socket* socket, const guac_layer* layer,\n        const guac_layer* parent, int x, int y, int z);\n\n\n    // 简单的sync可以看到实现如下，也就是对socket的写操作，只是封装了下，这样我们就接触不到任何内部的协议了\n    int guac_protocol_send_sync(guac_socket* socket, guac_timestamp timestamp) {\n        guac_socket_instruction_begin(socket); // 加锁\n        ret_val =\n               guac_socket_write_string(socket, \"4.sync,\")\n            || __guac_socket_write_length_int(socket, timestamp)\n            || guac_socket_write_string(socket, \";\");\n\n        guac_socket_instruction_end(socket); // 释放锁\n        return ret_val;\n    }\n\n##### instruction.h/c\n提供instruction的定义\n\n    typedef struct guac_instruction {\n        char* opcode;\n        int argc;\n        char** argv;\n    } guac_instruction;\n\n    guac_instruction* guac_instruction_read(guac_socket* socket,\n            int usec_timeout) {\n        while (...) {\n            char c = socket->__instructionbuf[i++];\n            if (c >= '0' && c <= '9')\n                ...\n            else if (c == '.') {\n                if (...) {\n                    if (terminator == ';') {\n                        ...\n                        parsed_instruction->opcode = strdup(socket->__instructionbuf_elementv[0]);\n                        memmove(socket->__instructionbuf, socket->__instructionbuf + i, socket->__instructionbuf_used_length - i);\n                        socket->__instructionbuf_used_length -= i;\n                        socket->__instructionbuf_parse_start = 0;\n                        socket->__instructionbuf_elementc = 0;\n                        return parsed_instruction;\n                    }\n                    else if (terminator != ',') {\n                        return NULL;\n                    }\n\n                }\n            }\n            else {\n                ...\n            }\n        }\n    }\n\n    // 还记得guacd里面的这个方法的调用吧，其实也就是对协议交互流程的一个不成文的规定而已\n    guac_instruction* guac_instruction_expect(guac_socket* socket, int usec_timeout,\n            const char* opcode) {\n        instruction = guac_instruction_read(socket, usec_timeout);\n        if (strcmp(instruction->opcode, opcode) != 0) {\n            return NULL;\n        }\n        return instruction;\n    }\n\n#### protocols(以rdp为例)\n中文搜一下，竟然大多数的文章都是说rdp是微软的。。。好吧，我开始也被迷惑了，后来仔细搜了下，它原来是由国际电信联盟定义的，后来产生了各个不同的实现版本，基本都兼容。所以这个`freerdp`也是兼容windows的。\n\n在`protocols/rdp`下，代码不少，但其实更多的是对libfreerdp的封装，内部调用的是`libguac`的众多接口，并使用libguac下的`protocol_*`系列方法，。\n\n\n    // 协议需要实现guac_client_init\n    int guac_client_init(guac_client* client, int argc, char** argv){\n        ...\n        client->data = guac_client_data;// 操作client->data，即可实现数据的导出\n        ...\n        rdp_inst = freerdp_new();\n        // 这几个相当于初始化rdp_inst，按照接口的要求定义一些钩子函数吧\n        rdp_inst->PreConnect = rdp_freerdp_pre_connect;\n        rdp_inst->PostConnect = rdp_freerdp_post_connect;\n        rdp_inst->Authenticate = rdp_freerdp_authenticate;\n        rdp_inst->VerifyCertificate = rdp_freerdp_verify_certificate;\n        rdp_inst->ReceiveChannelData = __guac_receive_channel_data;\n        //中间要设置一堆一堆的参数\n        ...\n        freerdp_connect(rdp_inst);\n        ...\n    }\n\n    /*\n     * 下边这个函数，就是在钩子函数rdp_freerdp_pre_connect中初始化相关的数据,\n     * 定义的另外一钩子函数。\n     * 反正我们就不管它的调用了吧，只负责实现好相关的接口，处理好连个协议之间的转换工作即可\n     * 从下面的部分代码中就可以看到，rdp相关的操作最后都转成相应的guac_protocol调用了\n     */\n    void guac_rdp_gdi_patblt(rdpContext* context, PATBLT_ORDER* patblt) {\n        ...\n        guac_client* client = ((rdp_freerdp_context*) context)->client;\n        rdp_guac_client_data* data = (rdp_guac_client_data*) client->data;\n        ...\n        switch (patblt->bRop) {\n            case 0x00:\n                guac_protocol_send_rect(client->socket, current_layer, x, y, w, h);\n                guac_protocol_send_cfill(client->socket,\n                        GUAC_COMP_OVER, current_layer,\n                        0x00, 0x00, 0x00, 0xFF);\n                break;\n            case 0xAA:\n                break;\n            case 0xCC:\n            case 0xF0:\n                ...\n            case 0xFF:\n                guac_protocol_send_rect(client->socket, current_layer, x, y, w, h);\n                guac_protocol_send_cfill(client->socket,\n                        GUAC_COMP_OVER, current_layer,\n                        0xFF, 0xFF, 0xFF, 0xFF);\n                break;\n            default:\n                ...\n        }\n    }\n\n\n### guacd, libfreerdp，libssh等\n好了，到这里我感觉就开始是天坑的开始了，rdp我愣是没找到一个完整讲解其协议格式的文件。https://github.com/FreeRDP/FreeRDP/wiki/Reference-Documentation，在这个上面列举了一堆内部使用或者引用到的技术。\n不过蹦到MS的MSDN上，说找下Example看下的，看到的只有这个。。\n\n    00000000    03 00 00 00 10 00 00 00-00 00 00 00 01 00 00 00\n    ................\n\n    03 00 00 00   MILCTRLCMD_OPENCONNECTION::controlCode = 0x00000003\n    10 00 00 00   MILCTRLCMD_OPENCONNECTION::messageSize = 0x10 = 16 bytes\n    00 00 00 00   MILCTRLCMD_OPENCONNECTION::unused (4 bytes)\n    01 00 00 00   MILCTRLCMD_OPENCONNECTION::connectingFlags = MilConnection::IsDwm\n\n好吧，也确实是Example，不过，天坑，你就放过我吧。\n\n好了，折腾了这么将近一天时间，也是搞得最长的一篇博客了，欢迎拍砖。\n\n## 相关资料\n 1. [Guacamole](http://guac-dev.org/)\n 2. [FreeRDP](http://www.freerdp.com/)\n 3. [RDP-GitHub-Refs](https://github.com/FreeRDP/FreeRDP/wiki/Reference-Documentation)\n 4. [Wikipedia](http://en.wikipedia.org/wiki/Remote_Desktop_Protocol)\n 5. [MSDN](http://social.msdn.microsoft.com/Forums/zh-CN/af15dea6-c0c0-440e-b432-783edc4b8526/rdp-protocol-specification)\n","source":"_posts/blog/analysis-guacamole.md","raw":"---\ntitle:  Guacamole源码分析\ncategories: blog\ndate: 2013-12-04\n---\n\n## 环境的搭建\n特别注明下版本信息和时间：`Ubuntu 13.10@2013-12-03`，已upgrade到最新state，`gucamole-0.83`。\n\n对于环境的搭建，可以参考我的另外一篇博客[Ubuntu上搭建Guacamole](http://www.lnmpy.com/install-guacamole/)，不过有点啰嗦..。此处可以再简单描述下。\n\n### Guacamole的安装\n依赖的编译环境和测试运行环境，(不同的系统自己斟酌，假定你gcc等已经安装了,所以千万不要来一句`wget找不到啊`!- -)\n\n    apt-get install -y libfreerdp-dev libssl-dev libssh-dev libfreerdp-dev libvorbis-dev libpulse-dev libvncserver-dev libpango1.0-dev libcairo2-dev maven\n\n    apt-get install -y tomcat7 vnc4server\n\n\n下载源码，0.83版本，路径均我放到/tmp下\n\n\n    cd /tmp\n    wget http://downloads.sourceforge.net/project/guacamole/current/source/guacamole-client-0.8.3.tar.gz && tar -xvf guacamole-client-0.8.3.tar.gz && cd guacamole-client-0.8.3/guacamole && mvn package && ln -sf /tmp/guacamole-client-0.8.3/guacamole/target/guacamole-0.8.3.war /var/lib/tomcat7/webapps/guacamole-0.8.3.war\n\n    wget http://jaist.dl.sourceforge.net/project/guacamole/current/source/guacamole-server-0.8.3.tar.gz && tar -xvf guacamole-server-0.8.3.tar.gz && cd guacamole-server-0.8.3 && ./configure && sed -i 's/-pedantic//' src/protocols/ssh/Makefile && make && make install && guacd\n\n\n### Guacamole配置\n配置guacamole，参见http://guac-dev.org/doc/gug/configuring-guacamole.html，没有在环境变量中定义`GUACAMOLE_HOME`，默认路径在`/usr/share/tomcat7/.guacamole/`,配置文件参见我的另外一篇博客[Ubuntu上搭建Guacamole](http://www.lnmpy.com/install-guacamole/)\n\n### Guacamole的MySQL扩展\n整合MySQL的登录验证的模块参见http://guac-dev.org/doc/gug/mysql-auth.html或者[Ubuntu上搭建Guacamole](http://www.lnmpy.com/install-guacamole/)中有描述\n\n***\n\n## Guacamole的源码分析\nguacamole结构上分为4层，建议先阅读下http://guac-dev.org/doc/gug/guacamole-architecture.html和http://guac-dev.org/doc/gug/guacamole-protocol.html，就可以对Guacamole的架构和协议有个基本的认识。\n\n>\n0. JS (WebSocket/xmlhttprequest + canvas)\n0. JavaServlet\n0. guacd, 底层的daemon\n0. libfreerdp，libssh等\n\n### Guacamole协议\n原文其实也说不大清，但其实通过修改下代码，JS与JavaServlet， Servlet与guacd交互，都是采用这种格式。我贴下从guacd中抓下来的部分日志，与原文一致。\n\n    4.sync,13.1386052271656;0,1.0,1.7,2.16;l,2.14,1.0,1.0,1.0,1.0,3.255;4.rect,1.0,3.160,3.285,2.10,2.19;5.cfill,2.14,1.0,3.153,3.153,3.153,3.255;4.rect,2.-1,1.0,1.0,3.520,2.19;5.cfill,1.6,2.-1,3.103,3.255,3.103,3.255;4.rect,2.-2,1.0,1.0,3.520,2.19;5.cfill,2.14,2.-2,1.0,1.0,1.0,3.255;4.copy,2.-1,1.0,1.0,3.520,2.19,2.14,2.-2,1.0,1.0;4.copy,2.-2,2.10,1.0,2.10,2.19,2.14,1.0,1.0,3.285;4.copy,2.-2,2.20,1.0,2.10,2.19,2.14,1.0,2.10,3.285;4.rect,2.-1,3.520,1.0,2.10,2.19;5.cfill,1.2,2.-1,1.0,1.0,1.0,3.255;3.png,2.14,2.-1,3.520,1.0,380.iVBORw0KGgoAAAANSUhEUgAAAAoAAAATCAYAAACp65zuAAAABmJLR0QA/wD/AP+gvaeTAAAA0ElEQVQokeXQO0oDURSA4e/eHVjaiJWgWNiI67AZV5BnZekqLBMmVboMBMQXgjYuwS3YpkmC+IqEuTZJHMkKxL89H+fA4T8WWqm1USpHOMtDfl4dNlLjCc95yI9jN3QneEBWRbVU28EBCogQhAGO6qm+tYRRzPCWpJsVjOIVPoJQ3XqC617ova9gJ3Reg3C7hO3U3sU+Bj8XFiWpSNJhMzW35+YZJmPj+zU4M7vDC7LF5othGH6twX7of+IySafYK5VF9QvR7wbYxGhq+uiP9Q20D0RUZK/+VAAAAABJRU5ErkJggg==;\n\n\n当然，guacd与libfreerdp和libfreerdp与rdp-server是怎么交互的，这个就需要咱自己来整理了。\n### JS (WebSocket/xmlhttprequest + canvas)\n核心就是那几个js文件：\n\nscripts文件夹下的:service.js，admin-ui.js等\n\nguacamole-common-js下的guacamole.js,layer.js,tunnel.js等。\n\n#### script\n`*-ui.js`: 如其名，只是用来处理dom-ui的\n\n`session.js`: 使用localStorage来存取的，保存的是诸如clipboard,其提供了钩子函数\n\n    //钩子函数，外部赋值，又reload调用\n    this.onchange = null;\n\n    /*\n     * 监听storage，也就是说注册的外部函数会被自动调用。\n     * 典型的的是你在rdp里面粘贴板内容会更新到在textarea[id=\"clipborad\"]中\n     */\n    window.addEventListener(\"storage\", guac_state.reload, false);\n\n`history.js`: 同session.js，只是处理的是你的connection记录。\n\n`service.js`: 提供了GuacamoleService核心类，其定义了`GuacamoleService.Protocol`,`GuacamoleService.Protocol.Parameter`,`GuacamoleService.Connection`,`GuacamoleService.ConnectionGroup`等一些属性。\n还提供了以下方法（只展示部分）\n\n    /*\n     * 有权限的用户能够操作自己的Connection\n     */\n    GuacamoleService.Connections = {\n        'list':*,\n        'create':*,\n        'move':*,\n        ...\n    }\n    /*\n     * admin用户可以查看其他用户，会使用到这些方法\n     */\n    GuacamoleService.Users = {\n        'list':*,\n        'create':*,\n        ...\n    }\n    /*\n     * 创建Connection的过程中会提示选择Protocol，\n     */\n    GuacamoleService.Protocols = {\n        'list':*\n    }\n\n#### guacamole-common-js\n`mouse.js`,`keyboard.js`,`oskeyboard.js`: 创建实例会注册了一堆像`mouseout`之类的监听行为，其会被`scripts/client-ui.js`调用。\n\n     /*\n      * 以下代码在scripts/client-ui.js中\n      */\n     var keyboard = new Guacamole.Keyboard(document);\n     ...\n     // 定义好钩子函数，会帮我们自动调用\n     keyboard.onkeyup = function (keysym) {\n        guac.sendKeyEvent(1, keysym);\n        ...\n     /*\n      * 以下代码在guacamole-common-js/guacamole.js中\n      */\n     this.sendKeyEvent = function(pressed, keysym) {\n       if (!isConnected())\n         return;\n       tunnel.sendMessage(\"key\", keysym, pressed);// 利用tunnel.js来发送请求\n     };\n\n     //！！！！注意，尽管又是监听事件，又是请求网络，但这里并不涉及到图形的绘制，其不与layer.js直接交互\n\n\n`layer.js`: 提供canvas， 以及围绕这这个canvas的各个自定义的接口\n\n    // 创建一个canvas, 然后各种在这个canvas上进行操作\n    var display = document.createElement(\"canvas\");\n\n`audtio.js`: 没啥特别的， 只是需要提出的是:\n\n    if (window.webkitAudioContext) {\n        // 使用webkitAudioContext来播放，当然性能更高了\n    }else{\n        // 使用Audio类，使用base64编码的值来播放\n    }\n\n`tunnel.js`: 判断浏览器是否支持WebSocket，如果不支持则采用性能较低的xmlHtttpRequest，轮询。这里只是网络请求的封装，并不涉及到协议格式。这里我也没有太多细看。懵懂，点到为止。\n\n`guacamole.js`: 最核心的部分了，其主要涉及两项任务:（业务实现较多，但也就这样了）\n\n - JS部分协议的定义，解析数据，重绘layer，如\"size\"操作等\n - 内部定义一个Interval，相当于while(true)来重绘layer。\n\n### JavaServlet\nTODO\n\n### guacd, 底层的daemon服务\n分为三个部分:\n\n - guacd\n - libguac\n - protocols\n\n#### guacd\nguacd只是一个简单的daemon，只用来监听网络。\n\n    int main(...) {\n        ...\n        for (;;) {\n            ...\n            connected_socket_fd = accept(socket_fd, (struct sockaddr*) &client_addr, &client_addr_len); // BLOCK监听的\n            fork(); // 判断那我就免了。\n            socket = guac_socket_open(connected_socket_fd);\n            guacd_handle_connection(socket);\n            ...\n        }\n        ...\n    }\n\n    void guacd_handle_connection(guac_socket* socket) {\n        ...\n        // 先获取各种参数，libguac下的api\n        select = guac_instruction_expect(socket, GUACD_USEC_TIMEOUT, \"select\");\n        ...\n        // 启动线程来执行网络操作\n        guacd_client_start(client); //\n        ...\n\n    }\n\n    int guacd_client_start(guac_client* client) {\n        ...\n        // 起了两个线程\n        // 注意两个线程的参数都是client，也就是读写同一个socket，只是划分了责任而已\n        pthread_create(&output_thread, NULL, __guacd_client_output_thread, (void*) client);\n        pthread_create(&input_thread, NULL, __guacd_client_input_thread, (void*) client);\n        ...\n    }\n\n    void* __guacd_client_input_thread(void* data) {\n        // 当然有个while True\n        ...\n        // 读取指令，libguac下的api\n        guac_instruction* instruction = guac_instruction_read(socket, GUACD_USEC_TIMEOUT);\n        ...\n        // 再调用libguac中的函数来实现对应指令的操作，之后再讨论细节\n        guac_client_handle_instruction(client, instruction);\n        ...\n    }\n\n    void* __guacd_client_output_thread(void* data) {\n        // 当然有个while True\n        ...\n        // 发送同步信息\n        guac_protocol_send_sync(socket, client->last_sent_timestamp)\n        guac_socket_flush(socket);\n        ...\n        // 同步信息加上instruction指令信息，由protocol部分来实现。\n        guac_protocol_send_sync(socket, client->last_sent_timestamp)\n        client->handle_messages(client);\n        guac_socket_flush(socket);\n        ...\n    }\n\n以上基本上就是guacd的功能结构了，结构简单，很清晰，我就一锅端了，不具体表明在哪个文件中\n\n#### libguac\n这里面就重点了解几个文件就行了，我挑几个描述下其部分代码。\n##### socket.h/c\n提供了`guac_socket`定义，一些socket操作方法\n\n    struct guac_socket {\n        void* data;\n        ...\n        guac_socket_write_handler* write_handler; //需要外部定义的接口\n        ...\n    }\n\n    ssize_t guac_socket_write(guac_socket* socket,\n            const void* buf, size_t count) {\n        ...\n        int written = __guac_socket_write(socket, buffer, count);\n        ...\n    }\n\n    static ssize_t __guac_socket_write(guac_socket* socket,\n        const void* buf, size_t count) {\n        ...\n        if (socket->write_handler)\n            return socket->write_handler(socket, buf, count); // 这个write_handler的初始化在socket-fd.c中\n        ...\n    }\n\n##### protocol.h/c\n提供协议的各种操作指令的发送，以及定义了\n\n\n    typedef enum guac_composite_mode;\n    typedef enum guac_transfer_function;\n\n    // 一堆协议方法，这些是对外直接开放的，用户可以利用这些来编写自定义的protocol插件\n    int guac_protocol_send_move(guac_socket* socket, const guac_layer* layer,\n        const guac_layer* parent, int x, int y, int z);\n\n\n    // 简单的sync可以看到实现如下，也就是对socket的写操作，只是封装了下，这样我们就接触不到任何内部的协议了\n    int guac_protocol_send_sync(guac_socket* socket, guac_timestamp timestamp) {\n        guac_socket_instruction_begin(socket); // 加锁\n        ret_val =\n               guac_socket_write_string(socket, \"4.sync,\")\n            || __guac_socket_write_length_int(socket, timestamp)\n            || guac_socket_write_string(socket, \";\");\n\n        guac_socket_instruction_end(socket); // 释放锁\n        return ret_val;\n    }\n\n##### instruction.h/c\n提供instruction的定义\n\n    typedef struct guac_instruction {\n        char* opcode;\n        int argc;\n        char** argv;\n    } guac_instruction;\n\n    guac_instruction* guac_instruction_read(guac_socket* socket,\n            int usec_timeout) {\n        while (...) {\n            char c = socket->__instructionbuf[i++];\n            if (c >= '0' && c <= '9')\n                ...\n            else if (c == '.') {\n                if (...) {\n                    if (terminator == ';') {\n                        ...\n                        parsed_instruction->opcode = strdup(socket->__instructionbuf_elementv[0]);\n                        memmove(socket->__instructionbuf, socket->__instructionbuf + i, socket->__instructionbuf_used_length - i);\n                        socket->__instructionbuf_used_length -= i;\n                        socket->__instructionbuf_parse_start = 0;\n                        socket->__instructionbuf_elementc = 0;\n                        return parsed_instruction;\n                    }\n                    else if (terminator != ',') {\n                        return NULL;\n                    }\n\n                }\n            }\n            else {\n                ...\n            }\n        }\n    }\n\n    // 还记得guacd里面的这个方法的调用吧，其实也就是对协议交互流程的一个不成文的规定而已\n    guac_instruction* guac_instruction_expect(guac_socket* socket, int usec_timeout,\n            const char* opcode) {\n        instruction = guac_instruction_read(socket, usec_timeout);\n        if (strcmp(instruction->opcode, opcode) != 0) {\n            return NULL;\n        }\n        return instruction;\n    }\n\n#### protocols(以rdp为例)\n中文搜一下，竟然大多数的文章都是说rdp是微软的。。。好吧，我开始也被迷惑了，后来仔细搜了下，它原来是由国际电信联盟定义的，后来产生了各个不同的实现版本，基本都兼容。所以这个`freerdp`也是兼容windows的。\n\n在`protocols/rdp`下，代码不少，但其实更多的是对libfreerdp的封装，内部调用的是`libguac`的众多接口，并使用libguac下的`protocol_*`系列方法，。\n\n\n    // 协议需要实现guac_client_init\n    int guac_client_init(guac_client* client, int argc, char** argv){\n        ...\n        client->data = guac_client_data;// 操作client->data，即可实现数据的导出\n        ...\n        rdp_inst = freerdp_new();\n        // 这几个相当于初始化rdp_inst，按照接口的要求定义一些钩子函数吧\n        rdp_inst->PreConnect = rdp_freerdp_pre_connect;\n        rdp_inst->PostConnect = rdp_freerdp_post_connect;\n        rdp_inst->Authenticate = rdp_freerdp_authenticate;\n        rdp_inst->VerifyCertificate = rdp_freerdp_verify_certificate;\n        rdp_inst->ReceiveChannelData = __guac_receive_channel_data;\n        //中间要设置一堆一堆的参数\n        ...\n        freerdp_connect(rdp_inst);\n        ...\n    }\n\n    /*\n     * 下边这个函数，就是在钩子函数rdp_freerdp_pre_connect中初始化相关的数据,\n     * 定义的另外一钩子函数。\n     * 反正我们就不管它的调用了吧，只负责实现好相关的接口，处理好连个协议之间的转换工作即可\n     * 从下面的部分代码中就可以看到，rdp相关的操作最后都转成相应的guac_protocol调用了\n     */\n    void guac_rdp_gdi_patblt(rdpContext* context, PATBLT_ORDER* patblt) {\n        ...\n        guac_client* client = ((rdp_freerdp_context*) context)->client;\n        rdp_guac_client_data* data = (rdp_guac_client_data*) client->data;\n        ...\n        switch (patblt->bRop) {\n            case 0x00:\n                guac_protocol_send_rect(client->socket, current_layer, x, y, w, h);\n                guac_protocol_send_cfill(client->socket,\n                        GUAC_COMP_OVER, current_layer,\n                        0x00, 0x00, 0x00, 0xFF);\n                break;\n            case 0xAA:\n                break;\n            case 0xCC:\n            case 0xF0:\n                ...\n            case 0xFF:\n                guac_protocol_send_rect(client->socket, current_layer, x, y, w, h);\n                guac_protocol_send_cfill(client->socket,\n                        GUAC_COMP_OVER, current_layer,\n                        0xFF, 0xFF, 0xFF, 0xFF);\n                break;\n            default:\n                ...\n        }\n    }\n\n\n### guacd, libfreerdp，libssh等\n好了，到这里我感觉就开始是天坑的开始了，rdp我愣是没找到一个完整讲解其协议格式的文件。https://github.com/FreeRDP/FreeRDP/wiki/Reference-Documentation，在这个上面列举了一堆内部使用或者引用到的技术。\n不过蹦到MS的MSDN上，说找下Example看下的，看到的只有这个。。\n\n    00000000    03 00 00 00 10 00 00 00-00 00 00 00 01 00 00 00\n    ................\n\n    03 00 00 00   MILCTRLCMD_OPENCONNECTION::controlCode = 0x00000003\n    10 00 00 00   MILCTRLCMD_OPENCONNECTION::messageSize = 0x10 = 16 bytes\n    00 00 00 00   MILCTRLCMD_OPENCONNECTION::unused (4 bytes)\n    01 00 00 00   MILCTRLCMD_OPENCONNECTION::connectingFlags = MilConnection::IsDwm\n\n好吧，也确实是Example，不过，天坑，你就放过我吧。\n\n好了，折腾了这么将近一天时间，也是搞得最长的一篇博客了，欢迎拍砖。\n\n## 相关资料\n 1. [Guacamole](http://guac-dev.org/)\n 2. [FreeRDP](http://www.freerdp.com/)\n 3. [RDP-GitHub-Refs](https://github.com/FreeRDP/FreeRDP/wiki/Reference-Documentation)\n 4. [Wikipedia](http://en.wikipedia.org/wiki/Remote_Desktop_Protocol)\n 5. [MSDN](http://social.msdn.microsoft.com/Forums/zh-CN/af15dea6-c0c0-440e-b432-783edc4b8526/rdp-protocol-specification)\n","slug":"blog/analysis-guacamole","published":1,"updated":"2016-07-17T11:44:08.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciuyae20r000eyt7lr0wsv6rn","content":"<h2 id=\"环境的搭建\"><a href=\"#环境的搭建\" class=\"headerlink\" title=\"环境的搭建\"></a>环境的搭建</h2><p>特别注明下版本信息和时间：<code>Ubuntu 13.10@2013-12-03</code>，已upgrade到最新state，<code>gucamole-0.83</code>。</p>\n<p>对于环境的搭建，可以参考我的另外一篇博客<a href=\"http://www.lnmpy.com/install-guacamole/\">Ubuntu上搭建Guacamole</a>，不过有点啰嗦..。此处可以再简单描述下。</p>\n<h3 id=\"Guacamole的安装\"><a href=\"#Guacamole的安装\" class=\"headerlink\" title=\"Guacamole的安装\"></a>Guacamole的安装</h3><p>依赖的编译环境和测试运行环境，(不同的系统自己斟酌，假定你gcc等已经安装了,所以千万不要来一句<code>wget找不到啊</code>!- -)</p>\n<pre><code>apt-get install -y libfreerdp-dev libssl-dev libssh-dev libfreerdp-dev libvorbis-dev libpulse-dev libvncserver-dev libpango1.0-dev libcairo2-dev maven\n\napt-get install -y tomcat7 vnc4server\n</code></pre><p>下载源码，0.83版本，路径均我放到/tmp下</p>\n<pre><code>cd /tmp\nwget http://downloads.sourceforge.net/project/guacamole/current/source/guacamole-client-0.8.3.tar.gz &amp;&amp; tar -xvf guacamole-client-0.8.3.tar.gz &amp;&amp; cd guacamole-client-0.8.3/guacamole &amp;&amp; mvn package &amp;&amp; ln -sf /tmp/guacamole-client-0.8.3/guacamole/target/guacamole-0.8.3.war /var/lib/tomcat7/webapps/guacamole-0.8.3.war\n\nwget http://jaist.dl.sourceforge.net/project/guacamole/current/source/guacamole-server-0.8.3.tar.gz &amp;&amp; tar -xvf guacamole-server-0.8.3.tar.gz &amp;&amp; cd guacamole-server-0.8.3 &amp;&amp; ./configure &amp;&amp; sed -i &apos;s/-pedantic//&apos; src/protocols/ssh/Makefile &amp;&amp; make &amp;&amp; make install &amp;&amp; guacd\n</code></pre><h3 id=\"Guacamole配置\"><a href=\"#Guacamole配置\" class=\"headerlink\" title=\"Guacamole配置\"></a>Guacamole配置</h3><p>配置guacamole，参见<a href=\"http://guac-dev.org/doc/gug/configuring-guacamole.html，没有在环境变量中定义`GUACAMOLE_HOME`，默认路径在`/usr/share/tomcat7/.guacamole/`,配置文件参见我的另外一篇博客[Ubuntu上搭建Guacamole](http://www.lnmpy.com/install-guacamole/\" target=\"_blank\" rel=\"external\">http://guac-dev.org/doc/gug/configuring-guacamole.html，没有在环境变量中定义`GUACAMOLE_HOME`，默认路径在`/usr/share/tomcat7/.guacamole/`,配置文件参见我的另外一篇博客[Ubuntu上搭建Guacamole](http://www.lnmpy.com/install-guacamole/</a>)</p>\n<h3 id=\"Guacamole的MySQL扩展\"><a href=\"#Guacamole的MySQL扩展\" class=\"headerlink\" title=\"Guacamole的MySQL扩展\"></a>Guacamole的MySQL扩展</h3><p>整合MySQL的登录验证的模块参见<a href=\"http://guac-dev.org/doc/gug/mysql-auth.html或者[Ubuntu上搭建Guacamole](http://www.lnmpy.com/install-guacamole/)中有描述\" target=\"_blank\" rel=\"external\">http://guac-dev.org/doc/gug/mysql-auth.html或者[Ubuntu上搭建Guacamole](http://www.lnmpy.com/install-guacamole/)中有描述</a></p>\n<hr>\n<h2 id=\"Guacamole的源码分析\"><a href=\"#Guacamole的源码分析\" class=\"headerlink\" title=\"Guacamole的源码分析\"></a>Guacamole的源码分析</h2><p>guacamole结构上分为4层，建议先阅读下<a href=\"http://guac-dev.org/doc/gug/guacamole-architecture.html和http://guac-dev.org/doc/gug/guacamole-protocol.html，就可以对Guacamole的架构和协议有个基本的认识。\" target=\"_blank\" rel=\"external\">http://guac-dev.org/doc/gug/guacamole-architecture.html和http://guac-dev.org/doc/gug/guacamole-protocol.html，就可以对Guacamole的架构和协议有个基本的认识。</a></p>\n<p>&gt;</p>\n<ol>\n<li>JS (WebSocket/xmlhttprequest + canvas)</li>\n<li>JavaServlet</li>\n<li>guacd, 底层的daemon</li>\n<li>libfreerdp，libssh等</li>\n</ol>\n<h3 id=\"Guacamole协议\"><a href=\"#Guacamole协议\" class=\"headerlink\" title=\"Guacamole协议\"></a>Guacamole协议</h3><p>原文其实也说不大清，但其实通过修改下代码，JS与JavaServlet， Servlet与guacd交互，都是采用这种格式。我贴下从guacd中抓下来的部分日志，与原文一致。</p>\n<pre><code>4.sync,13.1386052271656;0,1.0,1.7,2.16;l,2.14,1.0,1.0,1.0,1.0,3.255;4.rect,1.0,3.160,3.285,2.10,2.19;5.cfill,2.14,1.0,3.153,3.153,3.153,3.255;4.rect,2.-1,1.0,1.0,3.520,2.19;5.cfill,1.6,2.-1,3.103,3.255,3.103,3.255;4.rect,2.-2,1.0,1.0,3.520,2.19;5.cfill,2.14,2.-2,1.0,1.0,1.0,3.255;4.copy,2.-1,1.0,1.0,3.520,2.19,2.14,2.-2,1.0,1.0;4.copy,2.-2,2.10,1.0,2.10,2.19,2.14,1.0,1.0,3.285;4.copy,2.-2,2.20,1.0,2.10,2.19,2.14,1.0,2.10,3.285;4.rect,2.-1,3.520,1.0,2.10,2.19;5.cfill,1.2,2.-1,1.0,1.0,1.0,3.255;3.png,2.14,2.-1,3.520,1.0,380.iVBORw0KGgoAAAANSUhEUgAAAAoAAAATCAYAAACp65zuAAAABmJLR0QA/wD/AP+gvaeTAAAA0ElEQVQokeXQO0oDURSA4e/eHVjaiJWgWNiI67AZV5BnZekqLBMmVboMBMQXgjYuwS3YpkmC+IqEuTZJHMkKxL89H+fA4T8WWqm1USpHOMtDfl4dNlLjCc95yI9jN3QneEBWRbVU28EBCogQhAGO6qm+tYRRzPCWpJsVjOIVPoJQ3XqC617ova9gJ3Reg3C7hO3U3sU+Bj8XFiWpSNJhMzW35+YZJmPj+zU4M7vDC7LF5othGH6twX7of+IySafYK5VF9QvR7wbYxGhq+uiP9Q20D0RUZK/+VAAAAABJRU5ErkJggg==;\n</code></pre><p>当然，guacd与libfreerdp和libfreerdp与rdp-server是怎么交互的，这个就需要咱自己来整理了。</p>\n<h3 id=\"JS-WebSocket-xmlhttprequest-canvas\"><a href=\"#JS-WebSocket-xmlhttprequest-canvas\" class=\"headerlink\" title=\"JS (WebSocket/xmlhttprequest + canvas)\"></a>JS (WebSocket/xmlhttprequest + canvas)</h3><p>核心就是那几个js文件：</p>\n<p>scripts文件夹下的:service.js，admin-ui.js等</p>\n<p>guacamole-common-js下的guacamole.js,layer.js,tunnel.js等。</p>\n<h4 id=\"script\"><a href=\"#script\" class=\"headerlink\" title=\"script\"></a>script</h4><p><code>*-ui.js</code>: 如其名，只是用来处理dom-ui的</p>\n<p><code>session.js</code>: 使用localStorage来存取的，保存的是诸如clipboard,其提供了钩子函数</p>\n<pre><code>//钩子函数，外部赋值，又reload调用\nthis.onchange = null;\n\n/*\n * 监听storage，也就是说注册的外部函数会被自动调用。\n * 典型的的是你在rdp里面粘贴板内容会更新到在textarea[id=&quot;clipborad&quot;]中\n */\nwindow.addEventListener(&quot;storage&quot;, guac_state.reload, false);\n</code></pre><p><code>history.js</code>: 同session.js，只是处理的是你的connection记录。</p>\n<p><code>service.js</code>: 提供了GuacamoleService核心类，其定义了<code>GuacamoleService.Protocol</code>,<code>GuacamoleService.Protocol.Parameter</code>,<code>GuacamoleService.Connection</code>,<code>GuacamoleService.ConnectionGroup</code>等一些属性。<br>还提供了以下方法（只展示部分）</p>\n<pre><code>/*\n * 有权限的用户能够操作自己的Connection\n */\nGuacamoleService.Connections = {\n    &apos;list&apos;:*,\n    &apos;create&apos;:*,\n    &apos;move&apos;:*,\n    ...\n}\n/*\n * admin用户可以查看其他用户，会使用到这些方法\n */\nGuacamoleService.Users = {\n    &apos;list&apos;:*,\n    &apos;create&apos;:*,\n    ...\n}\n/*\n * 创建Connection的过程中会提示选择Protocol，\n */\nGuacamoleService.Protocols = {\n    &apos;list&apos;:*\n}\n</code></pre><h4 id=\"guacamole-common-js\"><a href=\"#guacamole-common-js\" class=\"headerlink\" title=\"guacamole-common-js\"></a>guacamole-common-js</h4><p><code>mouse.js</code>,<code>keyboard.js</code>,<code>oskeyboard.js</code>: 创建实例会注册了一堆像<code>mouseout</code>之类的监听行为，其会被<code>scripts/client-ui.js</code>调用。</p>\n<pre><code>/*\n * 以下代码在scripts/client-ui.js中\n */\nvar keyboard = new Guacamole.Keyboard(document);\n...\n// 定义好钩子函数，会帮我们自动调用\nkeyboard.onkeyup = function (keysym) {\n   guac.sendKeyEvent(1, keysym);\n   ...\n/*\n * 以下代码在guacamole-common-js/guacamole.js中\n */\nthis.sendKeyEvent = function(pressed, keysym) {\n  if (!isConnected())\n    return;\n  tunnel.sendMessage(&quot;key&quot;, keysym, pressed);// 利用tunnel.js来发送请求\n};\n\n//！！！！注意，尽管又是监听事件，又是请求网络，但这里并不涉及到图形的绘制，其不与layer.js直接交互\n</code></pre><p><code>layer.js</code>: 提供canvas， 以及围绕这这个canvas的各个自定义的接口</p>\n<pre><code>// 创建一个canvas, 然后各种在这个canvas上进行操作\nvar display = document.createElement(&quot;canvas&quot;);\n</code></pre><p><code>audtio.js</code>: 没啥特别的， 只是需要提出的是:</p>\n<pre><code>if (window.webkitAudioContext) {\n    // 使用webkitAudioContext来播放，当然性能更高了\n}else{\n    // 使用Audio类，使用base64编码的值来播放\n}\n</code></pre><p><code>tunnel.js</code>: 判断浏览器是否支持WebSocket，如果不支持则采用性能较低的xmlHtttpRequest，轮询。这里只是网络请求的封装，并不涉及到协议格式。这里我也没有太多细看。懵懂，点到为止。</p>\n<p><code>guacamole.js</code>: 最核心的部分了，其主要涉及两项任务:（业务实现较多，但也就这样了）</p>\n<ul>\n<li>JS部分协议的定义，解析数据，重绘layer，如”size”操作等</li>\n<li>内部定义一个Interval，相当于while(true)来重绘layer。</li>\n</ul>\n<h3 id=\"JavaServlet\"><a href=\"#JavaServlet\" class=\"headerlink\" title=\"JavaServlet\"></a>JavaServlet</h3><p>TODO</p>\n<h3 id=\"guacd-底层的daemon服务\"><a href=\"#guacd-底层的daemon服务\" class=\"headerlink\" title=\"guacd, 底层的daemon服务\"></a>guacd, 底层的daemon服务</h3><p>分为三个部分:</p>\n<ul>\n<li>guacd</li>\n<li>libguac</li>\n<li>protocols</li>\n</ul>\n<h4 id=\"guacd\"><a href=\"#guacd\" class=\"headerlink\" title=\"guacd\"></a>guacd</h4><p>guacd只是一个简单的daemon，只用来监听网络。</p>\n<pre><code>int main(...) {\n    ...\n    for (;;) {\n        ...\n        connected_socket_fd = accept(socket_fd, (struct sockaddr*) &amp;client_addr, &amp;client_addr_len); // BLOCK监听的\n        fork(); // 判断那我就免了。\n        socket = guac_socket_open(connected_socket_fd);\n        guacd_handle_connection(socket);\n        ...\n    }\n    ...\n}\n\nvoid guacd_handle_connection(guac_socket* socket) {\n    ...\n    // 先获取各种参数，libguac下的api\n    select = guac_instruction_expect(socket, GUACD_USEC_TIMEOUT, &quot;select&quot;);\n    ...\n    // 启动线程来执行网络操作\n    guacd_client_start(client); //\n    ...\n\n}\n\nint guacd_client_start(guac_client* client) {\n    ...\n    // 起了两个线程\n    // 注意两个线程的参数都是client，也就是读写同一个socket，只是划分了责任而已\n    pthread_create(&amp;output_thread, NULL, __guacd_client_output_thread, (void*) client);\n    pthread_create(&amp;input_thread, NULL, __guacd_client_input_thread, (void*) client);\n    ...\n}\n\nvoid* __guacd_client_input_thread(void* data) {\n    // 当然有个while True\n    ...\n    // 读取指令，libguac下的api\n    guac_instruction* instruction = guac_instruction_read(socket, GUACD_USEC_TIMEOUT);\n    ...\n    // 再调用libguac中的函数来实现对应指令的操作，之后再讨论细节\n    guac_client_handle_instruction(client, instruction);\n    ...\n}\n\nvoid* __guacd_client_output_thread(void* data) {\n    // 当然有个while True\n    ...\n    // 发送同步信息\n    guac_protocol_send_sync(socket, client-&gt;last_sent_timestamp)\n    guac_socket_flush(socket);\n    ...\n    // 同步信息加上instruction指令信息，由protocol部分来实现。\n    guac_protocol_send_sync(socket, client-&gt;last_sent_timestamp)\n    client-&gt;handle_messages(client);\n    guac_socket_flush(socket);\n    ...\n}\n</code></pre><p>以上基本上就是guacd的功能结构了，结构简单，很清晰，我就一锅端了，不具体表明在哪个文件中</p>\n<h4 id=\"libguac\"><a href=\"#libguac\" class=\"headerlink\" title=\"libguac\"></a>libguac</h4><p>这里面就重点了解几个文件就行了，我挑几个描述下其部分代码。</p>\n<h5 id=\"socket-h-c\"><a href=\"#socket-h-c\" class=\"headerlink\" title=\"socket.h/c\"></a>socket.h/c</h5><p>提供了<code>guac_socket</code>定义，一些socket操作方法</p>\n<pre><code>struct guac_socket {\n    void* data;\n    ...\n    guac_socket_write_handler* write_handler; //需要外部定义的接口\n    ...\n}\n\nssize_t guac_socket_write(guac_socket* socket,\n        const void* buf, size_t count) {\n    ...\n    int written = __guac_socket_write(socket, buffer, count);\n    ...\n}\n\nstatic ssize_t __guac_socket_write(guac_socket* socket,\n    const void* buf, size_t count) {\n    ...\n    if (socket-&gt;write_handler)\n        return socket-&gt;write_handler(socket, buf, count); // 这个write_handler的初始化在socket-fd.c中\n    ...\n}\n</code></pre><h5 id=\"protocol-h-c\"><a href=\"#protocol-h-c\" class=\"headerlink\" title=\"protocol.h/c\"></a>protocol.h/c</h5><p>提供协议的各种操作指令的发送，以及定义了</p>\n<pre><code>typedef enum guac_composite_mode;\ntypedef enum guac_transfer_function;\n\n// 一堆协议方法，这些是对外直接开放的，用户可以利用这些来编写自定义的protocol插件\nint guac_protocol_send_move(guac_socket* socket, const guac_layer* layer,\n    const guac_layer* parent, int x, int y, int z);\n\n\n// 简单的sync可以看到实现如下，也就是对socket的写操作，只是封装了下，这样我们就接触不到任何内部的协议了\nint guac_protocol_send_sync(guac_socket* socket, guac_timestamp timestamp) {\n    guac_socket_instruction_begin(socket); // 加锁\n    ret_val =\n           guac_socket_write_string(socket, &quot;4.sync,&quot;)\n        || __guac_socket_write_length_int(socket, timestamp)\n        || guac_socket_write_string(socket, &quot;;&quot;);\n\n    guac_socket_instruction_end(socket); // 释放锁\n    return ret_val;\n}\n</code></pre><h5 id=\"instruction-h-c\"><a href=\"#instruction-h-c\" class=\"headerlink\" title=\"instruction.h/c\"></a>instruction.h/c</h5><p>提供instruction的定义</p>\n<pre><code>typedef struct guac_instruction {\n    char* opcode;\n    int argc;\n    char** argv;\n} guac_instruction;\n\nguac_instruction* guac_instruction_read(guac_socket* socket,\n        int usec_timeout) {\n    while (...) {\n        char c = socket-&gt;__instructionbuf[i++];\n        if (c &gt;= &apos;0&apos; &amp;&amp; c &lt;= &apos;9&apos;)\n            ...\n        else if (c == &apos;.&apos;) {\n            if (...) {\n                if (terminator == &apos;;&apos;) {\n                    ...\n                    parsed_instruction-&gt;opcode = strdup(socket-&gt;__instructionbuf_elementv[0]);\n                    memmove(socket-&gt;__instructionbuf, socket-&gt;__instructionbuf + i, socket-&gt;__instructionbuf_used_length - i);\n                    socket-&gt;__instructionbuf_used_length -= i;\n                    socket-&gt;__instructionbuf_parse_start = 0;\n                    socket-&gt;__instructionbuf_elementc = 0;\n                    return parsed_instruction;\n                }\n                else if (terminator != &apos;,&apos;) {\n                    return NULL;\n                }\n\n            }\n        }\n        else {\n            ...\n        }\n    }\n}\n\n// 还记得guacd里面的这个方法的调用吧，其实也就是对协议交互流程的一个不成文的规定而已\nguac_instruction* guac_instruction_expect(guac_socket* socket, int usec_timeout,\n        const char* opcode) {\n    instruction = guac_instruction_read(socket, usec_timeout);\n    if (strcmp(instruction-&gt;opcode, opcode) != 0) {\n        return NULL;\n    }\n    return instruction;\n}\n</code></pre><h4 id=\"protocols-以rdp为例\"><a href=\"#protocols-以rdp为例\" class=\"headerlink\" title=\"protocols(以rdp为例)\"></a>protocols(以rdp为例)</h4><p>中文搜一下，竟然大多数的文章都是说rdp是微软的。。。好吧，我开始也被迷惑了，后来仔细搜了下，它原来是由国际电信联盟定义的，后来产生了各个不同的实现版本，基本都兼容。所以这个<code>freerdp</code>也是兼容windows的。</p>\n<p>在<code>protocols/rdp</code>下，代码不少，但其实更多的是对libfreerdp的封装，内部调用的是<code>libguac</code>的众多接口，并使用libguac下的<code>protocol_*</code>系列方法，。</p>\n<pre><code>// 协议需要实现guac_client_init\nint guac_client_init(guac_client* client, int argc, char** argv){\n    ...\n    client-&gt;data = guac_client_data;// 操作client-&gt;data，即可实现数据的导出\n    ...\n    rdp_inst = freerdp_new();\n    // 这几个相当于初始化rdp_inst，按照接口的要求定义一些钩子函数吧\n    rdp_inst-&gt;PreConnect = rdp_freerdp_pre_connect;\n    rdp_inst-&gt;PostConnect = rdp_freerdp_post_connect;\n    rdp_inst-&gt;Authenticate = rdp_freerdp_authenticate;\n    rdp_inst-&gt;VerifyCertificate = rdp_freerdp_verify_certificate;\n    rdp_inst-&gt;ReceiveChannelData = __guac_receive_channel_data;\n    //中间要设置一堆一堆的参数\n    ...\n    freerdp_connect(rdp_inst);\n    ...\n}\n\n/*\n * 下边这个函数，就是在钩子函数rdp_freerdp_pre_connect中初始化相关的数据,\n * 定义的另外一钩子函数。\n * 反正我们就不管它的调用了吧，只负责实现好相关的接口，处理好连个协议之间的转换工作即可\n * 从下面的部分代码中就可以看到，rdp相关的操作最后都转成相应的guac_protocol调用了\n */\nvoid guac_rdp_gdi_patblt(rdpContext* context, PATBLT_ORDER* patblt) {\n    ...\n    guac_client* client = ((rdp_freerdp_context*) context)-&gt;client;\n    rdp_guac_client_data* data = (rdp_guac_client_data*) client-&gt;data;\n    ...\n    switch (patblt-&gt;bRop) {\n        case 0x00:\n            guac_protocol_send_rect(client-&gt;socket, current_layer, x, y, w, h);\n            guac_protocol_send_cfill(client-&gt;socket,\n                    GUAC_COMP_OVER, current_layer,\n                    0x00, 0x00, 0x00, 0xFF);\n            break;\n        case 0xAA:\n            break;\n        case 0xCC:\n        case 0xF0:\n            ...\n        case 0xFF:\n            guac_protocol_send_rect(client-&gt;socket, current_layer, x, y, w, h);\n            guac_protocol_send_cfill(client-&gt;socket,\n                    GUAC_COMP_OVER, current_layer,\n                    0xFF, 0xFF, 0xFF, 0xFF);\n            break;\n        default:\n            ...\n    }\n}\n</code></pre><h3 id=\"guacd-libfreerdp，libssh等\"><a href=\"#guacd-libfreerdp，libssh等\" class=\"headerlink\" title=\"guacd, libfreerdp，libssh等\"></a>guacd, libfreerdp，libssh等</h3><p>好了，到这里我感觉就开始是天坑的开始了，rdp我愣是没找到一个完整讲解其协议格式的文件。<a href=\"https://github.com/FreeRDP/FreeRDP/wiki/Reference-Documentation，在这个上面列举了一堆内部使用或者引用到的技术。\" target=\"_blank\" rel=\"external\">https://github.com/FreeRDP/FreeRDP/wiki/Reference-Documentation，在这个上面列举了一堆内部使用或者引用到的技术。</a><br>不过蹦到MS的MSDN上，说找下Example看下的，看到的只有这个。。</p>\n<pre><code>00000000    03 00 00 00 10 00 00 00-00 00 00 00 01 00 00 00\n................\n\n03 00 00 00   MILCTRLCMD_OPENCONNECTION::controlCode = 0x00000003\n10 00 00 00   MILCTRLCMD_OPENCONNECTION::messageSize = 0x10 = 16 bytes\n00 00 00 00   MILCTRLCMD_OPENCONNECTION::unused (4 bytes)\n01 00 00 00   MILCTRLCMD_OPENCONNECTION::connectingFlags = MilConnection::IsDwm\n</code></pre><p>好吧，也确实是Example，不过，天坑，你就放过我吧。</p>\n<p>好了，折腾了这么将近一天时间，也是搞得最长的一篇博客了，欢迎拍砖。</p>\n<h2 id=\"相关资料\"><a href=\"#相关资料\" class=\"headerlink\" title=\"相关资料\"></a>相关资料</h2><ol>\n<li><a href=\"http://guac-dev.org/\" target=\"_blank\" rel=\"external\">Guacamole</a></li>\n<li><a href=\"http://www.freerdp.com/\" target=\"_blank\" rel=\"external\">FreeRDP</a></li>\n<li><a href=\"https://github.com/FreeRDP/FreeRDP/wiki/Reference-Documentation\" target=\"_blank\" rel=\"external\">RDP-GitHub-Refs</a></li>\n<li><a href=\"http://en.wikipedia.org/wiki/Remote_Desktop_Protocol\" target=\"_blank\" rel=\"external\">Wikipedia</a></li>\n<li><a href=\"http://social.msdn.microsoft.com/Forums/zh-CN/af15dea6-c0c0-440e-b432-783edc4b8526/rdp-protocol-specification\" target=\"_blank\" rel=\"external\">MSDN</a></li>\n</ol>\n","excerpt":"","more":"<h2 id=\"环境的搭建\"><a href=\"#环境的搭建\" class=\"headerlink\" title=\"环境的搭建\"></a>环境的搭建</h2><p>特别注明下版本信息和时间：<code>Ubuntu 13.10@2013-12-03</code>，已upgrade到最新state，<code>gucamole-0.83</code>。</p>\n<p>对于环境的搭建，可以参考我的另外一篇博客<a href=\"http://www.lnmpy.com/install-guacamole/\">Ubuntu上搭建Guacamole</a>，不过有点啰嗦..。此处可以再简单描述下。</p>\n<h3 id=\"Guacamole的安装\"><a href=\"#Guacamole的安装\" class=\"headerlink\" title=\"Guacamole的安装\"></a>Guacamole的安装</h3><p>依赖的编译环境和测试运行环境，(不同的系统自己斟酌，假定你gcc等已经安装了,所以千万不要来一句<code>wget找不到啊</code>!- -)</p>\n<pre><code>apt-get install -y libfreerdp-dev libssl-dev libssh-dev libfreerdp-dev libvorbis-dev libpulse-dev libvncserver-dev libpango1.0-dev libcairo2-dev maven\n\napt-get install -y tomcat7 vnc4server\n</code></pre><p>下载源码，0.83版本，路径均我放到/tmp下</p>\n<pre><code>cd /tmp\nwget http://downloads.sourceforge.net/project/guacamole/current/source/guacamole-client-0.8.3.tar.gz &amp;&amp; tar -xvf guacamole-client-0.8.3.tar.gz &amp;&amp; cd guacamole-client-0.8.3/guacamole &amp;&amp; mvn package &amp;&amp; ln -sf /tmp/guacamole-client-0.8.3/guacamole/target/guacamole-0.8.3.war /var/lib/tomcat7/webapps/guacamole-0.8.3.war\n\nwget http://jaist.dl.sourceforge.net/project/guacamole/current/source/guacamole-server-0.8.3.tar.gz &amp;&amp; tar -xvf guacamole-server-0.8.3.tar.gz &amp;&amp; cd guacamole-server-0.8.3 &amp;&amp; ./configure &amp;&amp; sed -i &apos;s/-pedantic//&apos; src/protocols/ssh/Makefile &amp;&amp; make &amp;&amp; make install &amp;&amp; guacd\n</code></pre><h3 id=\"Guacamole配置\"><a href=\"#Guacamole配置\" class=\"headerlink\" title=\"Guacamole配置\"></a>Guacamole配置</h3><p>配置guacamole，参见<a href=\"http://guac-dev.org/doc/gug/configuring-guacamole.html，没有在环境变量中定义`GUACAMOLE_HOME`，默认路径在`/usr/share/tomcat7/.guacamole/`,配置文件参见我的另外一篇博客[Ubuntu上搭建Guacamole](http://www.lnmpy.com/install-guacamole/\">http://guac-dev.org/doc/gug/configuring-guacamole.html，没有在环境变量中定义`GUACAMOLE_HOME`，默认路径在`/usr/share/tomcat7/.guacamole/`,配置文件参见我的另外一篇博客[Ubuntu上搭建Guacamole](http://www.lnmpy.com/install-guacamole/</a>)</p>\n<h3 id=\"Guacamole的MySQL扩展\"><a href=\"#Guacamole的MySQL扩展\" class=\"headerlink\" title=\"Guacamole的MySQL扩展\"></a>Guacamole的MySQL扩展</h3><p>整合MySQL的登录验证的模块参见<a href=\"http://guac-dev.org/doc/gug/mysql-auth.html或者[Ubuntu上搭建Guacamole](http://www.lnmpy.com/install-guacamole/)中有描述\">http://guac-dev.org/doc/gug/mysql-auth.html或者[Ubuntu上搭建Guacamole](http://www.lnmpy.com/install-guacamole/)中有描述</a></p>\n<hr>\n<h2 id=\"Guacamole的源码分析\"><a href=\"#Guacamole的源码分析\" class=\"headerlink\" title=\"Guacamole的源码分析\"></a>Guacamole的源码分析</h2><p>guacamole结构上分为4层，建议先阅读下<a href=\"http://guac-dev.org/doc/gug/guacamole-architecture.html和http://guac-dev.org/doc/gug/guacamole-protocol.html，就可以对Guacamole的架构和协议有个基本的认识。\">http://guac-dev.org/doc/gug/guacamole-architecture.html和http://guac-dev.org/doc/gug/guacamole-protocol.html，就可以对Guacamole的架构和协议有个基本的认识。</a></p>\n<p>&gt;</p>\n<ol>\n<li>JS (WebSocket/xmlhttprequest + canvas)</li>\n<li>JavaServlet</li>\n<li>guacd, 底层的daemon</li>\n<li>libfreerdp，libssh等</li>\n</ol>\n<h3 id=\"Guacamole协议\"><a href=\"#Guacamole协议\" class=\"headerlink\" title=\"Guacamole协议\"></a>Guacamole协议</h3><p>原文其实也说不大清，但其实通过修改下代码，JS与JavaServlet， Servlet与guacd交互，都是采用这种格式。我贴下从guacd中抓下来的部分日志，与原文一致。</p>\n<pre><code>4.sync,13.1386052271656;0,1.0,1.7,2.16;l,2.14,1.0,1.0,1.0,1.0,3.255;4.rect,1.0,3.160,3.285,2.10,2.19;5.cfill,2.14,1.0,3.153,3.153,3.153,3.255;4.rect,2.-1,1.0,1.0,3.520,2.19;5.cfill,1.6,2.-1,3.103,3.255,3.103,3.255;4.rect,2.-2,1.0,1.0,3.520,2.19;5.cfill,2.14,2.-2,1.0,1.0,1.0,3.255;4.copy,2.-1,1.0,1.0,3.520,2.19,2.14,2.-2,1.0,1.0;4.copy,2.-2,2.10,1.0,2.10,2.19,2.14,1.0,1.0,3.285;4.copy,2.-2,2.20,1.0,2.10,2.19,2.14,1.0,2.10,3.285;4.rect,2.-1,3.520,1.0,2.10,2.19;5.cfill,1.2,2.-1,1.0,1.0,1.0,3.255;3.png,2.14,2.-1,3.520,1.0,380.iVBORw0KGgoAAAANSUhEUgAAAAoAAAATCAYAAACp65zuAAAABmJLR0QA/wD/AP+gvaeTAAAA0ElEQVQokeXQO0oDURSA4e/eHVjaiJWgWNiI67AZV5BnZekqLBMmVboMBMQXgjYuwS3YpkmC+IqEuTZJHMkKxL89H+fA4T8WWqm1USpHOMtDfl4dNlLjCc95yI9jN3QneEBWRbVU28EBCogQhAGO6qm+tYRRzPCWpJsVjOIVPoJQ3XqC617ova9gJ3Reg3C7hO3U3sU+Bj8XFiWpSNJhMzW35+YZJmPj+zU4M7vDC7LF5othGH6twX7of+IySafYK5VF9QvR7wbYxGhq+uiP9Q20D0RUZK/+VAAAAABJRU5ErkJggg==;\n</code></pre><p>当然，guacd与libfreerdp和libfreerdp与rdp-server是怎么交互的，这个就需要咱自己来整理了。</p>\n<h3 id=\"JS-WebSocket-xmlhttprequest-canvas\"><a href=\"#JS-WebSocket-xmlhttprequest-canvas\" class=\"headerlink\" title=\"JS (WebSocket/xmlhttprequest + canvas)\"></a>JS (WebSocket/xmlhttprequest + canvas)</h3><p>核心就是那几个js文件：</p>\n<p>scripts文件夹下的:service.js，admin-ui.js等</p>\n<p>guacamole-common-js下的guacamole.js,layer.js,tunnel.js等。</p>\n<h4 id=\"script\"><a href=\"#script\" class=\"headerlink\" title=\"script\"></a>script</h4><p><code>*-ui.js</code>: 如其名，只是用来处理dom-ui的</p>\n<p><code>session.js</code>: 使用localStorage来存取的，保存的是诸如clipboard,其提供了钩子函数</p>\n<pre><code>//钩子函数，外部赋值，又reload调用\nthis.onchange = null;\n\n/*\n * 监听storage，也就是说注册的外部函数会被自动调用。\n * 典型的的是你在rdp里面粘贴板内容会更新到在textarea[id=&quot;clipborad&quot;]中\n */\nwindow.addEventListener(&quot;storage&quot;, guac_state.reload, false);\n</code></pre><p><code>history.js</code>: 同session.js，只是处理的是你的connection记录。</p>\n<p><code>service.js</code>: 提供了GuacamoleService核心类，其定义了<code>GuacamoleService.Protocol</code>,<code>GuacamoleService.Protocol.Parameter</code>,<code>GuacamoleService.Connection</code>,<code>GuacamoleService.ConnectionGroup</code>等一些属性。<br>还提供了以下方法（只展示部分）</p>\n<pre><code>/*\n * 有权限的用户能够操作自己的Connection\n */\nGuacamoleService.Connections = {\n    &apos;list&apos;:*,\n    &apos;create&apos;:*,\n    &apos;move&apos;:*,\n    ...\n}\n/*\n * admin用户可以查看其他用户，会使用到这些方法\n */\nGuacamoleService.Users = {\n    &apos;list&apos;:*,\n    &apos;create&apos;:*,\n    ...\n}\n/*\n * 创建Connection的过程中会提示选择Protocol，\n */\nGuacamoleService.Protocols = {\n    &apos;list&apos;:*\n}\n</code></pre><h4 id=\"guacamole-common-js\"><a href=\"#guacamole-common-js\" class=\"headerlink\" title=\"guacamole-common-js\"></a>guacamole-common-js</h4><p><code>mouse.js</code>,<code>keyboard.js</code>,<code>oskeyboard.js</code>: 创建实例会注册了一堆像<code>mouseout</code>之类的监听行为，其会被<code>scripts/client-ui.js</code>调用。</p>\n<pre><code>/*\n * 以下代码在scripts/client-ui.js中\n */\nvar keyboard = new Guacamole.Keyboard(document);\n...\n// 定义好钩子函数，会帮我们自动调用\nkeyboard.onkeyup = function (keysym) {\n   guac.sendKeyEvent(1, keysym);\n   ...\n/*\n * 以下代码在guacamole-common-js/guacamole.js中\n */\nthis.sendKeyEvent = function(pressed, keysym) {\n  if (!isConnected())\n    return;\n  tunnel.sendMessage(&quot;key&quot;, keysym, pressed);// 利用tunnel.js来发送请求\n};\n\n//！！！！注意，尽管又是监听事件，又是请求网络，但这里并不涉及到图形的绘制，其不与layer.js直接交互\n</code></pre><p><code>layer.js</code>: 提供canvas， 以及围绕这这个canvas的各个自定义的接口</p>\n<pre><code>// 创建一个canvas, 然后各种在这个canvas上进行操作\nvar display = document.createElement(&quot;canvas&quot;);\n</code></pre><p><code>audtio.js</code>: 没啥特别的， 只是需要提出的是:</p>\n<pre><code>if (window.webkitAudioContext) {\n    // 使用webkitAudioContext来播放，当然性能更高了\n}else{\n    // 使用Audio类，使用base64编码的值来播放\n}\n</code></pre><p><code>tunnel.js</code>: 判断浏览器是否支持WebSocket，如果不支持则采用性能较低的xmlHtttpRequest，轮询。这里只是网络请求的封装，并不涉及到协议格式。这里我也没有太多细看。懵懂，点到为止。</p>\n<p><code>guacamole.js</code>: 最核心的部分了，其主要涉及两项任务:（业务实现较多，但也就这样了）</p>\n<ul>\n<li>JS部分协议的定义，解析数据，重绘layer，如”size”操作等</li>\n<li>内部定义一个Interval，相当于while(true)来重绘layer。</li>\n</ul>\n<h3 id=\"JavaServlet\"><a href=\"#JavaServlet\" class=\"headerlink\" title=\"JavaServlet\"></a>JavaServlet</h3><p>TODO</p>\n<h3 id=\"guacd-底层的daemon服务\"><a href=\"#guacd-底层的daemon服务\" class=\"headerlink\" title=\"guacd, 底层的daemon服务\"></a>guacd, 底层的daemon服务</h3><p>分为三个部分:</p>\n<ul>\n<li>guacd</li>\n<li>libguac</li>\n<li>protocols</li>\n</ul>\n<h4 id=\"guacd\"><a href=\"#guacd\" class=\"headerlink\" title=\"guacd\"></a>guacd</h4><p>guacd只是一个简单的daemon，只用来监听网络。</p>\n<pre><code>int main(...) {\n    ...\n    for (;;) {\n        ...\n        connected_socket_fd = accept(socket_fd, (struct sockaddr*) &amp;client_addr, &amp;client_addr_len); // BLOCK监听的\n        fork(); // 判断那我就免了。\n        socket = guac_socket_open(connected_socket_fd);\n        guacd_handle_connection(socket);\n        ...\n    }\n    ...\n}\n\nvoid guacd_handle_connection(guac_socket* socket) {\n    ...\n    // 先获取各种参数，libguac下的api\n    select = guac_instruction_expect(socket, GUACD_USEC_TIMEOUT, &quot;select&quot;);\n    ...\n    // 启动线程来执行网络操作\n    guacd_client_start(client); //\n    ...\n\n}\n\nint guacd_client_start(guac_client* client) {\n    ...\n    // 起了两个线程\n    // 注意两个线程的参数都是client，也就是读写同一个socket，只是划分了责任而已\n    pthread_create(&amp;output_thread, NULL, __guacd_client_output_thread, (void*) client);\n    pthread_create(&amp;input_thread, NULL, __guacd_client_input_thread, (void*) client);\n    ...\n}\n\nvoid* __guacd_client_input_thread(void* data) {\n    // 当然有个while True\n    ...\n    // 读取指令，libguac下的api\n    guac_instruction* instruction = guac_instruction_read(socket, GUACD_USEC_TIMEOUT);\n    ...\n    // 再调用libguac中的函数来实现对应指令的操作，之后再讨论细节\n    guac_client_handle_instruction(client, instruction);\n    ...\n}\n\nvoid* __guacd_client_output_thread(void* data) {\n    // 当然有个while True\n    ...\n    // 发送同步信息\n    guac_protocol_send_sync(socket, client-&gt;last_sent_timestamp)\n    guac_socket_flush(socket);\n    ...\n    // 同步信息加上instruction指令信息，由protocol部分来实现。\n    guac_protocol_send_sync(socket, client-&gt;last_sent_timestamp)\n    client-&gt;handle_messages(client);\n    guac_socket_flush(socket);\n    ...\n}\n</code></pre><p>以上基本上就是guacd的功能结构了，结构简单，很清晰，我就一锅端了，不具体表明在哪个文件中</p>\n<h4 id=\"libguac\"><a href=\"#libguac\" class=\"headerlink\" title=\"libguac\"></a>libguac</h4><p>这里面就重点了解几个文件就行了，我挑几个描述下其部分代码。</p>\n<h5 id=\"socket-h-c\"><a href=\"#socket-h-c\" class=\"headerlink\" title=\"socket.h/c\"></a>socket.h/c</h5><p>提供了<code>guac_socket</code>定义，一些socket操作方法</p>\n<pre><code>struct guac_socket {\n    void* data;\n    ...\n    guac_socket_write_handler* write_handler; //需要外部定义的接口\n    ...\n}\n\nssize_t guac_socket_write(guac_socket* socket,\n        const void* buf, size_t count) {\n    ...\n    int written = __guac_socket_write(socket, buffer, count);\n    ...\n}\n\nstatic ssize_t __guac_socket_write(guac_socket* socket,\n    const void* buf, size_t count) {\n    ...\n    if (socket-&gt;write_handler)\n        return socket-&gt;write_handler(socket, buf, count); // 这个write_handler的初始化在socket-fd.c中\n    ...\n}\n</code></pre><h5 id=\"protocol-h-c\"><a href=\"#protocol-h-c\" class=\"headerlink\" title=\"protocol.h/c\"></a>protocol.h/c</h5><p>提供协议的各种操作指令的发送，以及定义了</p>\n<pre><code>typedef enum guac_composite_mode;\ntypedef enum guac_transfer_function;\n\n// 一堆协议方法，这些是对外直接开放的，用户可以利用这些来编写自定义的protocol插件\nint guac_protocol_send_move(guac_socket* socket, const guac_layer* layer,\n    const guac_layer* parent, int x, int y, int z);\n\n\n// 简单的sync可以看到实现如下，也就是对socket的写操作，只是封装了下，这样我们就接触不到任何内部的协议了\nint guac_protocol_send_sync(guac_socket* socket, guac_timestamp timestamp) {\n    guac_socket_instruction_begin(socket); // 加锁\n    ret_val =\n           guac_socket_write_string(socket, &quot;4.sync,&quot;)\n        || __guac_socket_write_length_int(socket, timestamp)\n        || guac_socket_write_string(socket, &quot;;&quot;);\n\n    guac_socket_instruction_end(socket); // 释放锁\n    return ret_val;\n}\n</code></pre><h5 id=\"instruction-h-c\"><a href=\"#instruction-h-c\" class=\"headerlink\" title=\"instruction.h/c\"></a>instruction.h/c</h5><p>提供instruction的定义</p>\n<pre><code>typedef struct guac_instruction {\n    char* opcode;\n    int argc;\n    char** argv;\n} guac_instruction;\n\nguac_instruction* guac_instruction_read(guac_socket* socket,\n        int usec_timeout) {\n    while (...) {\n        char c = socket-&gt;__instructionbuf[i++];\n        if (c &gt;= &apos;0&apos; &amp;&amp; c &lt;= &apos;9&apos;)\n            ...\n        else if (c == &apos;.&apos;) {\n            if (...) {\n                if (terminator == &apos;;&apos;) {\n                    ...\n                    parsed_instruction-&gt;opcode = strdup(socket-&gt;__instructionbuf_elementv[0]);\n                    memmove(socket-&gt;__instructionbuf, socket-&gt;__instructionbuf + i, socket-&gt;__instructionbuf_used_length - i);\n                    socket-&gt;__instructionbuf_used_length -= i;\n                    socket-&gt;__instructionbuf_parse_start = 0;\n                    socket-&gt;__instructionbuf_elementc = 0;\n                    return parsed_instruction;\n                }\n                else if (terminator != &apos;,&apos;) {\n                    return NULL;\n                }\n\n            }\n        }\n        else {\n            ...\n        }\n    }\n}\n\n// 还记得guacd里面的这个方法的调用吧，其实也就是对协议交互流程的一个不成文的规定而已\nguac_instruction* guac_instruction_expect(guac_socket* socket, int usec_timeout,\n        const char* opcode) {\n    instruction = guac_instruction_read(socket, usec_timeout);\n    if (strcmp(instruction-&gt;opcode, opcode) != 0) {\n        return NULL;\n    }\n    return instruction;\n}\n</code></pre><h4 id=\"protocols-以rdp为例\"><a href=\"#protocols-以rdp为例\" class=\"headerlink\" title=\"protocols(以rdp为例)\"></a>protocols(以rdp为例)</h4><p>中文搜一下，竟然大多数的文章都是说rdp是微软的。。。好吧，我开始也被迷惑了，后来仔细搜了下，它原来是由国际电信联盟定义的，后来产生了各个不同的实现版本，基本都兼容。所以这个<code>freerdp</code>也是兼容windows的。</p>\n<p>在<code>protocols/rdp</code>下，代码不少，但其实更多的是对libfreerdp的封装，内部调用的是<code>libguac</code>的众多接口，并使用libguac下的<code>protocol_*</code>系列方法，。</p>\n<pre><code>// 协议需要实现guac_client_init\nint guac_client_init(guac_client* client, int argc, char** argv){\n    ...\n    client-&gt;data = guac_client_data;// 操作client-&gt;data，即可实现数据的导出\n    ...\n    rdp_inst = freerdp_new();\n    // 这几个相当于初始化rdp_inst，按照接口的要求定义一些钩子函数吧\n    rdp_inst-&gt;PreConnect = rdp_freerdp_pre_connect;\n    rdp_inst-&gt;PostConnect = rdp_freerdp_post_connect;\n    rdp_inst-&gt;Authenticate = rdp_freerdp_authenticate;\n    rdp_inst-&gt;VerifyCertificate = rdp_freerdp_verify_certificate;\n    rdp_inst-&gt;ReceiveChannelData = __guac_receive_channel_data;\n    //中间要设置一堆一堆的参数\n    ...\n    freerdp_connect(rdp_inst);\n    ...\n}\n\n/*\n * 下边这个函数，就是在钩子函数rdp_freerdp_pre_connect中初始化相关的数据,\n * 定义的另外一钩子函数。\n * 反正我们就不管它的调用了吧，只负责实现好相关的接口，处理好连个协议之间的转换工作即可\n * 从下面的部分代码中就可以看到，rdp相关的操作最后都转成相应的guac_protocol调用了\n */\nvoid guac_rdp_gdi_patblt(rdpContext* context, PATBLT_ORDER* patblt) {\n    ...\n    guac_client* client = ((rdp_freerdp_context*) context)-&gt;client;\n    rdp_guac_client_data* data = (rdp_guac_client_data*) client-&gt;data;\n    ...\n    switch (patblt-&gt;bRop) {\n        case 0x00:\n            guac_protocol_send_rect(client-&gt;socket, current_layer, x, y, w, h);\n            guac_protocol_send_cfill(client-&gt;socket,\n                    GUAC_COMP_OVER, current_layer,\n                    0x00, 0x00, 0x00, 0xFF);\n            break;\n        case 0xAA:\n            break;\n        case 0xCC:\n        case 0xF0:\n            ...\n        case 0xFF:\n            guac_protocol_send_rect(client-&gt;socket, current_layer, x, y, w, h);\n            guac_protocol_send_cfill(client-&gt;socket,\n                    GUAC_COMP_OVER, current_layer,\n                    0xFF, 0xFF, 0xFF, 0xFF);\n            break;\n        default:\n            ...\n    }\n}\n</code></pre><h3 id=\"guacd-libfreerdp，libssh等\"><a href=\"#guacd-libfreerdp，libssh等\" class=\"headerlink\" title=\"guacd, libfreerdp，libssh等\"></a>guacd, libfreerdp，libssh等</h3><p>好了，到这里我感觉就开始是天坑的开始了，rdp我愣是没找到一个完整讲解其协议格式的文件。<a href=\"https://github.com/FreeRDP/FreeRDP/wiki/Reference-Documentation，在这个上面列举了一堆内部使用或者引用到的技术。\">https://github.com/FreeRDP/FreeRDP/wiki/Reference-Documentation，在这个上面列举了一堆内部使用或者引用到的技术。</a><br>不过蹦到MS的MSDN上，说找下Example看下的，看到的只有这个。。</p>\n<pre><code>00000000    03 00 00 00 10 00 00 00-00 00 00 00 01 00 00 00\n................\n\n03 00 00 00   MILCTRLCMD_OPENCONNECTION::controlCode = 0x00000003\n10 00 00 00   MILCTRLCMD_OPENCONNECTION::messageSize = 0x10 = 16 bytes\n00 00 00 00   MILCTRLCMD_OPENCONNECTION::unused (4 bytes)\n01 00 00 00   MILCTRLCMD_OPENCONNECTION::connectingFlags = MilConnection::IsDwm\n</code></pre><p>好吧，也确实是Example，不过，天坑，你就放过我吧。</p>\n<p>好了，折腾了这么将近一天时间，也是搞得最长的一篇博客了，欢迎拍砖。</p>\n<h2 id=\"相关资料\"><a href=\"#相关资料\" class=\"headerlink\" title=\"相关资料\"></a>相关资料</h2><ol>\n<li><a href=\"http://guac-dev.org/\">Guacamole</a></li>\n<li><a href=\"http://www.freerdp.com/\">FreeRDP</a></li>\n<li><a href=\"https://github.com/FreeRDP/FreeRDP/wiki/Reference-Documentation\">RDP-GitHub-Refs</a></li>\n<li><a href=\"http://en.wikipedia.org/wiki/Remote_Desktop_Protocol\">Wikipedia</a></li>\n<li><a href=\"http://social.msdn.microsoft.com/Forums/zh-CN/af15dea6-c0c0-440e-b432-783edc4b8526/rdp-protocol-specification\">MSDN</a></li>\n</ol>\n"},{"title":"Ubuntu上搭建Guacamole","date":"2013-11-25T16:00:00.000Z","_content":"\nLeader提出让我自己去了解一下Guacamole这个开源项目，自己一看，以前也没有接触过VNC之类的东西，个人对于这种开源的项目并没有太大感觉。 不过就像当初没有用过ssh之前，我一样觉得这个应该可以很快的上手。OK，进入正题，首先就是环境的搭建了。\n\n## Guacamole的原理\n\n引用官方的原理图(或者说叫流程图)。\n\n<a href=\"http://guac-dev.org/\" title=\"Guacamole结构图\" target=\"_blank\"><img src=\"http://guacamole.incubator.apache.org/doc/gug/images/guac-arch.png\" alt=\"Guacamole结构图\"></a>\n\nVNC之类的原理咱就先跳过不管了，这里面先简单说下各个模块:\n\n`Web Browser`：普通的用户，使用的HTML5与后台进行交互。\n\n`Guacamole`:处理与用户的交互，将页面上的操作请求处理下，再直接与下层的`guacd`来交互。\n\n`guacd`:封装了各种RDP协议的中间层，如VNC等。\n\n从图中可以看到，这个架构使得底层的guacd基本不需要进行什么修改和扩展了，直接部署上去就完事了，管你前端Web页面要改得怎样花里花俏的。\n\n为啥这样，guacd使用C++实现的，底层处理封装各种不同的RDP，性能肯定高些，而用Java来生成前端则是方便吧，用PHP、Python等也可以，反正`Guacamole`和`guacd`的交互是采用独家的guacamole协议。这种设计思想和X-11是多么的神似。\n\n## Guacamole的部署(此处我以Ubuntu-12.04为例)\n### VNCServer的安装启动\nubuntu上安装VNC server很简单:\n\n    sudo apt-get install vnc4server\n\n安装完后要给当前用户设置密码，这个密码就是连接VNC时要用到的:\n接着输入:\n\n    vncserver :1  # :1 表示显示号，启启用的端口为5901\n\n\n`:1`代表display-number，这里我用Chrome的插件[VNC Viewer](https://chrome.google.com/webstore/detail/vnc-viewer-for-google-chr/iabmpiboiopbgfabjmgeedhcmjenhbla?utm_source=chrome-ntp-launcher)来测试的。连上去当然只有一个ssh客户端了，配置下也可以连各种X-window，这个不是我们的重点。\n\n注意vncserver默认的端口是5900,如果采用VNC客户端的话，直接使用display-number即可，涉及到具体端口的，则使用端口`display-number+5900`，从`0`开始。\n\n### Guacamole-Web的部署\n接下来安装Java-Web端的环境，直接输入，就会自动把依赖的环境也配置好。\n\n    sudo apt-get install guacamole-tomcat\n    //会提示重启tomcat，确认即可\n\n其就是安装好java,tomcat之后，发布guacamole的war包。同时在`/etc/guacamole`中可以看到两个配置文件:`guacamole.properties`和`user-mapping.xml`\n\nguacamole.properties的配置如下:\n\n    // guacd服务绑定的ip和port，必须和guacd中配置相同\n    guacd-hostname: localhost\n    guacd-port:     4822\n\n    //这个不用管\n    auth-provider: net.sourceforge.guacamole.net.basic.BasicFileAuthenticationProvider\n    basic-user-mapping: /etc/guacamole/user-mapping.xml\n\nuser-mapping.xml的配置如下:\n\n    <user-mapping>\n        <authorize username=\"USERNAME\" password=\"PASSWORD\"> //在浏览器中的登录账号密码\n            <protocol>vnc</protocol> //rdp类型\n            <param name=\"hostname\">localhost</param> //VNC的ip，可以是任意的ip和hostname，此处以本机为例\n            <param name=\"port\">5901</param> //这个和你的VNC端口类似，注意其对应于 :1\n            <param name=\"password\">password</param>\n        </authorize>\n    </user-mapping>\n\n这两个配置文件修改后，Guacamole会动态重新加载，只要你别改错了就行。\n\n### guacd的配置和部署\n\n    sudo apt-get install guacd\n    //其实直接sudo apt-get install guacamole可以同时安装好guacd和guacamole-tomcat。\n\n注意默认的例子是连接localhost下的`4822`端口，需要的话自己再修改下源码即可。在`guacd/daemon.c`中可以看到代码中对ip-port的绑定。\n\n    char* listen_address = NULL; /* Default address of INADDR_ANY */\n    char* listen_port = \"4822\";  /* Default port */\n\n### Guacamole初体验\n好了，直接在浏览器中打开[http://localhost:8080/guacamole/](http://localhost:8080/guacamole/)就可以看到:\n\n<img src=\"/images/blog/Install-Guacamole-1.png\" alt=\"Guacamelo登录界面\">\n\n登录呢，一个简单的Web Terminal:\n\n<img src=\"/images/blog/Install-Guacamole-2.png\" alt=\"Guacamelo登录效果图\">\n\n这只是一个简单的安装流程吧，后续的集成再来总结吧\n","source":"_posts/blog/install-guacamole.md","raw":"---\ntitle:  Ubuntu上搭建Guacamole\ncategories: blog\ndate: 2013-11-26\n---\n\nLeader提出让我自己去了解一下Guacamole这个开源项目，自己一看，以前也没有接触过VNC之类的东西，个人对于这种开源的项目并没有太大感觉。 不过就像当初没有用过ssh之前，我一样觉得这个应该可以很快的上手。OK，进入正题，首先就是环境的搭建了。\n\n## Guacamole的原理\n\n引用官方的原理图(或者说叫流程图)。\n\n<a href=\"http://guac-dev.org/\" title=\"Guacamole结构图\" target=\"_blank\"><img src=\"http://guacamole.incubator.apache.org/doc/gug/images/guac-arch.png\" alt=\"Guacamole结构图\"></a>\n\nVNC之类的原理咱就先跳过不管了，这里面先简单说下各个模块:\n\n`Web Browser`：普通的用户，使用的HTML5与后台进行交互。\n\n`Guacamole`:处理与用户的交互，将页面上的操作请求处理下，再直接与下层的`guacd`来交互。\n\n`guacd`:封装了各种RDP协议的中间层，如VNC等。\n\n从图中可以看到，这个架构使得底层的guacd基本不需要进行什么修改和扩展了，直接部署上去就完事了，管你前端Web页面要改得怎样花里花俏的。\n\n为啥这样，guacd使用C++实现的，底层处理封装各种不同的RDP，性能肯定高些，而用Java来生成前端则是方便吧，用PHP、Python等也可以，反正`Guacamole`和`guacd`的交互是采用独家的guacamole协议。这种设计思想和X-11是多么的神似。\n\n## Guacamole的部署(此处我以Ubuntu-12.04为例)\n### VNCServer的安装启动\nubuntu上安装VNC server很简单:\n\n    sudo apt-get install vnc4server\n\n安装完后要给当前用户设置密码，这个密码就是连接VNC时要用到的:\n接着输入:\n\n    vncserver :1  # :1 表示显示号，启启用的端口为5901\n\n\n`:1`代表display-number，这里我用Chrome的插件[VNC Viewer](https://chrome.google.com/webstore/detail/vnc-viewer-for-google-chr/iabmpiboiopbgfabjmgeedhcmjenhbla?utm_source=chrome-ntp-launcher)来测试的。连上去当然只有一个ssh客户端了，配置下也可以连各种X-window，这个不是我们的重点。\n\n注意vncserver默认的端口是5900,如果采用VNC客户端的话，直接使用display-number即可，涉及到具体端口的，则使用端口`display-number+5900`，从`0`开始。\n\n### Guacamole-Web的部署\n接下来安装Java-Web端的环境，直接输入，就会自动把依赖的环境也配置好。\n\n    sudo apt-get install guacamole-tomcat\n    //会提示重启tomcat，确认即可\n\n其就是安装好java,tomcat之后，发布guacamole的war包。同时在`/etc/guacamole`中可以看到两个配置文件:`guacamole.properties`和`user-mapping.xml`\n\nguacamole.properties的配置如下:\n\n    // guacd服务绑定的ip和port，必须和guacd中配置相同\n    guacd-hostname: localhost\n    guacd-port:     4822\n\n    //这个不用管\n    auth-provider: net.sourceforge.guacamole.net.basic.BasicFileAuthenticationProvider\n    basic-user-mapping: /etc/guacamole/user-mapping.xml\n\nuser-mapping.xml的配置如下:\n\n    <user-mapping>\n        <authorize username=\"USERNAME\" password=\"PASSWORD\"> //在浏览器中的登录账号密码\n            <protocol>vnc</protocol> //rdp类型\n            <param name=\"hostname\">localhost</param> //VNC的ip，可以是任意的ip和hostname，此处以本机为例\n            <param name=\"port\">5901</param> //这个和你的VNC端口类似，注意其对应于 :1\n            <param name=\"password\">password</param>\n        </authorize>\n    </user-mapping>\n\n这两个配置文件修改后，Guacamole会动态重新加载，只要你别改错了就行。\n\n### guacd的配置和部署\n\n    sudo apt-get install guacd\n    //其实直接sudo apt-get install guacamole可以同时安装好guacd和guacamole-tomcat。\n\n注意默认的例子是连接localhost下的`4822`端口，需要的话自己再修改下源码即可。在`guacd/daemon.c`中可以看到代码中对ip-port的绑定。\n\n    char* listen_address = NULL; /* Default address of INADDR_ANY */\n    char* listen_port = \"4822\";  /* Default port */\n\n### Guacamole初体验\n好了，直接在浏览器中打开[http://localhost:8080/guacamole/](http://localhost:8080/guacamole/)就可以看到:\n\n<img src=\"/images/blog/Install-Guacamole-1.png\" alt=\"Guacamelo登录界面\">\n\n登录呢，一个简单的Web Terminal:\n\n<img src=\"/images/blog/Install-Guacamole-2.png\" alt=\"Guacamelo登录效果图\">\n\n这只是一个简单的安装流程吧，后续的集成再来总结吧\n","slug":"blog/install-guacamole","published":1,"updated":"2016-07-17T11:45:25.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciuyae20t000gyt7l33tzz6gp","content":"<p>Leader提出让我自己去了解一下Guacamole这个开源项目，自己一看，以前也没有接触过VNC之类的东西，个人对于这种开源的项目并没有太大感觉。 不过就像当初没有用过ssh之前，我一样觉得这个应该可以很快的上手。OK，进入正题，首先就是环境的搭建了。</p>\n<h2 id=\"Guacamole的原理\"><a href=\"#Guacamole的原理\" class=\"headerlink\" title=\"Guacamole的原理\"></a>Guacamole的原理</h2><p>引用官方的原理图(或者说叫流程图)。</p>\n<p><a href=\"http://guac-dev.org/\" title=\"Guacamole结构图\" target=\"_blank\"><img src=\"http://guacamole.incubator.apache.org/doc/gug/images/guac-arch.png\" alt=\"Guacamole结构图\"></a></p>\n<p>VNC之类的原理咱就先跳过不管了，这里面先简单说下各个模块:</p>\n<p><code>Web Browser</code>：普通的用户，使用的HTML5与后台进行交互。</p>\n<p><code>Guacamole</code>:处理与用户的交互，将页面上的操作请求处理下，再直接与下层的<code>guacd</code>来交互。</p>\n<p><code>guacd</code>:封装了各种RDP协议的中间层，如VNC等。</p>\n<p>从图中可以看到，这个架构使得底层的guacd基本不需要进行什么修改和扩展了，直接部署上去就完事了，管你前端Web页面要改得怎样花里花俏的。</p>\n<p>为啥这样，guacd使用C++实现的，底层处理封装各种不同的RDP，性能肯定高些，而用Java来生成前端则是方便吧，用PHP、Python等也可以，反正<code>Guacamole</code>和<code>guacd</code>的交互是采用独家的guacamole协议。这种设计思想和X-11是多么的神似。</p>\n<h2 id=\"Guacamole的部署-此处我以Ubuntu-12-04为例\"><a href=\"#Guacamole的部署-此处我以Ubuntu-12-04为例\" class=\"headerlink\" title=\"Guacamole的部署(此处我以Ubuntu-12.04为例)\"></a>Guacamole的部署(此处我以Ubuntu-12.04为例)</h2><h3 id=\"VNCServer的安装启动\"><a href=\"#VNCServer的安装启动\" class=\"headerlink\" title=\"VNCServer的安装启动\"></a>VNCServer的安装启动</h3><p>ubuntu上安装VNC server很简单:</p>\n<pre><code>sudo apt-get install vnc4server\n</code></pre><p>安装完后要给当前用户设置密码，这个密码就是连接VNC时要用到的:<br>接着输入:</p>\n<pre><code>vncserver :1  # :1 表示显示号，启启用的端口为5901\n</code></pre><p><code>:1</code>代表display-number，这里我用Chrome的插件<a href=\"https://chrome.google.com/webstore/detail/vnc-viewer-for-google-chr/iabmpiboiopbgfabjmgeedhcmjenhbla?utm_source=chrome-ntp-launcher\" target=\"_blank\" rel=\"external\">VNC Viewer</a>来测试的。连上去当然只有一个ssh客户端了，配置下也可以连各种X-window，这个不是我们的重点。</p>\n<p>注意vncserver默认的端口是5900,如果采用VNC客户端的话，直接使用display-number即可，涉及到具体端口的，则使用端口<code>display-number+5900</code>，从<code>0</code>开始。</p>\n<h3 id=\"Guacamole-Web的部署\"><a href=\"#Guacamole-Web的部署\" class=\"headerlink\" title=\"Guacamole-Web的部署\"></a>Guacamole-Web的部署</h3><p>接下来安装Java-Web端的环境，直接输入，就会自动把依赖的环境也配置好。</p>\n<pre><code>sudo apt-get install guacamole-tomcat\n//会提示重启tomcat，确认即可\n</code></pre><p>其就是安装好java,tomcat之后，发布guacamole的war包。同时在<code>/etc/guacamole</code>中可以看到两个配置文件:<code>guacamole.properties</code>和<code>user-mapping.xml</code></p>\n<p>guacamole.properties的配置如下:</p>\n<pre><code>// guacd服务绑定的ip和port，必须和guacd中配置相同\nguacd-hostname: localhost\nguacd-port:     4822\n\n//这个不用管\nauth-provider: net.sourceforge.guacamole.net.basic.BasicFileAuthenticationProvider\nbasic-user-mapping: /etc/guacamole/user-mapping.xml\n</code></pre><p>user-mapping.xml的配置如下:</p>\n<pre><code>&lt;user-mapping&gt;\n    &lt;authorize username=&quot;USERNAME&quot; password=&quot;PASSWORD&quot;&gt; //在浏览器中的登录账号密码\n        &lt;protocol&gt;vnc&lt;/protocol&gt; //rdp类型\n        &lt;param name=&quot;hostname&quot;&gt;localhost&lt;/param&gt; //VNC的ip，可以是任意的ip和hostname，此处以本机为例\n        &lt;param name=&quot;port&quot;&gt;5901&lt;/param&gt; //这个和你的VNC端口类似，注意其对应于 :1\n        &lt;param name=&quot;password&quot;&gt;password&lt;/param&gt;\n    &lt;/authorize&gt;\n&lt;/user-mapping&gt;\n</code></pre><p>这两个配置文件修改后，Guacamole会动态重新加载，只要你别改错了就行。</p>\n<h3 id=\"guacd的配置和部署\"><a href=\"#guacd的配置和部署\" class=\"headerlink\" title=\"guacd的配置和部署\"></a>guacd的配置和部署</h3><pre><code>sudo apt-get install guacd\n//其实直接sudo apt-get install guacamole可以同时安装好guacd和guacamole-tomcat。\n</code></pre><p>注意默认的例子是连接localhost下的<code>4822</code>端口，需要的话自己再修改下源码即可。在<code>guacd/daemon.c</code>中可以看到代码中对ip-port的绑定。</p>\n<pre><code>char* listen_address = NULL; /* Default address of INADDR_ANY */\nchar* listen_port = &quot;4822&quot;;  /* Default port */\n</code></pre><h3 id=\"Guacamole初体验\"><a href=\"#Guacamole初体验\" class=\"headerlink\" title=\"Guacamole初体验\"></a>Guacamole初体验</h3><p>好了，直接在浏览器中打开<a href=\"http://localhost:8080/guacamole/\" target=\"_blank\" rel=\"external\">http://localhost:8080/guacamole/</a>就可以看到:</p>\n<p><img src=\"/images/blog/Install-Guacamole-1.png\" alt=\"Guacamelo登录界面\"></p>\n<p>登录呢，一个简单的Web Terminal:</p>\n<p><img src=\"/images/blog/Install-Guacamole-2.png\" alt=\"Guacamelo登录效果图\"></p>\n<p>这只是一个简单的安装流程吧，后续的集成再来总结吧</p>\n","excerpt":"","more":"<p>Leader提出让我自己去了解一下Guacamole这个开源项目，自己一看，以前也没有接触过VNC之类的东西，个人对于这种开源的项目并没有太大感觉。 不过就像当初没有用过ssh之前，我一样觉得这个应该可以很快的上手。OK，进入正题，首先就是环境的搭建了。</p>\n<h2 id=\"Guacamole的原理\"><a href=\"#Guacamole的原理\" class=\"headerlink\" title=\"Guacamole的原理\"></a>Guacamole的原理</h2><p>引用官方的原理图(或者说叫流程图)。</p>\n<p><a href=\"http://guac-dev.org/\" title=\"Guacamole结构图\" target=\"_blank\"><img src=\"http://guacamole.incubator.apache.org/doc/gug/images/guac-arch.png\" alt=\"Guacamole结构图\"></a></p>\n<p>VNC之类的原理咱就先跳过不管了，这里面先简单说下各个模块:</p>\n<p><code>Web Browser</code>：普通的用户，使用的HTML5与后台进行交互。</p>\n<p><code>Guacamole</code>:处理与用户的交互，将页面上的操作请求处理下，再直接与下层的<code>guacd</code>来交互。</p>\n<p><code>guacd</code>:封装了各种RDP协议的中间层，如VNC等。</p>\n<p>从图中可以看到，这个架构使得底层的guacd基本不需要进行什么修改和扩展了，直接部署上去就完事了，管你前端Web页面要改得怎样花里花俏的。</p>\n<p>为啥这样，guacd使用C++实现的，底层处理封装各种不同的RDP，性能肯定高些，而用Java来生成前端则是方便吧，用PHP、Python等也可以，反正<code>Guacamole</code>和<code>guacd</code>的交互是采用独家的guacamole协议。这种设计思想和X-11是多么的神似。</p>\n<h2 id=\"Guacamole的部署-此处我以Ubuntu-12-04为例\"><a href=\"#Guacamole的部署-此处我以Ubuntu-12-04为例\" class=\"headerlink\" title=\"Guacamole的部署(此处我以Ubuntu-12.04为例)\"></a>Guacamole的部署(此处我以Ubuntu-12.04为例)</h2><h3 id=\"VNCServer的安装启动\"><a href=\"#VNCServer的安装启动\" class=\"headerlink\" title=\"VNCServer的安装启动\"></a>VNCServer的安装启动</h3><p>ubuntu上安装VNC server很简单:</p>\n<pre><code>sudo apt-get install vnc4server\n</code></pre><p>安装完后要给当前用户设置密码，这个密码就是连接VNC时要用到的:<br>接着输入:</p>\n<pre><code>vncserver :1  # :1 表示显示号，启启用的端口为5901\n</code></pre><p><code>:1</code>代表display-number，这里我用Chrome的插件<a href=\"https://chrome.google.com/webstore/detail/vnc-viewer-for-google-chr/iabmpiboiopbgfabjmgeedhcmjenhbla?utm_source=chrome-ntp-launcher\">VNC Viewer</a>来测试的。连上去当然只有一个ssh客户端了，配置下也可以连各种X-window，这个不是我们的重点。</p>\n<p>注意vncserver默认的端口是5900,如果采用VNC客户端的话，直接使用display-number即可，涉及到具体端口的，则使用端口<code>display-number+5900</code>，从<code>0</code>开始。</p>\n<h3 id=\"Guacamole-Web的部署\"><a href=\"#Guacamole-Web的部署\" class=\"headerlink\" title=\"Guacamole-Web的部署\"></a>Guacamole-Web的部署</h3><p>接下来安装Java-Web端的环境，直接输入，就会自动把依赖的环境也配置好。</p>\n<pre><code>sudo apt-get install guacamole-tomcat\n//会提示重启tomcat，确认即可\n</code></pre><p>其就是安装好java,tomcat之后，发布guacamole的war包。同时在<code>/etc/guacamole</code>中可以看到两个配置文件:<code>guacamole.properties</code>和<code>user-mapping.xml</code></p>\n<p>guacamole.properties的配置如下:</p>\n<pre><code>// guacd服务绑定的ip和port，必须和guacd中配置相同\nguacd-hostname: localhost\nguacd-port:     4822\n\n//这个不用管\nauth-provider: net.sourceforge.guacamole.net.basic.BasicFileAuthenticationProvider\nbasic-user-mapping: /etc/guacamole/user-mapping.xml\n</code></pre><p>user-mapping.xml的配置如下:</p>\n<pre><code>&lt;user-mapping&gt;\n    &lt;authorize username=&quot;USERNAME&quot; password=&quot;PASSWORD&quot;&gt; //在浏览器中的登录账号密码\n        &lt;protocol&gt;vnc&lt;/protocol&gt; //rdp类型\n        &lt;param name=&quot;hostname&quot;&gt;localhost&lt;/param&gt; //VNC的ip，可以是任意的ip和hostname，此处以本机为例\n        &lt;param name=&quot;port&quot;&gt;5901&lt;/param&gt; //这个和你的VNC端口类似，注意其对应于 :1\n        &lt;param name=&quot;password&quot;&gt;password&lt;/param&gt;\n    &lt;/authorize&gt;\n&lt;/user-mapping&gt;\n</code></pre><p>这两个配置文件修改后，Guacamole会动态重新加载，只要你别改错了就行。</p>\n<h3 id=\"guacd的配置和部署\"><a href=\"#guacd的配置和部署\" class=\"headerlink\" title=\"guacd的配置和部署\"></a>guacd的配置和部署</h3><pre><code>sudo apt-get install guacd\n//其实直接sudo apt-get install guacamole可以同时安装好guacd和guacamole-tomcat。\n</code></pre><p>注意默认的例子是连接localhost下的<code>4822</code>端口，需要的话自己再修改下源码即可。在<code>guacd/daemon.c</code>中可以看到代码中对ip-port的绑定。</p>\n<pre><code>char* listen_address = NULL; /* Default address of INADDR_ANY */\nchar* listen_port = &quot;4822&quot;;  /* Default port */\n</code></pre><h3 id=\"Guacamole初体验\"><a href=\"#Guacamole初体验\" class=\"headerlink\" title=\"Guacamole初体验\"></a>Guacamole初体验</h3><p>好了，直接在浏览器中打开<a href=\"http://localhost:8080/guacamole/\">http://localhost:8080/guacamole/</a>就可以看到:</p>\n<p><img src=\"/images/blog/Install-Guacamole-1.png\" alt=\"Guacamelo登录界面\"></p>\n<p>登录呢，一个简单的Web Terminal:</p>\n<p><img src=\"/images/blog/Install-Guacamole-2.png\" alt=\"Guacamelo登录效果图\"></p>\n<p>这只是一个简单的安装流程吧，后续的集成再来总结吧</p>\n"},{"title":"Dell R720 ipmi配置","date":"2014-09-14T16:00:00.000Z","_content":"\nIPMI是一个intel,hp,dell等提出的一个跨软硬件平台的工业标准,用户可以通过其来监控或获取服务器的状态,但是需要提前配置\n\n## R720的配置\n\n**着重说明一下版本信息为1.57, 对于这个配置,不同的版本界面及配置均有所区别**\n\n重启进去`System Setup`界面,选择`iDRAC Settings`:\n<img src=\"/images/blog/idrac-config.png\" style=\"width:98%;\">\n\n进入后,先配置`Network`:\n<img src=\"/images/blog/choose_network.png\" style=\"width:98%;\">\n先后在这个页面中配置了：\n\n- 启动iDrac网卡\n- 设置idrac的ip\n- 启用ipmi\n\n<img src=\"/images/blog/enable_idrc.png\" style=\"width:98%;\">\n如果服务器启用了idrac卡,在`Nic Selection`可以看到这个`Dedicated`的专用网卡,否则只能看到`LOM1`,`LOM2`(为`Lan Of MotherBoard`的缩写)这样的配置。没有这个只是功能缩减了一点,其余的配置依然相同。\n<img src=\"/images/blog/set_idrac_ip.png\" style=\"width:98%;\">\n启用`ipmi`后可以通过`ipmitool`来进行远程管理了\n<img src=\"/images/blog/enable_ipmi.png\" style=\"width:98%;\">\n\n配置完网络后,再配置`User Configuration`,只是配置一下用户名及密码即可:\n<img src=\"/images/blog/user_confuguration.png\" style=\"width:98%;\">\n<img src=\"/images/blog/set_user_passwd.png\" style=\"width:98%;\">\n\n\n## ipmitool的安装及使用\n\n\n\t# 先安装ipmitool\n\tapt-get install -y openipmi ipmitool\n\n\t# 启动openimpi服务,否则会报错\n\tservice openipmi start\n\n接下来就直接执行了\n\n\t# ipmitool -I <open|lan|lanplus> -U <user> -P <passwd> command\n\tipmitool -I open\n\tipmitool -I lanplus .. chassis power staus\n\n这里面有个Interface是需要区分的,使用的不对则会报错。[我就不解释了,直接粘出处](http://manpages.ubuntu.com/manpages/lucid/man1/ipmitool.1.html#contenttoc10).\n\n\n\n在实际中我只碰到这个问题：`Error: Unable to establish LAN session`。 其有可能是由两个问题引起的:\n\n0. 在idrac配置中,没有启用impi\n0. openipmi服务想没有启动\n0. 不同的ipmi版本使用的`Interface`版本也不相同,尝试`lan`和`lanplus`或者几个其他的Interface试一下\n\n## 参考\n0. [使用 ipmitool 实现 Linux 系统下对服务器的 ipmi 管理](http://www.ibm.com/developerworks/cn/linux/l-ipmi/index.html)\n0. [Cobbler Dell ipmi 设置](http://tinytub.github.io/Cobbler-Dell-ipmi.html)\n","source":"_posts/blog/dell-r720-idrac.md","raw":"---\ntitle:  Dell R720 ipmi配置\ncategories: blog\ndate: 2014-09-15\n---\n\nIPMI是一个intel,hp,dell等提出的一个跨软硬件平台的工业标准,用户可以通过其来监控或获取服务器的状态,但是需要提前配置\n\n## R720的配置\n\n**着重说明一下版本信息为1.57, 对于这个配置,不同的版本界面及配置均有所区别**\n\n重启进去`System Setup`界面,选择`iDRAC Settings`:\n<img src=\"/images/blog/idrac-config.png\" style=\"width:98%;\">\n\n进入后,先配置`Network`:\n<img src=\"/images/blog/choose_network.png\" style=\"width:98%;\">\n先后在这个页面中配置了：\n\n- 启动iDrac网卡\n- 设置idrac的ip\n- 启用ipmi\n\n<img src=\"/images/blog/enable_idrc.png\" style=\"width:98%;\">\n如果服务器启用了idrac卡,在`Nic Selection`可以看到这个`Dedicated`的专用网卡,否则只能看到`LOM1`,`LOM2`(为`Lan Of MotherBoard`的缩写)这样的配置。没有这个只是功能缩减了一点,其余的配置依然相同。\n<img src=\"/images/blog/set_idrac_ip.png\" style=\"width:98%;\">\n启用`ipmi`后可以通过`ipmitool`来进行远程管理了\n<img src=\"/images/blog/enable_ipmi.png\" style=\"width:98%;\">\n\n配置完网络后,再配置`User Configuration`,只是配置一下用户名及密码即可:\n<img src=\"/images/blog/user_confuguration.png\" style=\"width:98%;\">\n<img src=\"/images/blog/set_user_passwd.png\" style=\"width:98%;\">\n\n\n## ipmitool的安装及使用\n\n\n\t# 先安装ipmitool\n\tapt-get install -y openipmi ipmitool\n\n\t# 启动openimpi服务,否则会报错\n\tservice openipmi start\n\n接下来就直接执行了\n\n\t# ipmitool -I <open|lan|lanplus> -U <user> -P <passwd> command\n\tipmitool -I open\n\tipmitool -I lanplus .. chassis power staus\n\n这里面有个Interface是需要区分的,使用的不对则会报错。[我就不解释了,直接粘出处](http://manpages.ubuntu.com/manpages/lucid/man1/ipmitool.1.html#contenttoc10).\n\n\n\n在实际中我只碰到这个问题：`Error: Unable to establish LAN session`。 其有可能是由两个问题引起的:\n\n0. 在idrac配置中,没有启用impi\n0. openipmi服务想没有启动\n0. 不同的ipmi版本使用的`Interface`版本也不相同,尝试`lan`和`lanplus`或者几个其他的Interface试一下\n\n## 参考\n0. [使用 ipmitool 实现 Linux 系统下对服务器的 ipmi 管理](http://www.ibm.com/developerworks/cn/linux/l-ipmi/index.html)\n0. [Cobbler Dell ipmi 设置](http://tinytub.github.io/Cobbler-Dell-ipmi.html)\n","slug":"blog/dell-r720-idrac","published":1,"updated":"2016-07-17T11:33:50.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciuyae20w000iyt7l0v9plb17","content":"<p>IPMI是一个intel,hp,dell等提出的一个跨软硬件平台的工业标准,用户可以通过其来监控或获取服务器的状态,但是需要提前配置</p>\n<h2 id=\"R720的配置\"><a href=\"#R720的配置\" class=\"headerlink\" title=\"R720的配置\"></a>R720的配置</h2><p><strong>着重说明一下版本信息为1.57, 对于这个配置,不同的版本界面及配置均有所区别</strong></p>\n<p>重启进去<code>System Setup</code>界面,选择<code>iDRAC Settings</code>:<br><img src=\"/images/blog/idrac-config.png\" style=\"width:98%;\"></p>\n<p>进入后,先配置<code>Network</code>:<br><img src=\"/images/blog/choose_network.png\" style=\"width:98%;\"><br>先后在这个页面中配置了：</p>\n<ul>\n<li>启动iDrac网卡</li>\n<li>设置idrac的ip</li>\n<li>启用ipmi</li>\n</ul>\n<p><img src=\"/images/blog/enable_idrc.png\" style=\"width:98%;\"><br>如果服务器启用了idrac卡,在<code>Nic Selection</code>可以看到这个<code>Dedicated</code>的专用网卡,否则只能看到<code>LOM1</code>,<code>LOM2</code>(为<code>Lan Of MotherBoard</code>的缩写)这样的配置。没有这个只是功能缩减了一点,其余的配置依然相同。<br><img src=\"/images/blog/set_idrac_ip.png\" style=\"width:98%;\"><br>启用<code>ipmi</code>后可以通过<code>ipmitool</code>来进行远程管理了<br><img src=\"/images/blog/enable_ipmi.png\" style=\"width:98%;\"></p>\n<p>配置完网络后,再配置<code>User Configuration</code>,只是配置一下用户名及密码即可:<br><img src=\"/images/blog/user_confuguration.png\" style=\"width:98%;\"><br><img src=\"/images/blog/set_user_passwd.png\" style=\"width:98%;\"></p>\n<h2 id=\"ipmitool的安装及使用\"><a href=\"#ipmitool的安装及使用\" class=\"headerlink\" title=\"ipmitool的安装及使用\"></a>ipmitool的安装及使用</h2><pre><code># 先安装ipmitool\napt-get install -y openipmi ipmitool\n\n# 启动openimpi服务,否则会报错\nservice openipmi start\n</code></pre><p>接下来就直接执行了</p>\n<pre><code># ipmitool -I &lt;open|lan|lanplus&gt; -U &lt;user&gt; -P &lt;passwd&gt; command\nipmitool -I open\nipmitool -I lanplus .. chassis power staus\n</code></pre><p>这里面有个Interface是需要区分的,使用的不对则会报错。<a href=\"http://manpages.ubuntu.com/manpages/lucid/man1/ipmitool.1.html#contenttoc10\" target=\"_blank\" rel=\"external\">我就不解释了,直接粘出处</a>.</p>\n<p>在实际中我只碰到这个问题：<code>Error: Unable to establish LAN session</code>。 其有可能是由两个问题引起的:</p>\n<ol>\n<li>在idrac配置中,没有启用impi</li>\n<li>openipmi服务想没有启动</li>\n<li>不同的ipmi版本使用的<code>Interface</code>版本也不相同,尝试<code>lan</code>和<code>lanplus</code>或者几个其他的Interface试一下</li>\n</ol>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ol>\n<li><a href=\"http://www.ibm.com/developerworks/cn/linux/l-ipmi/index.html\" target=\"_blank\" rel=\"external\">使用 ipmitool 实现 Linux 系统下对服务器的 ipmi 管理</a></li>\n<li><a href=\"http://tinytub.github.io/Cobbler-Dell-ipmi.html\" target=\"_blank\" rel=\"external\">Cobbler Dell ipmi 设置</a></li>\n</ol>\n","excerpt":"","more":"<p>IPMI是一个intel,hp,dell等提出的一个跨软硬件平台的工业标准,用户可以通过其来监控或获取服务器的状态,但是需要提前配置</p>\n<h2 id=\"R720的配置\"><a href=\"#R720的配置\" class=\"headerlink\" title=\"R720的配置\"></a>R720的配置</h2><p><strong>着重说明一下版本信息为1.57, 对于这个配置,不同的版本界面及配置均有所区别</strong></p>\n<p>重启进去<code>System Setup</code>界面,选择<code>iDRAC Settings</code>:<br><img src=\"/images/blog/idrac-config.png\" style=\"width:98%;\"></p>\n<p>进入后,先配置<code>Network</code>:<br><img src=\"/images/blog/choose_network.png\" style=\"width:98%;\"><br>先后在这个页面中配置了：</p>\n<ul>\n<li>启动iDrac网卡</li>\n<li>设置idrac的ip</li>\n<li>启用ipmi</li>\n</ul>\n<p><img src=\"/images/blog/enable_idrc.png\" style=\"width:98%;\"><br>如果服务器启用了idrac卡,在<code>Nic Selection</code>可以看到这个<code>Dedicated</code>的专用网卡,否则只能看到<code>LOM1</code>,<code>LOM2</code>(为<code>Lan Of MotherBoard</code>的缩写)这样的配置。没有这个只是功能缩减了一点,其余的配置依然相同。<br><img src=\"/images/blog/set_idrac_ip.png\" style=\"width:98%;\"><br>启用<code>ipmi</code>后可以通过<code>ipmitool</code>来进行远程管理了<br><img src=\"/images/blog/enable_ipmi.png\" style=\"width:98%;\"></p>\n<p>配置完网络后,再配置<code>User Configuration</code>,只是配置一下用户名及密码即可:<br><img src=\"/images/blog/user_confuguration.png\" style=\"width:98%;\"><br><img src=\"/images/blog/set_user_passwd.png\" style=\"width:98%;\"></p>\n<h2 id=\"ipmitool的安装及使用\"><a href=\"#ipmitool的安装及使用\" class=\"headerlink\" title=\"ipmitool的安装及使用\"></a>ipmitool的安装及使用</h2><pre><code># 先安装ipmitool\napt-get install -y openipmi ipmitool\n\n# 启动openimpi服务,否则会报错\nservice openipmi start\n</code></pre><p>接下来就直接执行了</p>\n<pre><code># ipmitool -I &lt;open|lan|lanplus&gt; -U &lt;user&gt; -P &lt;passwd&gt; command\nipmitool -I open\nipmitool -I lanplus .. chassis power staus\n</code></pre><p>这里面有个Interface是需要区分的,使用的不对则会报错。<a href=\"http://manpages.ubuntu.com/manpages/lucid/man1/ipmitool.1.html#contenttoc10\">我就不解释了,直接粘出处</a>.</p>\n<p>在实际中我只碰到这个问题：<code>Error: Unable to establish LAN session</code>。 其有可能是由两个问题引起的:</p>\n<ol>\n<li>在idrac配置中,没有启用impi</li>\n<li>openipmi服务想没有启动</li>\n<li>不同的ipmi版本使用的<code>Interface</code>版本也不相同,尝试<code>lan</code>和<code>lanplus</code>或者几个其他的Interface试一下</li>\n</ol>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ol>\n<li><a href=\"http://www.ibm.com/developerworks/cn/linux/l-ipmi/index.html\">使用 ipmitool 实现 Linux 系统下对服务器的 ipmi 管理</a></li>\n<li><a href=\"http://tinytub.github.io/Cobbler-Dell-ipmi.html\">Cobbler Dell ipmi 设置</a></li>\n</ol>\n"},{"title":"disk-image-builder制作虚拟机镜像","date":"2014-07-20T16:00:00.000Z","_content":"\n## 简介\n`DiskImage-Builder`是通过chroot到一个创建的临时目录中(默认在/tmp/image.\\*中可以看到),同时绑定系统的/proc, /sys, 和/dev 目录来配置(硬件资源)环境的.当提供好的脚本执行完成后,将该tmp目录内容打入到镜像文件中即完成了所有的制作过程.\n\nOK,既然`DiskImage-Builder`提供了一个完整的执行环境,那么要定制一个满足自己需求的镜像,只需要按照其提供的格式完成几个**element**, 接着就biubiu地完成了一个自己的镜像了.\n\n## element\n\nelement是一堆符合特定名称的文件(主要为脚本)/文件夹的集合. 其主要包含以下的元素:\n\n- 用于执行脚本, 命名及存放的路径均有特殊含义(这些脚本中描述了在制作镜像的过程中需要执行哪些操作,比如安装好apache,创建用户等.)\n- 依赖描述\n- 描述文件, 不是强制的，但提供这个就相当于有一个良好的注释, 便于他人阅读和使用\n\n\n### element的执行脚本\n\n`DiskImage-Builder`默认提供了一些基础的element,可以在源码目录中diskimage-builder/elements中看到. 其中执行的脚本,是按照目录划分的,按照顺序执行.每一个目录操作都有几个属性:\n\n- 其执行的环境,是否在chroot中\n- 输入变量\n- 输出变量\n\n以下列出了其执行的目录, 执行按先后顺率来排列\n<table style=\"width:96%;margin:2%;border:1px\">\n  <tr>\n    <th>\n    操作\n    </th>\n    <th>\n    执行目录\n    </th>\n    <th>\n    接受变量\n    </th>\n    <th>\n    输出变量\n    </th>\n  </tr>\n\n  <tr>\n    <td>\n    root.d\n    </td>\n    <td>\n    outside chroot\n    </td>\n    <td>\n    $ARCH=i386|amd64|armhf\n    $TARGET_ROOT={path}\n    </td>\n    <td>\n    -\n    </td>\n  </tr>\n\n  <tr>\n    <td>\n    extra-data.d\n    </td>\n    <td>\n    outside chroot\n    </td>\n    <td>\n    $TMP_HOOKS_PATH\n    </td>\n    <td>\n    -\n    </td>\n  </tr>\n\n  <tr>\n    <td>\n    pre-install.d\n    </td>\n    <td>\n    in chroot\n    </td>\n    <td>\n    -\n    </td>\n    <td>\n    -\n    </td>\n  </tr>\n\n  <tr>\n    <td>\n    install.d\n    </td>\n    <td>\n    in chroot\n    </td>\n    <td>\n    -\n    </td>\n    <td>\n    -\n    </td>\n  </tr>\n\n  <tr>\n    <td>\n    post-install.d\n    </td>\n    <td>\n    in chroot\n    </td>\n    <td>\n    -\n    </td>\n    <td>\n    -\n    </td>\n  </tr>\n\n  <tr>\n    <td>\n    block-device.d\n    </td>\n    <td>\n    outside chroot\n    </td>\n    <td>\n    $IMAGE_BLOCK_DEVICE={path}\n    $TARGET_ROOT={path}\n    </td>\n    <td>\n    $IMAGE_BLOCK_DEVICE={path}\n    </td>\n  </tr>\n\n  <tr>\n    <td>\n    finalise.d\n    </td>\n    <td>\n    in chroot\n    </td>\n    <td>\n    -\n    </td>\n    <td>\n    -\n    </td>\n  </tr>\n\n  <tr>\n    <td>\n    cleanup.d\n    </td>\n    <td>\n    outside chroot\n    </td>\n    <td>\n    $ARCH=i386|amd64|armhf\n    $TARGET_ROOT={path}\n    </td>\n    <td>\n    -\n    </td>\n  </tr>\n</table>\n\n\n### element之间的依赖\n\nelement的依赖主要由两个文件来描述\n\n- element-deps: 描述该elements所依赖的element, 那么在执行该elment之前会先执行其依赖的element.\n\n  如默认的element: ubuntu\n\n    cache-url\n    cloud-init-datasources\n    dib-run-parts\n    dkms\n    dpkg\n\n  也就是说在执行element`ubuntu`之前会先去执行如`dkms`,`dpkg`,`cache-url`等所依赖的element.\n\n- element-provides: 描述该elements额外提供哪些element的功能, 也就说若执行该element,那么其额外提供的element就不会在执行.\n\n  依然拿ubuntu来举例：\n\n    operating-system\n\n  这个就说明,若选择了`ubuntu`,则不会执行名为`operating-system`的element了\n\n\n其实到这里，基本就已经了解了一个element的作用了，只要看一下相关的一两个例子，就可以写出满足自己定制需求的element脚本.\n\n## 配置diskimage-builder\n\n    # 下载diskimage-builder，默认已有一些常用的element\n    git clone https://github.com/openstack/diskimage-builder.git\n\n    # 以下两个则是配置openstack需要涉及的一些element，可以自行参考和使用\n    git clone https://github.com/openstack/tripleo-image-elements\n    git clone https://github.com/openstack/heat-templates\n\n\n绿色无需安装,下载即可使用. 当然需要安装`qemu-utils`和物理内存大于4G.\n\n## 运行环境变量\n\n以创建ubuntu为例\n\n### 必选环境变量\n\n    # 指定版本\n    export DIB_RELEASE=precise|trusty\n\n    # 指定引用的elements路径\n    export ELEMENTS_PATH=elements_path1:element_path2\n\n\n### 可选环境变量\n\n    # 指定image的源,比如ubuntu走的是这个\n    # 主要是用来优化下载系统镜像速度的\n    export DIB_CLOUD_IMAGES=https://cloud-images.ubuntu.com/\n\n    # 制定apt-source的源, 相当于使用自定义好的文件去替换\n    # 要使用到element: apt-sources\n    export DIB_APT_SOURCES=/opt/apt-source.list.${DIB_RELEASE}\n\n\n## 运行参数\n\n    # 指定image-cache的缓存路径\n    # 默认是：~/.cache/image-create\n    --image-cache\n\n    # 设置不更新已存在的image-cache\n    # 其实也就是先判断一下sha256md5是否匹配,不匹配的情况下这个参数才有作用\n    # 默认是如有不同则进行uopdate\n    --offline\n\n    # 指定目标平台的系统版本\n    -a amd64|i386\n\n    # 输出镜像的名称\n    -o filename\n\n\n## 运行示例\n\n    # 生成ubuntu-precise镜像\n    export ELEMENTS_PATH=elements\n    export DIB_RELEASE=precise\n    export DIB_APT_SOURCES=apt-source.list.${DIB_RELEASE}\n    diskimage-builder/bin/disk-image-create vm ubuntu apt-sources custom-script -a amd64 -o ubuntu-precise\n\n    # 将镜像上传到glance中\n    glance image-create --name=\"ubuntu-$DIB_RELEASE\" --disk-format=qcow2 --container-format=bare --is-public=true < ubuntu-$>\n\n\n## 参考\n\n 0. [Using Diskimage Builder for Heat Deploying Applications](https://pypi.python.org/pypi/diskimage-builder)\n 0. [diskimages-heaticehousesummit](http://www.slideshare.net/hpcloud/diskimages-heaticehousesummit)\n","source":"_posts/blog/disk-image-builder.md","raw":"---\ntitle: disk-image-builder制作虚拟机镜像\ncategories: blog\ndate: 2014-07-21\n---\n\n## 简介\n`DiskImage-Builder`是通过chroot到一个创建的临时目录中(默认在/tmp/image.\\*中可以看到),同时绑定系统的/proc, /sys, 和/dev 目录来配置(硬件资源)环境的.当提供好的脚本执行完成后,将该tmp目录内容打入到镜像文件中即完成了所有的制作过程.\n\nOK,既然`DiskImage-Builder`提供了一个完整的执行环境,那么要定制一个满足自己需求的镜像,只需要按照其提供的格式完成几个**element**, 接着就biubiu地完成了一个自己的镜像了.\n\n## element\n\nelement是一堆符合特定名称的文件(主要为脚本)/文件夹的集合. 其主要包含以下的元素:\n\n- 用于执行脚本, 命名及存放的路径均有特殊含义(这些脚本中描述了在制作镜像的过程中需要执行哪些操作,比如安装好apache,创建用户等.)\n- 依赖描述\n- 描述文件, 不是强制的，但提供这个就相当于有一个良好的注释, 便于他人阅读和使用\n\n\n### element的执行脚本\n\n`DiskImage-Builder`默认提供了一些基础的element,可以在源码目录中diskimage-builder/elements中看到. 其中执行的脚本,是按照目录划分的,按照顺序执行.每一个目录操作都有几个属性:\n\n- 其执行的环境,是否在chroot中\n- 输入变量\n- 输出变量\n\n以下列出了其执行的目录, 执行按先后顺率来排列\n<table style=\"width:96%;margin:2%;border:1px\">\n  <tr>\n    <th>\n    操作\n    </th>\n    <th>\n    执行目录\n    </th>\n    <th>\n    接受变量\n    </th>\n    <th>\n    输出变量\n    </th>\n  </tr>\n\n  <tr>\n    <td>\n    root.d\n    </td>\n    <td>\n    outside chroot\n    </td>\n    <td>\n    $ARCH=i386|amd64|armhf\n    $TARGET_ROOT={path}\n    </td>\n    <td>\n    -\n    </td>\n  </tr>\n\n  <tr>\n    <td>\n    extra-data.d\n    </td>\n    <td>\n    outside chroot\n    </td>\n    <td>\n    $TMP_HOOKS_PATH\n    </td>\n    <td>\n    -\n    </td>\n  </tr>\n\n  <tr>\n    <td>\n    pre-install.d\n    </td>\n    <td>\n    in chroot\n    </td>\n    <td>\n    -\n    </td>\n    <td>\n    -\n    </td>\n  </tr>\n\n  <tr>\n    <td>\n    install.d\n    </td>\n    <td>\n    in chroot\n    </td>\n    <td>\n    -\n    </td>\n    <td>\n    -\n    </td>\n  </tr>\n\n  <tr>\n    <td>\n    post-install.d\n    </td>\n    <td>\n    in chroot\n    </td>\n    <td>\n    -\n    </td>\n    <td>\n    -\n    </td>\n  </tr>\n\n  <tr>\n    <td>\n    block-device.d\n    </td>\n    <td>\n    outside chroot\n    </td>\n    <td>\n    $IMAGE_BLOCK_DEVICE={path}\n    $TARGET_ROOT={path}\n    </td>\n    <td>\n    $IMAGE_BLOCK_DEVICE={path}\n    </td>\n  </tr>\n\n  <tr>\n    <td>\n    finalise.d\n    </td>\n    <td>\n    in chroot\n    </td>\n    <td>\n    -\n    </td>\n    <td>\n    -\n    </td>\n  </tr>\n\n  <tr>\n    <td>\n    cleanup.d\n    </td>\n    <td>\n    outside chroot\n    </td>\n    <td>\n    $ARCH=i386|amd64|armhf\n    $TARGET_ROOT={path}\n    </td>\n    <td>\n    -\n    </td>\n  </tr>\n</table>\n\n\n### element之间的依赖\n\nelement的依赖主要由两个文件来描述\n\n- element-deps: 描述该elements所依赖的element, 那么在执行该elment之前会先执行其依赖的element.\n\n  如默认的element: ubuntu\n\n    cache-url\n    cloud-init-datasources\n    dib-run-parts\n    dkms\n    dpkg\n\n  也就是说在执行element`ubuntu`之前会先去执行如`dkms`,`dpkg`,`cache-url`等所依赖的element.\n\n- element-provides: 描述该elements额外提供哪些element的功能, 也就说若执行该element,那么其额外提供的element就不会在执行.\n\n  依然拿ubuntu来举例：\n\n    operating-system\n\n  这个就说明,若选择了`ubuntu`,则不会执行名为`operating-system`的element了\n\n\n其实到这里，基本就已经了解了一个element的作用了，只要看一下相关的一两个例子，就可以写出满足自己定制需求的element脚本.\n\n## 配置diskimage-builder\n\n    # 下载diskimage-builder，默认已有一些常用的element\n    git clone https://github.com/openstack/diskimage-builder.git\n\n    # 以下两个则是配置openstack需要涉及的一些element，可以自行参考和使用\n    git clone https://github.com/openstack/tripleo-image-elements\n    git clone https://github.com/openstack/heat-templates\n\n\n绿色无需安装,下载即可使用. 当然需要安装`qemu-utils`和物理内存大于4G.\n\n## 运行环境变量\n\n以创建ubuntu为例\n\n### 必选环境变量\n\n    # 指定版本\n    export DIB_RELEASE=precise|trusty\n\n    # 指定引用的elements路径\n    export ELEMENTS_PATH=elements_path1:element_path2\n\n\n### 可选环境变量\n\n    # 指定image的源,比如ubuntu走的是这个\n    # 主要是用来优化下载系统镜像速度的\n    export DIB_CLOUD_IMAGES=https://cloud-images.ubuntu.com/\n\n    # 制定apt-source的源, 相当于使用自定义好的文件去替换\n    # 要使用到element: apt-sources\n    export DIB_APT_SOURCES=/opt/apt-source.list.${DIB_RELEASE}\n\n\n## 运行参数\n\n    # 指定image-cache的缓存路径\n    # 默认是：~/.cache/image-create\n    --image-cache\n\n    # 设置不更新已存在的image-cache\n    # 其实也就是先判断一下sha256md5是否匹配,不匹配的情况下这个参数才有作用\n    # 默认是如有不同则进行uopdate\n    --offline\n\n    # 指定目标平台的系统版本\n    -a amd64|i386\n\n    # 输出镜像的名称\n    -o filename\n\n\n## 运行示例\n\n    # 生成ubuntu-precise镜像\n    export ELEMENTS_PATH=elements\n    export DIB_RELEASE=precise\n    export DIB_APT_SOURCES=apt-source.list.${DIB_RELEASE}\n    diskimage-builder/bin/disk-image-create vm ubuntu apt-sources custom-script -a amd64 -o ubuntu-precise\n\n    # 将镜像上传到glance中\n    glance image-create --name=\"ubuntu-$DIB_RELEASE\" --disk-format=qcow2 --container-format=bare --is-public=true < ubuntu-$>\n\n\n## 参考\n\n 0. [Using Diskimage Builder for Heat Deploying Applications](https://pypi.python.org/pypi/diskimage-builder)\n 0. [diskimages-heaticehousesummit](http://www.slideshare.net/hpcloud/diskimages-heaticehousesummit)\n","slug":"blog/disk-image-builder","published":1,"updated":"2016-07-17T11:33:59.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciuyae210000lyt7ln2xkvq5c","content":"<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p><code>DiskImage-Builder</code>是通过chroot到一个创建的临时目录中(默认在/tmp/image.*中可以看到),同时绑定系统的/proc, /sys, 和/dev 目录来配置(硬件资源)环境的.当提供好的脚本执行完成后,将该tmp目录内容打入到镜像文件中即完成了所有的制作过程.</p>\n<p>OK,既然<code>DiskImage-Builder</code>提供了一个完整的执行环境,那么要定制一个满足自己需求的镜像,只需要按照其提供的格式完成几个<strong>element</strong>, 接着就biubiu地完成了一个自己的镜像了.</p>\n<h2 id=\"element\"><a href=\"#element\" class=\"headerlink\" title=\"element\"></a>element</h2><p>element是一堆符合特定名称的文件(主要为脚本)/文件夹的集合. 其主要包含以下的元素:</p>\n<ul>\n<li>用于执行脚本, 命名及存放的路径均有特殊含义(这些脚本中描述了在制作镜像的过程中需要执行哪些操作,比如安装好apache,创建用户等.)</li>\n<li>依赖描述</li>\n<li>描述文件, 不是强制的，但提供这个就相当于有一个良好的注释, 便于他人阅读和使用</li>\n</ul>\n<h3 id=\"element的执行脚本\"><a href=\"#element的执行脚本\" class=\"headerlink\" title=\"element的执行脚本\"></a>element的执行脚本</h3><p><code>DiskImage-Builder</code>默认提供了一些基础的element,可以在源码目录中diskimage-builder/elements中看到. 其中执行的脚本,是按照目录划分的,按照顺序执行.每一个目录操作都有几个属性:</p>\n<ul>\n<li>其执行的环境,是否在chroot中</li>\n<li>输入变量</li>\n<li>输出变量</li>\n</ul>\n<p>以下列出了其执行的目录, 执行按先后顺率来排列</p>\n<table style=\"width:96%;margin:2%;border:1px\"><br>  <tr><br>    <th><br>    操作<br>    </th><br>    <th><br>    执行目录<br>    </th><br>    <th><br>    接受变量<br>    </th><br>    <th><br>    输出变量<br>    </th><br>  </tr><br><br>  <tr><br>    <td><br>    root.d<br>    </td><br>    <td><br>    outside chroot<br>    </td><br>    <td><br>    $ARCH=i386|amd64|armhf<br>    $TARGET_ROOT={path}<br>    </td><br>    <td><br>    -<br>    </td><br>  </tr><br><br>  <tr><br>    <td><br>    extra-data.d<br>    </td><br>    <td><br>    outside chroot<br>    </td><br>    <td><br>    $TMP_HOOKS_PATH<br>    </td><br>    <td><br>    -<br>    </td><br>  </tr><br><br>  <tr><br>    <td><br>    pre-install.d<br>    </td><br>    <td><br>    in chroot<br>    </td><br>    <td><br>    -<br>    </td><br>    <td><br>    -<br>    </td><br>  </tr><br><br>  <tr><br>    <td><br>    install.d<br>    </td><br>    <td><br>    in chroot<br>    </td><br>    <td><br>    -<br>    </td><br>    <td><br>    -<br>    </td><br>  </tr><br><br>  <tr><br>    <td><br>    post-install.d<br>    </td><br>    <td><br>    in chroot<br>    </td><br>    <td><br>    -<br>    </td><br>    <td><br>    -<br>    </td><br>  </tr><br><br>  <tr><br>    <td><br>    block-device.d<br>    </td><br>    <td><br>    outside chroot<br>    </td><br>    <td><br>    $IMAGE_BLOCK_DEVICE={path}<br>    $TARGET_ROOT={path}<br>    </td><br>    <td><br>    $IMAGE_BLOCK_DEVICE={path}<br>    </td><br>  </tr><br><br>  <tr><br>    <td><br>    finalise.d<br>    </td><br>    <td><br>    in chroot<br>    </td><br>    <td><br>    -<br>    </td><br>    <td><br>    -<br>    </td><br>  </tr><br><br>  <tr><br>    <td><br>    cleanup.d<br>    </td><br>    <td><br>    outside chroot<br>    </td><br>    <td><br>    $ARCH=i386|amd64|armhf<br>    $TARGET_ROOT={path}<br>    </td><br>    <td><br>    -<br>    </td><br>  </tr><br></table>\n\n\n<h3 id=\"element之间的依赖\"><a href=\"#element之间的依赖\" class=\"headerlink\" title=\"element之间的依赖\"></a>element之间的依赖</h3><p>element的依赖主要由两个文件来描述</p>\n<ul>\n<li><p>element-deps: 描述该elements所依赖的element, 那么在执行该elment之前会先执行其依赖的element.</p>\n<p>如默认的element: ubuntu</p>\n<p>  cache-url<br>  cloud-init-datasources<br>  dib-run-parts<br>  dkms<br>  dpkg</p>\n<p>也就是说在执行element<code>ubuntu</code>之前会先去执行如<code>dkms</code>,<code>dpkg</code>,<code>cache-url</code>等所依赖的element.</p>\n</li>\n<li><p>element-provides: 描述该elements额外提供哪些element的功能, 也就说若执行该element,那么其额外提供的element就不会在执行.</p>\n<p>依然拿ubuntu来举例：</p>\n<p>  operating-system</p>\n<p>这个就说明,若选择了<code>ubuntu</code>,则不会执行名为<code>operating-system</code>的element了</p>\n</li>\n</ul>\n<p>其实到这里，基本就已经了解了一个element的作用了，只要看一下相关的一两个例子，就可以写出满足自己定制需求的element脚本.</p>\n<h2 id=\"配置diskimage-builder\"><a href=\"#配置diskimage-builder\" class=\"headerlink\" title=\"配置diskimage-builder\"></a>配置diskimage-builder</h2><pre><code># 下载diskimage-builder，默认已有一些常用的element\ngit clone https://github.com/openstack/diskimage-builder.git\n\n# 以下两个则是配置openstack需要涉及的一些element，可以自行参考和使用\ngit clone https://github.com/openstack/tripleo-image-elements\ngit clone https://github.com/openstack/heat-templates\n</code></pre><p>绿色无需安装,下载即可使用. 当然需要安装<code>qemu-utils</code>和物理内存大于4G.</p>\n<h2 id=\"运行环境变量\"><a href=\"#运行环境变量\" class=\"headerlink\" title=\"运行环境变量\"></a>运行环境变量</h2><p>以创建ubuntu为例</p>\n<h3 id=\"必选环境变量\"><a href=\"#必选环境变量\" class=\"headerlink\" title=\"必选环境变量\"></a>必选环境变量</h3><pre><code># 指定版本\nexport DIB_RELEASE=precise|trusty\n\n# 指定引用的elements路径\nexport ELEMENTS_PATH=elements_path1:element_path2\n</code></pre><h3 id=\"可选环境变量\"><a href=\"#可选环境变量\" class=\"headerlink\" title=\"可选环境变量\"></a>可选环境变量</h3><pre><code># 指定image的源,比如ubuntu走的是这个\n# 主要是用来优化下载系统镜像速度的\nexport DIB_CLOUD_IMAGES=https://cloud-images.ubuntu.com/\n\n# 制定apt-source的源, 相当于使用自定义好的文件去替换\n# 要使用到element: apt-sources\nexport DIB_APT_SOURCES=/opt/apt-source.list.${DIB_RELEASE}\n</code></pre><h2 id=\"运行参数\"><a href=\"#运行参数\" class=\"headerlink\" title=\"运行参数\"></a>运行参数</h2><pre><code># 指定image-cache的缓存路径\n# 默认是：~/.cache/image-create\n--image-cache\n\n# 设置不更新已存在的image-cache\n# 其实也就是先判断一下sha256md5是否匹配,不匹配的情况下这个参数才有作用\n# 默认是如有不同则进行uopdate\n--offline\n\n# 指定目标平台的系统版本\n-a amd64|i386\n\n# 输出镜像的名称\n-o filename\n</code></pre><h2 id=\"运行示例\"><a href=\"#运行示例\" class=\"headerlink\" title=\"运行示例\"></a>运行示例</h2><pre><code># 生成ubuntu-precise镜像\nexport ELEMENTS_PATH=elements\nexport DIB_RELEASE=precise\nexport DIB_APT_SOURCES=apt-source.list.${DIB_RELEASE}\ndiskimage-builder/bin/disk-image-create vm ubuntu apt-sources custom-script -a amd64 -o ubuntu-precise\n\n# 将镜像上传到glance中\nglance image-create --name=&quot;ubuntu-$DIB_RELEASE&quot; --disk-format=qcow2 --container-format=bare --is-public=true &lt; ubuntu-$&gt;\n</code></pre><h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ol>\n<li><a href=\"https://pypi.python.org/pypi/diskimage-builder\" target=\"_blank\" rel=\"external\">Using Diskimage Builder for Heat Deploying Applications</a></li>\n<li><a href=\"http://www.slideshare.net/hpcloud/diskimages-heaticehousesummit\" target=\"_blank\" rel=\"external\">diskimages-heaticehousesummit</a></li>\n</ol>\n","excerpt":"","more":"<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p><code>DiskImage-Builder</code>是通过chroot到一个创建的临时目录中(默认在/tmp/image.*中可以看到),同时绑定系统的/proc, /sys, 和/dev 目录来配置(硬件资源)环境的.当提供好的脚本执行完成后,将该tmp目录内容打入到镜像文件中即完成了所有的制作过程.</p>\n<p>OK,既然<code>DiskImage-Builder</code>提供了一个完整的执行环境,那么要定制一个满足自己需求的镜像,只需要按照其提供的格式完成几个<strong>element</strong>, 接着就biubiu地完成了一个自己的镜像了.</p>\n<h2 id=\"element\"><a href=\"#element\" class=\"headerlink\" title=\"element\"></a>element</h2><p>element是一堆符合特定名称的文件(主要为脚本)/文件夹的集合. 其主要包含以下的元素:</p>\n<ul>\n<li>用于执行脚本, 命名及存放的路径均有特殊含义(这些脚本中描述了在制作镜像的过程中需要执行哪些操作,比如安装好apache,创建用户等.)</li>\n<li>依赖描述</li>\n<li>描述文件, 不是强制的，但提供这个就相当于有一个良好的注释, 便于他人阅读和使用</li>\n</ul>\n<h3 id=\"element的执行脚本\"><a href=\"#element的执行脚本\" class=\"headerlink\" title=\"element的执行脚本\"></a>element的执行脚本</h3><p><code>DiskImage-Builder</code>默认提供了一些基础的element,可以在源码目录中diskimage-builder/elements中看到. 其中执行的脚本,是按照目录划分的,按照顺序执行.每一个目录操作都有几个属性:</p>\n<ul>\n<li>其执行的环境,是否在chroot中</li>\n<li>输入变量</li>\n<li>输出变量</li>\n</ul>\n<p>以下列出了其执行的目录, 执行按先后顺率来排列</p>\n<table style=\"width:96%;margin:2%;border:1px\"><br>  <tr><br>    <th><br>    操作<br>    </th><br>    <th><br>    执行目录<br>    </th><br>    <th><br>    接受变量<br>    </th><br>    <th><br>    输出变量<br>    </th><br>  </tr><br><br>  <tr><br>    <td><br>    root.d<br>    </td><br>    <td><br>    outside chroot<br>    </td><br>    <td><br>    $ARCH=i386|amd64|armhf<br>    $TARGET_ROOT={path}<br>    </td><br>    <td><br>    -<br>    </td><br>  </tr><br><br>  <tr><br>    <td><br>    extra-data.d<br>    </td><br>    <td><br>    outside chroot<br>    </td><br>    <td><br>    $TMP_HOOKS_PATH<br>    </td><br>    <td><br>    -<br>    </td><br>  </tr><br><br>  <tr><br>    <td><br>    pre-install.d<br>    </td><br>    <td><br>    in chroot<br>    </td><br>    <td><br>    -<br>    </td><br>    <td><br>    -<br>    </td><br>  </tr><br><br>  <tr><br>    <td><br>    install.d<br>    </td><br>    <td><br>    in chroot<br>    </td><br>    <td><br>    -<br>    </td><br>    <td><br>    -<br>    </td><br>  </tr><br><br>  <tr><br>    <td><br>    post-install.d<br>    </td><br>    <td><br>    in chroot<br>    </td><br>    <td><br>    -<br>    </td><br>    <td><br>    -<br>    </td><br>  </tr><br><br>  <tr><br>    <td><br>    block-device.d<br>    </td><br>    <td><br>    outside chroot<br>    </td><br>    <td><br>    $IMAGE_BLOCK_DEVICE={path}<br>    $TARGET_ROOT={path}<br>    </td><br>    <td><br>    $IMAGE_BLOCK_DEVICE={path}<br>    </td><br>  </tr><br><br>  <tr><br>    <td><br>    finalise.d<br>    </td><br>    <td><br>    in chroot<br>    </td><br>    <td><br>    -<br>    </td><br>    <td><br>    -<br>    </td><br>  </tr><br><br>  <tr><br>    <td><br>    cleanup.d<br>    </td><br>    <td><br>    outside chroot<br>    </td><br>    <td><br>    $ARCH=i386|amd64|armhf<br>    $TARGET_ROOT={path}<br>    </td><br>    <td><br>    -<br>    </td><br>  </tr><br></table>\n\n\n<h3 id=\"element之间的依赖\"><a href=\"#element之间的依赖\" class=\"headerlink\" title=\"element之间的依赖\"></a>element之间的依赖</h3><p>element的依赖主要由两个文件来描述</p>\n<ul>\n<li><p>element-deps: 描述该elements所依赖的element, 那么在执行该elment之前会先执行其依赖的element.</p>\n<p>如默认的element: ubuntu</p>\n<p>  cache-url<br>  cloud-init-datasources<br>  dib-run-parts<br>  dkms<br>  dpkg</p>\n<p>也就是说在执行element<code>ubuntu</code>之前会先去执行如<code>dkms</code>,<code>dpkg</code>,<code>cache-url</code>等所依赖的element.</p>\n</li>\n<li><p>element-provides: 描述该elements额外提供哪些element的功能, 也就说若执行该element,那么其额外提供的element就不会在执行.</p>\n<p>依然拿ubuntu来举例：</p>\n<p>  operating-system</p>\n<p>这个就说明,若选择了<code>ubuntu</code>,则不会执行名为<code>operating-system</code>的element了</p>\n</li>\n</ul>\n<p>其实到这里，基本就已经了解了一个element的作用了，只要看一下相关的一两个例子，就可以写出满足自己定制需求的element脚本.</p>\n<h2 id=\"配置diskimage-builder\"><a href=\"#配置diskimage-builder\" class=\"headerlink\" title=\"配置diskimage-builder\"></a>配置diskimage-builder</h2><pre><code># 下载diskimage-builder，默认已有一些常用的element\ngit clone https://github.com/openstack/diskimage-builder.git\n\n# 以下两个则是配置openstack需要涉及的一些element，可以自行参考和使用\ngit clone https://github.com/openstack/tripleo-image-elements\ngit clone https://github.com/openstack/heat-templates\n</code></pre><p>绿色无需安装,下载即可使用. 当然需要安装<code>qemu-utils</code>和物理内存大于4G.</p>\n<h2 id=\"运行环境变量\"><a href=\"#运行环境变量\" class=\"headerlink\" title=\"运行环境变量\"></a>运行环境变量</h2><p>以创建ubuntu为例</p>\n<h3 id=\"必选环境变量\"><a href=\"#必选环境变量\" class=\"headerlink\" title=\"必选环境变量\"></a>必选环境变量</h3><pre><code># 指定版本\nexport DIB_RELEASE=precise|trusty\n\n# 指定引用的elements路径\nexport ELEMENTS_PATH=elements_path1:element_path2\n</code></pre><h3 id=\"可选环境变量\"><a href=\"#可选环境变量\" class=\"headerlink\" title=\"可选环境变量\"></a>可选环境变量</h3><pre><code># 指定image的源,比如ubuntu走的是这个\n# 主要是用来优化下载系统镜像速度的\nexport DIB_CLOUD_IMAGES=https://cloud-images.ubuntu.com/\n\n# 制定apt-source的源, 相当于使用自定义好的文件去替换\n# 要使用到element: apt-sources\nexport DIB_APT_SOURCES=/opt/apt-source.list.${DIB_RELEASE}\n</code></pre><h2 id=\"运行参数\"><a href=\"#运行参数\" class=\"headerlink\" title=\"运行参数\"></a>运行参数</h2><pre><code># 指定image-cache的缓存路径\n# 默认是：~/.cache/image-create\n--image-cache\n\n# 设置不更新已存在的image-cache\n# 其实也就是先判断一下sha256md5是否匹配,不匹配的情况下这个参数才有作用\n# 默认是如有不同则进行uopdate\n--offline\n\n# 指定目标平台的系统版本\n-a amd64|i386\n\n# 输出镜像的名称\n-o filename\n</code></pre><h2 id=\"运行示例\"><a href=\"#运行示例\" class=\"headerlink\" title=\"运行示例\"></a>运行示例</h2><pre><code># 生成ubuntu-precise镜像\nexport ELEMENTS_PATH=elements\nexport DIB_RELEASE=precise\nexport DIB_APT_SOURCES=apt-source.list.${DIB_RELEASE}\ndiskimage-builder/bin/disk-image-create vm ubuntu apt-sources custom-script -a amd64 -o ubuntu-precise\n\n# 将镜像上传到glance中\nglance image-create --name=&quot;ubuntu-$DIB_RELEASE&quot; --disk-format=qcow2 --container-format=bare --is-public=true &lt; ubuntu-$&gt;\n</code></pre><h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ol>\n<li><a href=\"https://pypi.python.org/pypi/diskimage-builder\">Using Diskimage Builder for Heat Deploying Applications</a></li>\n<li><a href=\"http://www.slideshare.net/hpcloud/diskimages-heaticehousesummit\">diskimages-heaticehousesummit</a></li>\n</ol>\n"},{"title":"第一篇博客啦","date":"2013-11-17T16:00:00.000Z","_content":"\n也不记得是第多少次换博客了，只记得在买了域名之后，先后换过[GAE]和[SAE]，SAE个人博客备案是个体力活儿，所以一直忍受着二级域名\\([点我进入][lnmpy-sae]，仅有的几篇产物内容就不打算倒腾回来了\\)。\n\n好吧，[BeiYuu]同学很勤快，我呢就很懒了，本地环境也没搭建，直接fork了他的代码，git下来编辑了下，主要做了两个修改吧，一是将[Disqus]换成[多说]，另则将UI精简了一下。\n\n在此非常感谢作者那么有耐心的整理出一篇极其详尽的[github-pages]，很喜欢这种博客的风格。 另外作者有一个[OverAPI]的网站\\([Chrome插件版本][1]\\)，做得很有心意，有兴趣的可以尝试一下。\n\n我的博客是通过[StackEdit]\\(可以直接用[网站][2]，有Local Storage\\)来编写的，基于md语法，所以，不搭本地环境直接上去，也是基本可行的吧。\n\n\n[BeiYuu]: http://beiyuu.com\n[GAE]: https://appengine.google.com\n[lnmpy-sae]: http://lnmpy.sinaapp.com\n[github-pages]: http://beiyuu.com/github-pages/\n[SAE]: http://sae.sina.com.cn/\n[Disqus]: http://disqus.com\n[OverAPi]: http://overapi.com\n[StackEdit]: https://chrome.google.com/webstore/detail/stackedit/iiooodelglhkcpgbajoejffhijaclcdg\n[多说]: http://dev.duoshuo.com/docs\n[1]: https://chrome.google.com/webstore/detail/oedodeocfdeegliepeeoieemhdgoijod?hl=zh-CN \"All Cheat Sheets\"\n[2]: https://stackedit.io/\n","source":"_posts/blog/first-blog.md","raw":"---\ntitle:  第一篇博客啦\ncategories: blog\ndate: 2013-11-18\n---\n\n也不记得是第多少次换博客了，只记得在买了域名之后，先后换过[GAE]和[SAE]，SAE个人博客备案是个体力活儿，所以一直忍受着二级域名\\([点我进入][lnmpy-sae]，仅有的几篇产物内容就不打算倒腾回来了\\)。\n\n好吧，[BeiYuu]同学很勤快，我呢就很懒了，本地环境也没搭建，直接fork了他的代码，git下来编辑了下，主要做了两个修改吧，一是将[Disqus]换成[多说]，另则将UI精简了一下。\n\n在此非常感谢作者那么有耐心的整理出一篇极其详尽的[github-pages]，很喜欢这种博客的风格。 另外作者有一个[OverAPI]的网站\\([Chrome插件版本][1]\\)，做得很有心意，有兴趣的可以尝试一下。\n\n我的博客是通过[StackEdit]\\(可以直接用[网站][2]，有Local Storage\\)来编写的，基于md语法，所以，不搭本地环境直接上去，也是基本可行的吧。\n\n\n[BeiYuu]: http://beiyuu.com\n[GAE]: https://appengine.google.com\n[lnmpy-sae]: http://lnmpy.sinaapp.com\n[github-pages]: http://beiyuu.com/github-pages/\n[SAE]: http://sae.sina.com.cn/\n[Disqus]: http://disqus.com\n[OverAPi]: http://overapi.com\n[StackEdit]: https://chrome.google.com/webstore/detail/stackedit/iiooodelglhkcpgbajoejffhijaclcdg\n[多说]: http://dev.duoshuo.com/docs\n[1]: https://chrome.google.com/webstore/detail/oedodeocfdeegliepeeoieemhdgoijod?hl=zh-CN \"All Cheat Sheets\"\n[2]: https://stackedit.io/\n","slug":"blog/first-blog","published":1,"updated":"2016-07-17T11:34:02.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciuyae213000nyt7lwk69jwz4","content":"<p>也不记得是第多少次换博客了，只记得在买了域名之后，先后换过<a href=\"https://appengine.google.com\" target=\"_blank\" rel=\"external\">GAE</a>和<a href=\"http://sae.sina.com.cn/\" target=\"_blank\" rel=\"external\">SAE</a>，SAE个人博客备案是个体力活儿，所以一直忍受着二级域名(<a href=\"http://lnmpy.sinaapp.com\" target=\"_blank\" rel=\"external\">点我进入</a>，仅有的几篇产物内容就不打算倒腾回来了)。</p>\n<p>好吧，<a href=\"http://beiyuu.com\" target=\"_blank\" rel=\"external\">BeiYuu</a>同学很勤快，我呢就很懒了，本地环境也没搭建，直接fork了他的代码，git下来编辑了下，主要做了两个修改吧，一是将<a href=\"http://disqus.com\" target=\"_blank\" rel=\"external\">Disqus</a>换成<a href=\"http://dev.duoshuo.com/docs\" target=\"_blank\" rel=\"external\">多说</a>，另则将UI精简了一下。</p>\n<p>在此非常感谢作者那么有耐心的整理出一篇极其详尽的<a href=\"http://beiyuu.com/github-pages/\" target=\"_blank\" rel=\"external\">github-pages</a>，很喜欢这种博客的风格。 另外作者有一个<a href=\"http://overapi.com\" target=\"_blank\" rel=\"external\">OverAPI</a>的网站(<a href=\"https://chrome.google.com/webstore/detail/oedodeocfdeegliepeeoieemhdgoijod?hl=zh-CN\" title=\"All Cheat Sheets\" target=\"_blank\" rel=\"external\">Chrome插件版本</a>)，做得很有心意，有兴趣的可以尝试一下。</p>\n<p>我的博客是通过<a href=\"https://chrome.google.com/webstore/detail/stackedit/iiooodelglhkcpgbajoejffhijaclcdg\" target=\"_blank\" rel=\"external\">StackEdit</a>(可以直接用<a href=\"https://stackedit.io/\" target=\"_blank\" rel=\"external\">网站</a>，有Local Storage)来编写的，基于md语法，所以，不搭本地环境直接上去，也是基本可行的吧。</p>\n","excerpt":"","more":"<p>也不记得是第多少次换博客了，只记得在买了域名之后，先后换过<a href=\"https://appengine.google.com\">GAE</a>和<a href=\"http://sae.sina.com.cn/\">SAE</a>，SAE个人博客备案是个体力活儿，所以一直忍受着二级域名(<a href=\"http://lnmpy.sinaapp.com\">点我进入</a>，仅有的几篇产物内容就不打算倒腾回来了)。</p>\n<p>好吧，<a href=\"http://beiyuu.com\">BeiYuu</a>同学很勤快，我呢就很懒了，本地环境也没搭建，直接fork了他的代码，git下来编辑了下，主要做了两个修改吧，一是将<a href=\"http://disqus.com\">Disqus</a>换成<a href=\"http://dev.duoshuo.com/docs\">多说</a>，另则将UI精简了一下。</p>\n<p>在此非常感谢作者那么有耐心的整理出一篇极其详尽的<a href=\"http://beiyuu.com/github-pages/\">github-pages</a>，很喜欢这种博客的风格。 另外作者有一个<a href=\"http://overapi.com\">OverAPI</a>的网站(<a href=\"https://chrome.google.com/webstore/detail/oedodeocfdeegliepeeoieemhdgoijod?hl=zh-CN\" title=\"All Cheat Sheets\">Chrome插件版本</a>)，做得很有心意，有兴趣的可以尝试一下。</p>\n<p>我的博客是通过<a href=\"https://chrome.google.com/webstore/detail/stackedit/iiooodelglhkcpgbajoejffhijaclcdg\">StackEdit</a>(可以直接用<a href=\"https://stackedit.io/\">网站</a>，有Local Storage)来编写的，基于md语法，所以，不搭本地环境直接上去，也是基本可行的吧。</p>\n"},{"title":"JS中some(),every(),forEach(),map(),filter()区别","date":"2013-11-19T16:00:00.000Z","_content":"\nJS在1.6中为Array新增了几个方法`map()`，`filter()`，`some()`，`every()`，`forEach()`，也就是一共有这么多方法了。\n\n刚开始接触这些倒也记得不是很清楚，在此纪录一下以加深影响。我主要从两个角度来理解和记忆吧，一个是API的使用，一个是内部实现。\n\n####函数简述\n\n`map()`:返回一个新的Array，每个元素为调用func的结果\n\n`filter()`:返回一个符合func条件的元素数组\n\n`some()`:返回一个boolean，判断是否有元素是否符合func条件\n\n`every()`:返回一个boolean，判断每个元素是否符合func条件\n\n`forEach()`:没有返回值，只是针对每个元素调用func\n\n####API的区别\n\n    function my_func(item) {\n        if (item == 1) {\n            console.log('t');\n            return true;\n        }\n        console.log('f');\n        return false;\n    }\n\n    // init an array\n    l = [0,1,2,3,4]\n\n    // print: f,t,f,f,f\n    // return:[false, true, false, false, false]\n    l.map(my_func)\n\n\n    // print: f,t,f,f,f\n    // return: 1\n    l.filter(my_func)\n\n    // print: f,t\n    // return: true\n    l.some(my_func)\n\n    // print: f\n    // return: false\n    l.every(my_func)\n\n    // print: f,t,f,f,f\n    //return: undefined\n    l.forEach(my_func)\n\n\n####内部实现\n\n    // From：http://developer.mozilla.org\n\n    Array.prototype.map = function(fun /*, thisp*/) {\n        var len = this.length;\n        if (typeof fun != \"function\")\n            throw new TypeError();\n\n        var res = new Array(len);\n        var thisp = arguments[1];\n        for (var i = 0; i < len; i++)\n        {\n            if (i in this)\n            res[i] = fun.call(thisp, this[i], i, this);\n        }\n\n        return res;\n    };\n\n    Array.prototype.filter = function(fun /*, thisp*/) {\n        var len = this.length;\n        if (typeof fun != \"function\")\n            throw new TypeError();\n\n        var res = new Array();\n        var thisp = arguments[1];\n        for (var i = 0; i < len; i++)\n        {\n            if (i in this)\n            {\n            var val = this[i]; // in case fun mutates this\n            if (fun.call(thisp, val, i, this))\n                res.push(val);\n            }\n        }\n\n        return res;\n    };\n\n    Array.prototype.some = function(fun /*, thisp*/) {\n        var len = this.length;\n        if (typeof fun != \"function\")\n            throw new TypeError();\n\n        var thisp = arguments[1];\n        for (var i = 0; i < len; i++)\n        {\n            if (i in this && fun.call(thisp, this[i], i, this))\n            return true;\n        }\n\n        return false;\n    };\n\n    Array.prototype.every = function(fun /*, thisp*/) {\n        var len = this.length;\n        if (typeof fun != \"function\")\n            throw new TypeError();\n\n        var thisp = arguments[1];\n        for (var i = 0; i < len; i++)\n        {\n            if (i in this && !fun.call(thisp, this[i], i, this))\n            return false;\n        }\n\n        return true;\n    };\n\n    Array.prototype.forEach = function(fun /*, thisp*/) {\n        var len = this.length;\n        if (typeof fun != \"function\")\n            throw new TypeError();\n\n        var thisp = arguments[1];\n        for (var i = 0; i < len; i++)\n        {\n            if (i in this)\n            fun.call(thisp, this[i], i, this);\n        }\n    };\n\n好吧，已经很晚了，代码基本上能够很好的描述清楚各个函数的区别吧。\n","source":"_posts/blog/js-each-difference.md","raw":"---\ntitle:  JS中some(),every(),forEach(),map(),filter()区别\ncategories: blog\ndate: 2013-11-20\n---\n\nJS在1.6中为Array新增了几个方法`map()`，`filter()`，`some()`，`every()`，`forEach()`，也就是一共有这么多方法了。\n\n刚开始接触这些倒也记得不是很清楚，在此纪录一下以加深影响。我主要从两个角度来理解和记忆吧，一个是API的使用，一个是内部实现。\n\n####函数简述\n\n`map()`:返回一个新的Array，每个元素为调用func的结果\n\n`filter()`:返回一个符合func条件的元素数组\n\n`some()`:返回一个boolean，判断是否有元素是否符合func条件\n\n`every()`:返回一个boolean，判断每个元素是否符合func条件\n\n`forEach()`:没有返回值，只是针对每个元素调用func\n\n####API的区别\n\n    function my_func(item) {\n        if (item == 1) {\n            console.log('t');\n            return true;\n        }\n        console.log('f');\n        return false;\n    }\n\n    // init an array\n    l = [0,1,2,3,4]\n\n    // print: f,t,f,f,f\n    // return:[false, true, false, false, false]\n    l.map(my_func)\n\n\n    // print: f,t,f,f,f\n    // return: 1\n    l.filter(my_func)\n\n    // print: f,t\n    // return: true\n    l.some(my_func)\n\n    // print: f\n    // return: false\n    l.every(my_func)\n\n    // print: f,t,f,f,f\n    //return: undefined\n    l.forEach(my_func)\n\n\n####内部实现\n\n    // From：http://developer.mozilla.org\n\n    Array.prototype.map = function(fun /*, thisp*/) {\n        var len = this.length;\n        if (typeof fun != \"function\")\n            throw new TypeError();\n\n        var res = new Array(len);\n        var thisp = arguments[1];\n        for (var i = 0; i < len; i++)\n        {\n            if (i in this)\n            res[i] = fun.call(thisp, this[i], i, this);\n        }\n\n        return res;\n    };\n\n    Array.prototype.filter = function(fun /*, thisp*/) {\n        var len = this.length;\n        if (typeof fun != \"function\")\n            throw new TypeError();\n\n        var res = new Array();\n        var thisp = arguments[1];\n        for (var i = 0; i < len; i++)\n        {\n            if (i in this)\n            {\n            var val = this[i]; // in case fun mutates this\n            if (fun.call(thisp, val, i, this))\n                res.push(val);\n            }\n        }\n\n        return res;\n    };\n\n    Array.prototype.some = function(fun /*, thisp*/) {\n        var len = this.length;\n        if (typeof fun != \"function\")\n            throw new TypeError();\n\n        var thisp = arguments[1];\n        for (var i = 0; i < len; i++)\n        {\n            if (i in this && fun.call(thisp, this[i], i, this))\n            return true;\n        }\n\n        return false;\n    };\n\n    Array.prototype.every = function(fun /*, thisp*/) {\n        var len = this.length;\n        if (typeof fun != \"function\")\n            throw new TypeError();\n\n        var thisp = arguments[1];\n        for (var i = 0; i < len; i++)\n        {\n            if (i in this && !fun.call(thisp, this[i], i, this))\n            return false;\n        }\n\n        return true;\n    };\n\n    Array.prototype.forEach = function(fun /*, thisp*/) {\n        var len = this.length;\n        if (typeof fun != \"function\")\n            throw new TypeError();\n\n        var thisp = arguments[1];\n        for (var i = 0; i < len; i++)\n        {\n            if (i in this)\n            fun.call(thisp, this[i], i, this);\n        }\n    };\n\n好吧，已经很晚了，代码基本上能够很好的描述清楚各个函数的区别吧。\n","slug":"blog/js-each-difference","published":1,"updated":"2016-07-17T11:34:11.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciuyae214000pyt7l5ef7xaqu","content":"<p>JS在1.6中为Array新增了几个方法<code>map()</code>，<code>filter()</code>，<code>some()</code>，<code>every()</code>，<code>forEach()</code>，也就是一共有这么多方法了。</p>\n<p>刚开始接触这些倒也记得不是很清楚，在此纪录一下以加深影响。我主要从两个角度来理解和记忆吧，一个是API的使用，一个是内部实现。</p>\n<p>####函数简述</p>\n<p><code>map()</code>:返回一个新的Array，每个元素为调用func的结果</p>\n<p><code>filter()</code>:返回一个符合func条件的元素数组</p>\n<p><code>some()</code>:返回一个boolean，判断是否有元素是否符合func条件</p>\n<p><code>every()</code>:返回一个boolean，判断每个元素是否符合func条件</p>\n<p><code>forEach()</code>:没有返回值，只是针对每个元素调用func</p>\n<p>####API的区别</p>\n<pre><code>function my_func(item) {\n    if (item == 1) {\n        console.log(&apos;t&apos;);\n        return true;\n    }\n    console.log(&apos;f&apos;);\n    return false;\n}\n\n// init an array\nl = [0,1,2,3,4]\n\n// print: f,t,f,f,f\n// return:[false, true, false, false, false]\nl.map(my_func)\n\n\n// print: f,t,f,f,f\n// return: 1\nl.filter(my_func)\n\n// print: f,t\n// return: true\nl.some(my_func)\n\n// print: f\n// return: false\nl.every(my_func)\n\n// print: f,t,f,f,f\n//return: undefined\nl.forEach(my_func)\n</code></pre><p>####内部实现</p>\n<pre><code>// From：http://developer.mozilla.org\n\nArray.prototype.map = function(fun /*, thisp*/) {\n    var len = this.length;\n    if (typeof fun != &quot;function&quot;)\n        throw new TypeError();\n\n    var res = new Array(len);\n    var thisp = arguments[1];\n    for (var i = 0; i &lt; len; i++)\n    {\n        if (i in this)\n        res[i] = fun.call(thisp, this[i], i, this);\n    }\n\n    return res;\n};\n\nArray.prototype.filter = function(fun /*, thisp*/) {\n    var len = this.length;\n    if (typeof fun != &quot;function&quot;)\n        throw new TypeError();\n\n    var res = new Array();\n    var thisp = arguments[1];\n    for (var i = 0; i &lt; len; i++)\n    {\n        if (i in this)\n        {\n        var val = this[i]; // in case fun mutates this\n        if (fun.call(thisp, val, i, this))\n            res.push(val);\n        }\n    }\n\n    return res;\n};\n\nArray.prototype.some = function(fun /*, thisp*/) {\n    var len = this.length;\n    if (typeof fun != &quot;function&quot;)\n        throw new TypeError();\n\n    var thisp = arguments[1];\n    for (var i = 0; i &lt; len; i++)\n    {\n        if (i in this &amp;&amp; fun.call(thisp, this[i], i, this))\n        return true;\n    }\n\n    return false;\n};\n\nArray.prototype.every = function(fun /*, thisp*/) {\n    var len = this.length;\n    if (typeof fun != &quot;function&quot;)\n        throw new TypeError();\n\n    var thisp = arguments[1];\n    for (var i = 0; i &lt; len; i++)\n    {\n        if (i in this &amp;&amp; !fun.call(thisp, this[i], i, this))\n        return false;\n    }\n\n    return true;\n};\n\nArray.prototype.forEach = function(fun /*, thisp*/) {\n    var len = this.length;\n    if (typeof fun != &quot;function&quot;)\n        throw new TypeError();\n\n    var thisp = arguments[1];\n    for (var i = 0; i &lt; len; i++)\n    {\n        if (i in this)\n        fun.call(thisp, this[i], i, this);\n    }\n};\n</code></pre><p>好吧，已经很晚了，代码基本上能够很好的描述清楚各个函数的区别吧。</p>\n","excerpt":"","more":"<p>JS在1.6中为Array新增了几个方法<code>map()</code>，<code>filter()</code>，<code>some()</code>，<code>every()</code>，<code>forEach()</code>，也就是一共有这么多方法了。</p>\n<p>刚开始接触这些倒也记得不是很清楚，在此纪录一下以加深影响。我主要从两个角度来理解和记忆吧，一个是API的使用，一个是内部实现。</p>\n<p>####函数简述</p>\n<p><code>map()</code>:返回一个新的Array，每个元素为调用func的结果</p>\n<p><code>filter()</code>:返回一个符合func条件的元素数组</p>\n<p><code>some()</code>:返回一个boolean，判断是否有元素是否符合func条件</p>\n<p><code>every()</code>:返回一个boolean，判断每个元素是否符合func条件</p>\n<p><code>forEach()</code>:没有返回值，只是针对每个元素调用func</p>\n<p>####API的区别</p>\n<pre><code>function my_func(item) {\n    if (item == 1) {\n        console.log(&apos;t&apos;);\n        return true;\n    }\n    console.log(&apos;f&apos;);\n    return false;\n}\n\n// init an array\nl = [0,1,2,3,4]\n\n// print: f,t,f,f,f\n// return:[false, true, false, false, false]\nl.map(my_func)\n\n\n// print: f,t,f,f,f\n// return: 1\nl.filter(my_func)\n\n// print: f,t\n// return: true\nl.some(my_func)\n\n// print: f\n// return: false\nl.every(my_func)\n\n// print: f,t,f,f,f\n//return: undefined\nl.forEach(my_func)\n</code></pre><p>####内部实现</p>\n<pre><code>// From：http://developer.mozilla.org\n\nArray.prototype.map = function(fun /*, thisp*/) {\n    var len = this.length;\n    if (typeof fun != &quot;function&quot;)\n        throw new TypeError();\n\n    var res = new Array(len);\n    var thisp = arguments[1];\n    for (var i = 0; i &lt; len; i++)\n    {\n        if (i in this)\n        res[i] = fun.call(thisp, this[i], i, this);\n    }\n\n    return res;\n};\n\nArray.prototype.filter = function(fun /*, thisp*/) {\n    var len = this.length;\n    if (typeof fun != &quot;function&quot;)\n        throw new TypeError();\n\n    var res = new Array();\n    var thisp = arguments[1];\n    for (var i = 0; i &lt; len; i++)\n    {\n        if (i in this)\n        {\n        var val = this[i]; // in case fun mutates this\n        if (fun.call(thisp, val, i, this))\n            res.push(val);\n        }\n    }\n\n    return res;\n};\n\nArray.prototype.some = function(fun /*, thisp*/) {\n    var len = this.length;\n    if (typeof fun != &quot;function&quot;)\n        throw new TypeError();\n\n    var thisp = arguments[1];\n    for (var i = 0; i &lt; len; i++)\n    {\n        if (i in this &amp;&amp; fun.call(thisp, this[i], i, this))\n        return true;\n    }\n\n    return false;\n};\n\nArray.prototype.every = function(fun /*, thisp*/) {\n    var len = this.length;\n    if (typeof fun != &quot;function&quot;)\n        throw new TypeError();\n\n    var thisp = arguments[1];\n    for (var i = 0; i &lt; len; i++)\n    {\n        if (i in this &amp;&amp; !fun.call(thisp, this[i], i, this))\n        return false;\n    }\n\n    return true;\n};\n\nArray.prototype.forEach = function(fun /*, thisp*/) {\n    var len = this.length;\n    if (typeof fun != &quot;function&quot;)\n        throw new TypeError();\n\n    var thisp = arguments[1];\n    for (var i = 0; i &lt; len; i++)\n    {\n        if (i in this)\n        fun.call(thisp, this[i], i, this);\n    }\n};\n</code></pre><p>好吧，已经很晚了，代码基本上能够很好的描述清楚各个函数的区别吧。</p>\n"},{"title":"关于Neutron的几篇不错的博客","date":"2014-02-27T16:00:00.000Z","_content":"\n懒得多写了， 就先后引用一下四篇文章吧，可以很清楚的描述一下，Neutron的各个概念。\n\n1.[http://www.ustack.com/blog/neutron_intro/](http://www.ustack.com/blog/neutron_intro/)\n\n从Dashboard的的角度来讲解各个网络节点的连接关系，也有比如“网关臂”等的概念\n\n2.[http://docs.openstack.org/havana/config-reference/content/section_networking-scenarios.html](http://docs.openstack.org/havana/config-reference/content/section_networking-scenarios.html)\n\n从三个业务场景的角度，讲解了为什么要这样安装配置，比如配置这个网桥的目的是什么等\n\n3.[http://openstack.redhat.com/Networking_in_too_much_detail](http://openstack.redhat.com/Networking_in_too_much_detail)\n\n以一个demo的角度来讲解网络流图以及简单介绍了如router iptables和ovs的flow table的区别。\n\n4.[http://developer.rackspace.com/blog/software-defined-networks-in-the-havana-release-of-openstack-part-2.html](http://developer.rackspace.com/blog/software-defined-networks-in-the-havana-release-of-openstack-part-2.html)\n\n简单讲解了OVS的Flow Table\n\n就这样，自己多动动手再加上这些应该可以很轻松的构建一个Neutron的网络流图的概念。后续如碰到好的文章再加进来\n","source":"_posts/blog/neutron-concepts.md","raw":"---\ntitle:  关于Neutron的几篇不错的博客\ncategories: blog\ndate: 2014-02-28\n---\n\n懒得多写了， 就先后引用一下四篇文章吧，可以很清楚的描述一下，Neutron的各个概念。\n\n1.[http://www.ustack.com/blog/neutron_intro/](http://www.ustack.com/blog/neutron_intro/)\n\n从Dashboard的的角度来讲解各个网络节点的连接关系，也有比如“网关臂”等的概念\n\n2.[http://docs.openstack.org/havana/config-reference/content/section_networking-scenarios.html](http://docs.openstack.org/havana/config-reference/content/section_networking-scenarios.html)\n\n从三个业务场景的角度，讲解了为什么要这样安装配置，比如配置这个网桥的目的是什么等\n\n3.[http://openstack.redhat.com/Networking_in_too_much_detail](http://openstack.redhat.com/Networking_in_too_much_detail)\n\n以一个demo的角度来讲解网络流图以及简单介绍了如router iptables和ovs的flow table的区别。\n\n4.[http://developer.rackspace.com/blog/software-defined-networks-in-the-havana-release-of-openstack-part-2.html](http://developer.rackspace.com/blog/software-defined-networks-in-the-havana-release-of-openstack-part-2.html)\n\n简单讲解了OVS的Flow Table\n\n就这样，自己多动动手再加上这些应该可以很轻松的构建一个Neutron的网络流图的概念。后续如碰到好的文章再加进来\n","slug":"blog/neutron-concepts","published":1,"updated":"2016-07-17T11:34:14.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciuyae215000syt7lleoo7pif","content":"<p>懒得多写了， 就先后引用一下四篇文章吧，可以很清楚的描述一下，Neutron的各个概念。</p>\n<p>1.<a href=\"http://www.ustack.com/blog/neutron_intro/\" target=\"_blank\" rel=\"external\">http://www.ustack.com/blog/neutron_intro/</a></p>\n<p>从Dashboard的的角度来讲解各个网络节点的连接关系，也有比如“网关臂”等的概念</p>\n<p>2.<a href=\"http://docs.openstack.org/havana/config-reference/content/section_networking-scenarios.html\" target=\"_blank\" rel=\"external\">http://docs.openstack.org/havana/config-reference/content/section_networking-scenarios.html</a></p>\n<p>从三个业务场景的角度，讲解了为什么要这样安装配置，比如配置这个网桥的目的是什么等</p>\n<p>3.<a href=\"http://openstack.redhat.com/Networking_in_too_much_detail\" target=\"_blank\" rel=\"external\">http://openstack.redhat.com/Networking_in_too_much_detail</a></p>\n<p>以一个demo的角度来讲解网络流图以及简单介绍了如router iptables和ovs的flow table的区别。</p>\n<p>4.<a href=\"http://developer.rackspace.com/blog/software-defined-networks-in-the-havana-release-of-openstack-part-2.html\" target=\"_blank\" rel=\"external\">http://developer.rackspace.com/blog/software-defined-networks-in-the-havana-release-of-openstack-part-2.html</a></p>\n<p>简单讲解了OVS的Flow Table</p>\n<p>就这样，自己多动动手再加上这些应该可以很轻松的构建一个Neutron的网络流图的概念。后续如碰到好的文章再加进来</p>\n","excerpt":"","more":"<p>懒得多写了， 就先后引用一下四篇文章吧，可以很清楚的描述一下，Neutron的各个概念。</p>\n<p>1.<a href=\"http://www.ustack.com/blog/neutron_intro/\">http://www.ustack.com/blog/neutron_intro/</a></p>\n<p>从Dashboard的的角度来讲解各个网络节点的连接关系，也有比如“网关臂”等的概念</p>\n<p>2.<a href=\"http://docs.openstack.org/havana/config-reference/content/section_networking-scenarios.html\">http://docs.openstack.org/havana/config-reference/content/section_networking-scenarios.html</a></p>\n<p>从三个业务场景的角度，讲解了为什么要这样安装配置，比如配置这个网桥的目的是什么等</p>\n<p>3.<a href=\"http://openstack.redhat.com/Networking_in_too_much_detail\">http://openstack.redhat.com/Networking_in_too_much_detail</a></p>\n<p>以一个demo的角度来讲解网络流图以及简单介绍了如router iptables和ovs的flow table的区别。</p>\n<p>4.<a href=\"http://developer.rackspace.com/blog/software-defined-networks-in-the-havana-release-of-openstack-part-2.html\">http://developer.rackspace.com/blog/software-defined-networks-in-the-havana-release-of-openstack-part-2.html</a></p>\n<p>简单讲解了OVS的Flow Table</p>\n<p>就这样，自己多动动手再加上这些应该可以很轻松的构建一个Neutron的网络流图的概念。后续如碰到好的文章再加进来</p>\n"},{"title":"Neutron-Server启动流程分析","date":"2014-03-20T16:00:00.000Z","_content":"\n## Neutron-Server启动流程分析\n\n正常的来看，应该是先看nova源码的。一方面网上资料也比较丰富，一方面也是更具有代表性。所以我也就不从头再来，浪费太多的精力去描述像router，deploy等库的使用了\n比如[臭蛋](http://www.choudan.net/)的两篇博客就写得挺详细的，结合代码看一下，倒也可以很快速的了解\n\n[Nova Service启动](http://www.choudan.net/2013/08/09/Nova-Service%E5%90%AF%E5%8A%A8.html)\n\n[Openstack Paste Deploy介绍](http://www.choudan.net/2013/07/28/OpenStack-paste-deploy%E4%BB%8B%E7%BB%8D.html)\n\n\n### deploy加载配置定位到具体的类\n在`/etc/neutron/api-paste.ini`，有这么一行，直接指明了哪个类作为router启动\n\npaste.app_factory = neutron.api.v2.router:APIRouter.factory\n\n\n### 实例化neutron/api/v2/router.py中的APIRouter\n\n    class APIRouter(wsgi.Router):\n        # 一个工厂类方法\n        @classmethod\n        def factory(cls, global_config, **local_config):\n            return cls(**local_config)\n\n        # 真正调用的实例化方法\n        def __init__(self, **local_config):\n            ...\n            #获取NeutornManage的core_plugin，这个定义在/etc/neutron/neutron.conf,比如我的是\n            #core_plugin = neutron.plugins.openvswitch.ovs_neutron_plugin.OVSNeutronPluginV2\n            plugin = manager.NeutronManager.get_plugin()\n\n            #扫描特定路径下的extensions\n            ext_mgr = extensions.PluginAwareExtensionManager.get_instance()\n            ...\n\n            #定义的局部方法\n            def _map_resource(collection, resource, params, parent=None):\n                ...\n                controller = base.create_resource(\n                    collection, resource, plugin, params, allow_bulk=allow_bulk,\n                    parent=parent, allow_pagination=allow_pagination,\n                    allow_sorting=allow_sorting)\n                ...\n                # 将这些resource加进router中\n                return mapper.collection(collection, resource, **mapper_kwargs)\n\n\n            # 遍历 {'network': 'networks', 'subnet': 'subnets','port': 'ports'}\n            # 添加controller\n            for resource in RESOURCES:\n                _map_resource(RESOURCES[resource], resource,\n                            attributes.RESOURCE_ATTRIBUTE_MAP.get(\n                                RESOURCES[resource], dict()))\n\n            for resource in SUB_RESOURCES:\n                ...\n                #其实操作和上面一个差不多，\n\n由这个可以看出，添加的controller类型主要分为三类：(其实只要你在neutron目录下grep一下，看哪里调用了`create_resource`方法即可)\n\n1. OVSNeutronPluginV2\n2. extensions/*.py\n3. plugins/*.py\n\n针对前两途径加载resource的类，下面慢慢进行描述。至于第三种，则是在各个不同的plugin内部额外实现的，不是必须的。\n\n顺便简单的提一下，在`neutron/api/extensions.py`下的`get_instance`方法，这里其实也是和nova一样，是遍历目录下的py文件，来增加extension的\n\n    ...\n    @classmethod\n    def get_instance(cls):\n        if cls._instance is None:\n            cls._instance = cls(get_extensions_path(),\n                                NeutronManager.get_service_plugins())\n    ...\n\n\n### Resource：OVSNeutronPluginV2的实现\n看了代码的你肯定知道，`OVSNeutronPluginV2`这个类，作为`core_plugin`继承了好多的的类\n\n    class OVSNeutronPluginV2(db_base_plugin_v2.NeutronDbPluginV2,\n                             external_net_db.External_net_db_mixin,\n                             extraroute_db.ExtraRoute_db_mixin,\n                             l3_gwmode_db.L3_NAT_db_mixin,\n                             sg_db_rpc.SecurityGroupServerRpcMixin,\n                             l3_agentschedulers_db.L3AgentSchedulerDbMixin,\n                             agentschedulers_db.DhcpAgentSchedulerDbMixin,\n                             portbindings_db.PortBindingMixin,\n                             extradhcpopt_db.ExtraDhcpOptMixin,\n                             addr_pair_db.AllowedAddressPairsMixin):\n\n`OVSNeutronPluginV2`基本上没有什么自己的method，全靠它的\"爹们\"了。\n\n随便抓两个来看下，比如`NeutronDbPluginV2`，他的method有`get_port`,`create_network`之类的，还有`L3_NAT_db_mixin`的`create_router`等。反正与db的操作，`OVSNeutronPluginV2`是不会管的，都在它的父类那边处理。\n\n再看看`OVSNeutronPluginV2`继承的这些父类们:\n\n    #NeutronDbPluginV2继承自NeutronPluginBaseV2\n    class NeutronDbPluginV2(neutron_plugin_base_v2.NeutronPluginBaseV2,\n                           CommonDbMixin):\n\n\n    class NeutronPluginBaseV2(...) :\n       @abstractmethod\n       def create_subnet(self, context, subnet):\n       @abstractmethod\n       def update_subnet(self, context, id, subnet):\n       @abstractmethod\n       def get_subnet(self, context, id, fields=None):\n       @abstractmethod\n       def get_subnets(self, context, filters=None, fields=None,\n\n\n其类图如下:(仅展示部分)\n\n<img src=\"/images/blog/neutron_ovs_plugin_class.png\" alt=\"Neutron的OVS-Plugin类图, 仅展示部分\">\n\n基本上可以说有一个接口类(如图中的`NeutronPluginBaseV2`)，定义了抽象方法，然后一个具体的db类来实现(如`NeutronDbPluginV2`，这里是采用`SQLAlchemy`来完成db模型的)\n\n\n\n\n### Resource：Extensions目录下resource的实现\n在`/etc/neutron/api-paste.ini`还有这么一项配置\n\n    [filter:extensions]\n    paste.filter_factory = neutron.api.extensions:plugin_aware_extension_middleware_factory\n\n\n在`plugin_aware_extension_middleware_factory`会调用到`ExtensionMiddleware.__init__`方法，其代码如下：\n\n    class ExtensionMiddleware(wsgi.Middleware):\n\n        def __init__(self, application,\n                     ext_mgr=None):\n            self.ext_mgr = ...\n            mapper = routes.Mapper()\n\n            # ext_mgr.get_resources()其实在内部会调用每个extensions目录下的extension类的get_resource方法\n            for resource in self.ext_mgr.get_resources():\n                ...\n                # 针对每个extension\n                mapper.resource(resource.collection, resource.collection,\n                                controller=resource.controller,\n                                member=resource.member_actions,\n                                parent_resource=resource.parent,\n                                path_prefix=path_prefix)\n                ...\n\n\n\n比如在extensions下的`securitygroup`.py中的`get_resources`方法，看这个代码就知道其中可以处理`security_group`和`security_group_rule`两类请求了。\n\n    class Securitygroup(extensions.ExtensionDescriptor):\n        def get_resources(cls):\n            ...\n            exts = []\n            plugin = manager.NeutronManager.get_plugin()\n            for resource_name in ['security_group', 'security_group_rule']:\n                ...\n                controller = base.create_resource(collection_name,\n                                                  resource_name,\n                                                  plugin, params, allow_bulk=True,\n                                                  allow_pagination=True,\n                                                  allow_sorting=True)\n                ex = extensions.ResourceExtension(collection_name,\n                                                  controller,\n                                                  attr_map=params)\n                exts.append(ex)\n            return exts\n\n\n\n----------------\n如此，`Neutron-Server`就已经基本上启动了，无外乎就是加载配置，router各种resource，然后就等待请求了。其中router哪些resource完全是由配置文件来决定的。\n当然，在启动的过程中也会初始化db，这也就是为何在安装`neutron`的时候无需像`nova`，`glance`等要执行`db sync`的原因了。\n\n\n\n\n最后说一下,上面将各种操作都给map到位了,但是调用的时候呢？\nOk, 其实对资源的处理最终都会交由neutron/api/v2/base.py中定义的Controller类来处理,比如`create-network`请求,在create方法的末端，你会看到:\n\n    class Controller():\n    def create(...):\n        ...\n        obj_creator = getattr(self._plugin, action)\n        if self._collection in body:\n            # Emulate atomic bulk behavior\n            objs = self._emulate_bulk_create(obj_creator, request,\n                                                body, parent_id)\n            return notify({self._collection: objs})\n        else:\n            kwargs.update({self._resource: body})\n            # 在这里，最后就调用到了不同的plugins对不同的resource的处理\n            obj = obj_creator(request.context, **kwargs)\n            return notify({self._resource: self._view(request.context,\n                                                        obj)})\n\n\n通过`obj_creator`就可以调用到具体的handler了\n","source":"_posts/blog/neutron-server-how-to-start.md","raw":"---\ntitle:  Neutron-Server启动流程分析\ncategories: blog\ndate: 2014-03-21\n---\n\n## Neutron-Server启动流程分析\n\n正常的来看，应该是先看nova源码的。一方面网上资料也比较丰富，一方面也是更具有代表性。所以我也就不从头再来，浪费太多的精力去描述像router，deploy等库的使用了\n比如[臭蛋](http://www.choudan.net/)的两篇博客就写得挺详细的，结合代码看一下，倒也可以很快速的了解\n\n[Nova Service启动](http://www.choudan.net/2013/08/09/Nova-Service%E5%90%AF%E5%8A%A8.html)\n\n[Openstack Paste Deploy介绍](http://www.choudan.net/2013/07/28/OpenStack-paste-deploy%E4%BB%8B%E7%BB%8D.html)\n\n\n### deploy加载配置定位到具体的类\n在`/etc/neutron/api-paste.ini`，有这么一行，直接指明了哪个类作为router启动\n\npaste.app_factory = neutron.api.v2.router:APIRouter.factory\n\n\n### 实例化neutron/api/v2/router.py中的APIRouter\n\n    class APIRouter(wsgi.Router):\n        # 一个工厂类方法\n        @classmethod\n        def factory(cls, global_config, **local_config):\n            return cls(**local_config)\n\n        # 真正调用的实例化方法\n        def __init__(self, **local_config):\n            ...\n            #获取NeutornManage的core_plugin，这个定义在/etc/neutron/neutron.conf,比如我的是\n            #core_plugin = neutron.plugins.openvswitch.ovs_neutron_plugin.OVSNeutronPluginV2\n            plugin = manager.NeutronManager.get_plugin()\n\n            #扫描特定路径下的extensions\n            ext_mgr = extensions.PluginAwareExtensionManager.get_instance()\n            ...\n\n            #定义的局部方法\n            def _map_resource(collection, resource, params, parent=None):\n                ...\n                controller = base.create_resource(\n                    collection, resource, plugin, params, allow_bulk=allow_bulk,\n                    parent=parent, allow_pagination=allow_pagination,\n                    allow_sorting=allow_sorting)\n                ...\n                # 将这些resource加进router中\n                return mapper.collection(collection, resource, **mapper_kwargs)\n\n\n            # 遍历 {'network': 'networks', 'subnet': 'subnets','port': 'ports'}\n            # 添加controller\n            for resource in RESOURCES:\n                _map_resource(RESOURCES[resource], resource,\n                            attributes.RESOURCE_ATTRIBUTE_MAP.get(\n                                RESOURCES[resource], dict()))\n\n            for resource in SUB_RESOURCES:\n                ...\n                #其实操作和上面一个差不多，\n\n由这个可以看出，添加的controller类型主要分为三类：(其实只要你在neutron目录下grep一下，看哪里调用了`create_resource`方法即可)\n\n1. OVSNeutronPluginV2\n2. extensions/*.py\n3. plugins/*.py\n\n针对前两途径加载resource的类，下面慢慢进行描述。至于第三种，则是在各个不同的plugin内部额外实现的，不是必须的。\n\n顺便简单的提一下，在`neutron/api/extensions.py`下的`get_instance`方法，这里其实也是和nova一样，是遍历目录下的py文件，来增加extension的\n\n    ...\n    @classmethod\n    def get_instance(cls):\n        if cls._instance is None:\n            cls._instance = cls(get_extensions_path(),\n                                NeutronManager.get_service_plugins())\n    ...\n\n\n### Resource：OVSNeutronPluginV2的实现\n看了代码的你肯定知道，`OVSNeutronPluginV2`这个类，作为`core_plugin`继承了好多的的类\n\n    class OVSNeutronPluginV2(db_base_plugin_v2.NeutronDbPluginV2,\n                             external_net_db.External_net_db_mixin,\n                             extraroute_db.ExtraRoute_db_mixin,\n                             l3_gwmode_db.L3_NAT_db_mixin,\n                             sg_db_rpc.SecurityGroupServerRpcMixin,\n                             l3_agentschedulers_db.L3AgentSchedulerDbMixin,\n                             agentschedulers_db.DhcpAgentSchedulerDbMixin,\n                             portbindings_db.PortBindingMixin,\n                             extradhcpopt_db.ExtraDhcpOptMixin,\n                             addr_pair_db.AllowedAddressPairsMixin):\n\n`OVSNeutronPluginV2`基本上没有什么自己的method，全靠它的\"爹们\"了。\n\n随便抓两个来看下，比如`NeutronDbPluginV2`，他的method有`get_port`,`create_network`之类的，还有`L3_NAT_db_mixin`的`create_router`等。反正与db的操作，`OVSNeutronPluginV2`是不会管的，都在它的父类那边处理。\n\n再看看`OVSNeutronPluginV2`继承的这些父类们:\n\n    #NeutronDbPluginV2继承自NeutronPluginBaseV2\n    class NeutronDbPluginV2(neutron_plugin_base_v2.NeutronPluginBaseV2,\n                           CommonDbMixin):\n\n\n    class NeutronPluginBaseV2(...) :\n       @abstractmethod\n       def create_subnet(self, context, subnet):\n       @abstractmethod\n       def update_subnet(self, context, id, subnet):\n       @abstractmethod\n       def get_subnet(self, context, id, fields=None):\n       @abstractmethod\n       def get_subnets(self, context, filters=None, fields=None,\n\n\n其类图如下:(仅展示部分)\n\n<img src=\"/images/blog/neutron_ovs_plugin_class.png\" alt=\"Neutron的OVS-Plugin类图, 仅展示部分\">\n\n基本上可以说有一个接口类(如图中的`NeutronPluginBaseV2`)，定义了抽象方法，然后一个具体的db类来实现(如`NeutronDbPluginV2`，这里是采用`SQLAlchemy`来完成db模型的)\n\n\n\n\n### Resource：Extensions目录下resource的实现\n在`/etc/neutron/api-paste.ini`还有这么一项配置\n\n    [filter:extensions]\n    paste.filter_factory = neutron.api.extensions:plugin_aware_extension_middleware_factory\n\n\n在`plugin_aware_extension_middleware_factory`会调用到`ExtensionMiddleware.__init__`方法，其代码如下：\n\n    class ExtensionMiddleware(wsgi.Middleware):\n\n        def __init__(self, application,\n                     ext_mgr=None):\n            self.ext_mgr = ...\n            mapper = routes.Mapper()\n\n            # ext_mgr.get_resources()其实在内部会调用每个extensions目录下的extension类的get_resource方法\n            for resource in self.ext_mgr.get_resources():\n                ...\n                # 针对每个extension\n                mapper.resource(resource.collection, resource.collection,\n                                controller=resource.controller,\n                                member=resource.member_actions,\n                                parent_resource=resource.parent,\n                                path_prefix=path_prefix)\n                ...\n\n\n\n比如在extensions下的`securitygroup`.py中的`get_resources`方法，看这个代码就知道其中可以处理`security_group`和`security_group_rule`两类请求了。\n\n    class Securitygroup(extensions.ExtensionDescriptor):\n        def get_resources(cls):\n            ...\n            exts = []\n            plugin = manager.NeutronManager.get_plugin()\n            for resource_name in ['security_group', 'security_group_rule']:\n                ...\n                controller = base.create_resource(collection_name,\n                                                  resource_name,\n                                                  plugin, params, allow_bulk=True,\n                                                  allow_pagination=True,\n                                                  allow_sorting=True)\n                ex = extensions.ResourceExtension(collection_name,\n                                                  controller,\n                                                  attr_map=params)\n                exts.append(ex)\n            return exts\n\n\n\n----------------\n如此，`Neutron-Server`就已经基本上启动了，无外乎就是加载配置，router各种resource，然后就等待请求了。其中router哪些resource完全是由配置文件来决定的。\n当然，在启动的过程中也会初始化db，这也就是为何在安装`neutron`的时候无需像`nova`，`glance`等要执行`db sync`的原因了。\n\n\n\n\n最后说一下,上面将各种操作都给map到位了,但是调用的时候呢？\nOk, 其实对资源的处理最终都会交由neutron/api/v2/base.py中定义的Controller类来处理,比如`create-network`请求,在create方法的末端，你会看到:\n\n    class Controller():\n    def create(...):\n        ...\n        obj_creator = getattr(self._plugin, action)\n        if self._collection in body:\n            # Emulate atomic bulk behavior\n            objs = self._emulate_bulk_create(obj_creator, request,\n                                                body, parent_id)\n            return notify({self._collection: objs})\n        else:\n            kwargs.update({self._resource: body})\n            # 在这里，最后就调用到了不同的plugins对不同的resource的处理\n            obj = obj_creator(request.context, **kwargs)\n            return notify({self._resource: self._view(request.context,\n                                                        obj)})\n\n\n通过`obj_creator`就可以调用到具体的handler了\n","slug":"blog/neutron-server-how-to-start","published":1,"updated":"2016-07-17T11:40:50.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciuyae217000uyt7l84ac0o7z","content":"<h2 id=\"Neutron-Server启动流程分析\"><a href=\"#Neutron-Server启动流程分析\" class=\"headerlink\" title=\"Neutron-Server启动流程分析\"></a>Neutron-Server启动流程分析</h2><p>正常的来看，应该是先看nova源码的。一方面网上资料也比较丰富，一方面也是更具有代表性。所以我也就不从头再来，浪费太多的精力去描述像router，deploy等库的使用了<br>比如<a href=\"http://www.choudan.net/\" target=\"_blank\" rel=\"external\">臭蛋</a>的两篇博客就写得挺详细的，结合代码看一下，倒也可以很快速的了解</p>\n<p><a href=\"http://www.choudan.net/2013/08/09/Nova-Service%E5%90%AF%E5%8A%A8.html\" target=\"_blank\" rel=\"external\">Nova Service启动</a></p>\n<p><a href=\"http://www.choudan.net/2013/07/28/OpenStack-paste-deploy%E4%BB%8B%E7%BB%8D.html\" target=\"_blank\" rel=\"external\">Openstack Paste Deploy介绍</a></p>\n<h3 id=\"deploy加载配置定位到具体的类\"><a href=\"#deploy加载配置定位到具体的类\" class=\"headerlink\" title=\"deploy加载配置定位到具体的类\"></a>deploy加载配置定位到具体的类</h3><p>在<code>/etc/neutron/api-paste.ini</code>，有这么一行，直接指明了哪个类作为router启动</p>\n<p>paste.app_factory = neutron.api.v2.router:APIRouter.factory</p>\n<h3 id=\"实例化neutron-api-v2-router-py中的APIRouter\"><a href=\"#实例化neutron-api-v2-router-py中的APIRouter\" class=\"headerlink\" title=\"实例化neutron/api/v2/router.py中的APIRouter\"></a>实例化neutron/api/v2/router.py中的APIRouter</h3><pre><code>class APIRouter(wsgi.Router):\n    # 一个工厂类方法\n    @classmethod\n    def factory(cls, global_config, **local_config):\n        return cls(**local_config)\n\n    # 真正调用的实例化方法\n    def __init__(self, **local_config):\n        ...\n        #获取NeutornManage的core_plugin，这个定义在/etc/neutron/neutron.conf,比如我的是\n        #core_plugin = neutron.plugins.openvswitch.ovs_neutron_plugin.OVSNeutronPluginV2\n        plugin = manager.NeutronManager.get_plugin()\n\n        #扫描特定路径下的extensions\n        ext_mgr = extensions.PluginAwareExtensionManager.get_instance()\n        ...\n\n        #定义的局部方法\n        def _map_resource(collection, resource, params, parent=None):\n            ...\n            controller = base.create_resource(\n                collection, resource, plugin, params, allow_bulk=allow_bulk,\n                parent=parent, allow_pagination=allow_pagination,\n                allow_sorting=allow_sorting)\n            ...\n            # 将这些resource加进router中\n            return mapper.collection(collection, resource, **mapper_kwargs)\n\n\n        # 遍历 {&apos;network&apos;: &apos;networks&apos;, &apos;subnet&apos;: &apos;subnets&apos;,&apos;port&apos;: &apos;ports&apos;}\n        # 添加controller\n        for resource in RESOURCES:\n            _map_resource(RESOURCES[resource], resource,\n                        attributes.RESOURCE_ATTRIBUTE_MAP.get(\n                            RESOURCES[resource], dict()))\n\n        for resource in SUB_RESOURCES:\n            ...\n            #其实操作和上面一个差不多，\n</code></pre><p>由这个可以看出，添加的controller类型主要分为三类：(其实只要你在neutron目录下grep一下，看哪里调用了<code>create_resource</code>方法即可)</p>\n<ol>\n<li>OVSNeutronPluginV2</li>\n<li>extensions/*.py</li>\n<li>plugins/*.py</li>\n</ol>\n<p>针对前两途径加载resource的类，下面慢慢进行描述。至于第三种，则是在各个不同的plugin内部额外实现的，不是必须的。</p>\n<p>顺便简单的提一下，在<code>neutron/api/extensions.py</code>下的<code>get_instance</code>方法，这里其实也是和nova一样，是遍历目录下的py文件，来增加extension的</p>\n<pre><code>...\n@classmethod\ndef get_instance(cls):\n    if cls._instance is None:\n        cls._instance = cls(get_extensions_path(),\n                            NeutronManager.get_service_plugins())\n...\n</code></pre><h3 id=\"Resource：OVSNeutronPluginV2的实现\"><a href=\"#Resource：OVSNeutronPluginV2的实现\" class=\"headerlink\" title=\"Resource：OVSNeutronPluginV2的实现\"></a>Resource：OVSNeutronPluginV2的实现</h3><p>看了代码的你肯定知道，<code>OVSNeutronPluginV2</code>这个类，作为<code>core_plugin</code>继承了好多的的类</p>\n<pre><code>class OVSNeutronPluginV2(db_base_plugin_v2.NeutronDbPluginV2,\n                         external_net_db.External_net_db_mixin,\n                         extraroute_db.ExtraRoute_db_mixin,\n                         l3_gwmode_db.L3_NAT_db_mixin,\n                         sg_db_rpc.SecurityGroupServerRpcMixin,\n                         l3_agentschedulers_db.L3AgentSchedulerDbMixin,\n                         agentschedulers_db.DhcpAgentSchedulerDbMixin,\n                         portbindings_db.PortBindingMixin,\n                         extradhcpopt_db.ExtraDhcpOptMixin,\n                         addr_pair_db.AllowedAddressPairsMixin):\n</code></pre><p><code>OVSNeutronPluginV2</code>基本上没有什么自己的method，全靠它的”爹们”了。</p>\n<p>随便抓两个来看下，比如<code>NeutronDbPluginV2</code>，他的method有<code>get_port</code>,<code>create_network</code>之类的，还有<code>L3_NAT_db_mixin</code>的<code>create_router</code>等。反正与db的操作，<code>OVSNeutronPluginV2</code>是不会管的，都在它的父类那边处理。</p>\n<p>再看看<code>OVSNeutronPluginV2</code>继承的这些父类们:</p>\n<pre><code>#NeutronDbPluginV2继承自NeutronPluginBaseV2\nclass NeutronDbPluginV2(neutron_plugin_base_v2.NeutronPluginBaseV2,\n                       CommonDbMixin):\n\n\nclass NeutronPluginBaseV2(...) :\n   @abstractmethod\n   def create_subnet(self, context, subnet):\n   @abstractmethod\n   def update_subnet(self, context, id, subnet):\n   @abstractmethod\n   def get_subnet(self, context, id, fields=None):\n   @abstractmethod\n   def get_subnets(self, context, filters=None, fields=None,\n</code></pre><p>其类图如下:(仅展示部分)</p>\n<p><img src=\"/images/blog/neutron_ovs_plugin_class.png\" alt=\"Neutron的OVS-Plugin类图, 仅展示部分\"></p>\n<p>基本上可以说有一个接口类(如图中的<code>NeutronPluginBaseV2</code>)，定义了抽象方法，然后一个具体的db类来实现(如<code>NeutronDbPluginV2</code>，这里是采用<code>SQLAlchemy</code>来完成db模型的)</p>\n<h3 id=\"Resource：Extensions目录下resource的实现\"><a href=\"#Resource：Extensions目录下resource的实现\" class=\"headerlink\" title=\"Resource：Extensions目录下resource的实现\"></a>Resource：Extensions目录下resource的实现</h3><p>在<code>/etc/neutron/api-paste.ini</code>还有这么一项配置</p>\n<pre><code>[filter:extensions]\npaste.filter_factory = neutron.api.extensions:plugin_aware_extension_middleware_factory\n</code></pre><p>在<code>plugin_aware_extension_middleware_factory</code>会调用到<code>ExtensionMiddleware.__init__</code>方法，其代码如下：</p>\n<pre><code>class ExtensionMiddleware(wsgi.Middleware):\n\n    def __init__(self, application,\n                 ext_mgr=None):\n        self.ext_mgr = ...\n        mapper = routes.Mapper()\n\n        # ext_mgr.get_resources()其实在内部会调用每个extensions目录下的extension类的get_resource方法\n        for resource in self.ext_mgr.get_resources():\n            ...\n            # 针对每个extension\n            mapper.resource(resource.collection, resource.collection,\n                            controller=resource.controller,\n                            member=resource.member_actions,\n                            parent_resource=resource.parent,\n                            path_prefix=path_prefix)\n            ...\n</code></pre><p>比如在extensions下的<code>securitygroup</code>.py中的<code>get_resources</code>方法，看这个代码就知道其中可以处理<code>security_group</code>和<code>security_group_rule</code>两类请求了。</p>\n<pre><code>class Securitygroup(extensions.ExtensionDescriptor):\n    def get_resources(cls):\n        ...\n        exts = []\n        plugin = manager.NeutronManager.get_plugin()\n        for resource_name in [&apos;security_group&apos;, &apos;security_group_rule&apos;]:\n            ...\n            controller = base.create_resource(collection_name,\n                                              resource_name,\n                                              plugin, params, allow_bulk=True,\n                                              allow_pagination=True,\n                                              allow_sorting=True)\n            ex = extensions.ResourceExtension(collection_name,\n                                              controller,\n                                              attr_map=params)\n            exts.append(ex)\n        return exts\n</code></pre><hr>\n<p>如此，<code>Neutron-Server</code>就已经基本上启动了，无外乎就是加载配置，router各种resource，然后就等待请求了。其中router哪些resource完全是由配置文件来决定的。<br>当然，在启动的过程中也会初始化db，这也就是为何在安装<code>neutron</code>的时候无需像<code>nova</code>，<code>glance</code>等要执行<code>db sync</code>的原因了。</p>\n<p>最后说一下,上面将各种操作都给map到位了,但是调用的时候呢？<br>Ok, 其实对资源的处理最终都会交由neutron/api/v2/base.py中定义的Controller类来处理,比如<code>create-network</code>请求,在create方法的末端，你会看到:</p>\n<pre><code>class Controller():\ndef create(...):\n    ...\n    obj_creator = getattr(self._plugin, action)\n    if self._collection in body:\n        # Emulate atomic bulk behavior\n        objs = self._emulate_bulk_create(obj_creator, request,\n                                            body, parent_id)\n        return notify({self._collection: objs})\n    else:\n        kwargs.update({self._resource: body})\n        # 在这里，最后就调用到了不同的plugins对不同的resource的处理\n        obj = obj_creator(request.context, **kwargs)\n        return notify({self._resource: self._view(request.context,\n                                                    obj)})\n</code></pre><p>通过<code>obj_creator</code>就可以调用到具体的handler了</p>\n","excerpt":"","more":"<h2 id=\"Neutron-Server启动流程分析\"><a href=\"#Neutron-Server启动流程分析\" class=\"headerlink\" title=\"Neutron-Server启动流程分析\"></a>Neutron-Server启动流程分析</h2><p>正常的来看，应该是先看nova源码的。一方面网上资料也比较丰富，一方面也是更具有代表性。所以我也就不从头再来，浪费太多的精力去描述像router，deploy等库的使用了<br>比如<a href=\"http://www.choudan.net/\">臭蛋</a>的两篇博客就写得挺详细的，结合代码看一下，倒也可以很快速的了解</p>\n<p><a href=\"http://www.choudan.net/2013/08/09/Nova-Service%E5%90%AF%E5%8A%A8.html\">Nova Service启动</a></p>\n<p><a href=\"http://www.choudan.net/2013/07/28/OpenStack-paste-deploy%E4%BB%8B%E7%BB%8D.html\">Openstack Paste Deploy介绍</a></p>\n<h3 id=\"deploy加载配置定位到具体的类\"><a href=\"#deploy加载配置定位到具体的类\" class=\"headerlink\" title=\"deploy加载配置定位到具体的类\"></a>deploy加载配置定位到具体的类</h3><p>在<code>/etc/neutron/api-paste.ini</code>，有这么一行，直接指明了哪个类作为router启动</p>\n<p>paste.app_factory = neutron.api.v2.router:APIRouter.factory</p>\n<h3 id=\"实例化neutron-api-v2-router-py中的APIRouter\"><a href=\"#实例化neutron-api-v2-router-py中的APIRouter\" class=\"headerlink\" title=\"实例化neutron/api/v2/router.py中的APIRouter\"></a>实例化neutron/api/v2/router.py中的APIRouter</h3><pre><code>class APIRouter(wsgi.Router):\n    # 一个工厂类方法\n    @classmethod\n    def factory(cls, global_config, **local_config):\n        return cls(**local_config)\n\n    # 真正调用的实例化方法\n    def __init__(self, **local_config):\n        ...\n        #获取NeutornManage的core_plugin，这个定义在/etc/neutron/neutron.conf,比如我的是\n        #core_plugin = neutron.plugins.openvswitch.ovs_neutron_plugin.OVSNeutronPluginV2\n        plugin = manager.NeutronManager.get_plugin()\n\n        #扫描特定路径下的extensions\n        ext_mgr = extensions.PluginAwareExtensionManager.get_instance()\n        ...\n\n        #定义的局部方法\n        def _map_resource(collection, resource, params, parent=None):\n            ...\n            controller = base.create_resource(\n                collection, resource, plugin, params, allow_bulk=allow_bulk,\n                parent=parent, allow_pagination=allow_pagination,\n                allow_sorting=allow_sorting)\n            ...\n            # 将这些resource加进router中\n            return mapper.collection(collection, resource, **mapper_kwargs)\n\n\n        # 遍历 {&apos;network&apos;: &apos;networks&apos;, &apos;subnet&apos;: &apos;subnets&apos;,&apos;port&apos;: &apos;ports&apos;}\n        # 添加controller\n        for resource in RESOURCES:\n            _map_resource(RESOURCES[resource], resource,\n                        attributes.RESOURCE_ATTRIBUTE_MAP.get(\n                            RESOURCES[resource], dict()))\n\n        for resource in SUB_RESOURCES:\n            ...\n            #其实操作和上面一个差不多，\n</code></pre><p>由这个可以看出，添加的controller类型主要分为三类：(其实只要你在neutron目录下grep一下，看哪里调用了<code>create_resource</code>方法即可)</p>\n<ol>\n<li>OVSNeutronPluginV2</li>\n<li>extensions/*.py</li>\n<li>plugins/*.py</li>\n</ol>\n<p>针对前两途径加载resource的类，下面慢慢进行描述。至于第三种，则是在各个不同的plugin内部额外实现的，不是必须的。</p>\n<p>顺便简单的提一下，在<code>neutron/api/extensions.py</code>下的<code>get_instance</code>方法，这里其实也是和nova一样，是遍历目录下的py文件，来增加extension的</p>\n<pre><code>...\n@classmethod\ndef get_instance(cls):\n    if cls._instance is None:\n        cls._instance = cls(get_extensions_path(),\n                            NeutronManager.get_service_plugins())\n...\n</code></pre><h3 id=\"Resource：OVSNeutronPluginV2的实现\"><a href=\"#Resource：OVSNeutronPluginV2的实现\" class=\"headerlink\" title=\"Resource：OVSNeutronPluginV2的实现\"></a>Resource：OVSNeutronPluginV2的实现</h3><p>看了代码的你肯定知道，<code>OVSNeutronPluginV2</code>这个类，作为<code>core_plugin</code>继承了好多的的类</p>\n<pre><code>class OVSNeutronPluginV2(db_base_plugin_v2.NeutronDbPluginV2,\n                         external_net_db.External_net_db_mixin,\n                         extraroute_db.ExtraRoute_db_mixin,\n                         l3_gwmode_db.L3_NAT_db_mixin,\n                         sg_db_rpc.SecurityGroupServerRpcMixin,\n                         l3_agentschedulers_db.L3AgentSchedulerDbMixin,\n                         agentschedulers_db.DhcpAgentSchedulerDbMixin,\n                         portbindings_db.PortBindingMixin,\n                         extradhcpopt_db.ExtraDhcpOptMixin,\n                         addr_pair_db.AllowedAddressPairsMixin):\n</code></pre><p><code>OVSNeutronPluginV2</code>基本上没有什么自己的method，全靠它的”爹们”了。</p>\n<p>随便抓两个来看下，比如<code>NeutronDbPluginV2</code>，他的method有<code>get_port</code>,<code>create_network</code>之类的，还有<code>L3_NAT_db_mixin</code>的<code>create_router</code>等。反正与db的操作，<code>OVSNeutronPluginV2</code>是不会管的，都在它的父类那边处理。</p>\n<p>再看看<code>OVSNeutronPluginV2</code>继承的这些父类们:</p>\n<pre><code>#NeutronDbPluginV2继承自NeutronPluginBaseV2\nclass NeutronDbPluginV2(neutron_plugin_base_v2.NeutronPluginBaseV2,\n                       CommonDbMixin):\n\n\nclass NeutronPluginBaseV2(...) :\n   @abstractmethod\n   def create_subnet(self, context, subnet):\n   @abstractmethod\n   def update_subnet(self, context, id, subnet):\n   @abstractmethod\n   def get_subnet(self, context, id, fields=None):\n   @abstractmethod\n   def get_subnets(self, context, filters=None, fields=None,\n</code></pre><p>其类图如下:(仅展示部分)</p>\n<p><img src=\"/images/blog/neutron_ovs_plugin_class.png\" alt=\"Neutron的OVS-Plugin类图, 仅展示部分\"></p>\n<p>基本上可以说有一个接口类(如图中的<code>NeutronPluginBaseV2</code>)，定义了抽象方法，然后一个具体的db类来实现(如<code>NeutronDbPluginV2</code>，这里是采用<code>SQLAlchemy</code>来完成db模型的)</p>\n<h3 id=\"Resource：Extensions目录下resource的实现\"><a href=\"#Resource：Extensions目录下resource的实现\" class=\"headerlink\" title=\"Resource：Extensions目录下resource的实现\"></a>Resource：Extensions目录下resource的实现</h3><p>在<code>/etc/neutron/api-paste.ini</code>还有这么一项配置</p>\n<pre><code>[filter:extensions]\npaste.filter_factory = neutron.api.extensions:plugin_aware_extension_middleware_factory\n</code></pre><p>在<code>plugin_aware_extension_middleware_factory</code>会调用到<code>ExtensionMiddleware.__init__</code>方法，其代码如下：</p>\n<pre><code>class ExtensionMiddleware(wsgi.Middleware):\n\n    def __init__(self, application,\n                 ext_mgr=None):\n        self.ext_mgr = ...\n        mapper = routes.Mapper()\n\n        # ext_mgr.get_resources()其实在内部会调用每个extensions目录下的extension类的get_resource方法\n        for resource in self.ext_mgr.get_resources():\n            ...\n            # 针对每个extension\n            mapper.resource(resource.collection, resource.collection,\n                            controller=resource.controller,\n                            member=resource.member_actions,\n                            parent_resource=resource.parent,\n                            path_prefix=path_prefix)\n            ...\n</code></pre><p>比如在extensions下的<code>securitygroup</code>.py中的<code>get_resources</code>方法，看这个代码就知道其中可以处理<code>security_group</code>和<code>security_group_rule</code>两类请求了。</p>\n<pre><code>class Securitygroup(extensions.ExtensionDescriptor):\n    def get_resources(cls):\n        ...\n        exts = []\n        plugin = manager.NeutronManager.get_plugin()\n        for resource_name in [&apos;security_group&apos;, &apos;security_group_rule&apos;]:\n            ...\n            controller = base.create_resource(collection_name,\n                                              resource_name,\n                                              plugin, params, allow_bulk=True,\n                                              allow_pagination=True,\n                                              allow_sorting=True)\n            ex = extensions.ResourceExtension(collection_name,\n                                              controller,\n                                              attr_map=params)\n            exts.append(ex)\n        return exts\n</code></pre><hr>\n<p>如此，<code>Neutron-Server</code>就已经基本上启动了，无外乎就是加载配置，router各种resource，然后就等待请求了。其中router哪些resource完全是由配置文件来决定的。<br>当然，在启动的过程中也会初始化db，这也就是为何在安装<code>neutron</code>的时候无需像<code>nova</code>，<code>glance</code>等要执行<code>db sync</code>的原因了。</p>\n<p>最后说一下,上面将各种操作都给map到位了,但是调用的时候呢？<br>Ok, 其实对资源的处理最终都会交由neutron/api/v2/base.py中定义的Controller类来处理,比如<code>create-network</code>请求,在create方法的末端，你会看到:</p>\n<pre><code>class Controller():\ndef create(...):\n    ...\n    obj_creator = getattr(self._plugin, action)\n    if self._collection in body:\n        # Emulate atomic bulk behavior\n        objs = self._emulate_bulk_create(obj_creator, request,\n                                            body, parent_id)\n        return notify({self._collection: objs})\n    else:\n        kwargs.update({self._resource: body})\n        # 在这里，最后就调用到了不同的plugins对不同的resource的处理\n        obj = obj_creator(request.context, **kwargs)\n        return notify({self._resource: self._view(request.context,\n                                                    obj)})\n</code></pre><p>通过<code>obj_creator</code>就可以调用到具体的handler了</p>\n"},{"title":"Neutron如何与Nova-Compute进行交互","date":"2014-03-23T16:00:00.000Z","_content":"\n开门见山,最近在研究了一下Neutton的代码，看的过程中也将所了解的内容进行整理，整理内容如下:\n\n## Nova-compute如何发出请求\n当我执行nova boot的时候,nova-compute是如何执行接下来的操作呢,贴个代码说起来也太罗嗦了,还是直接用一个流程图来说明一下,然后再根据他图来说明一下就比较直观吧\n\n不过看图容易画图难啊,为了表示函数调用层级,我用数字放在方法前面,比如`0 methodA` -> `1 methodB` -> `2 methodC` -> `0 methodD`. 就表明,`methodA`里面调用了`methodB`,`methodB`里面调用了`methodC`,然后`methodA`结束了,开始调用`methodD`.OK,上图:\n\n<img src=\"/images/blog/neutron_interact_with_nova_compute.png\" alt=\"nova-compute-build-instance\" />\n\nOpenstack毕竟是各个不同的模块组合起来的,上面的流程是通用的, 不管你是用neutron-ovs,nova-network,neutron-ml2,还是libvirt,lxc,hyperv等, 不变的部分它就长这样了.\n\n既然通用的都说完了,那么接下来就到了如何去管理和创建网络资源了.这里我们就采用Neutron-OVS和libvirt来为例说明.\n\n图中其中两个标红的操作,一个`post_message_to_create_and_bind`和`plug`,就是接下来要说明的重点:Neutron-OVS返回port并绑定,libvirt如何响应并创建相应的网卡设备\n\n\n## Neutron-OVS返回port并绑定\n\n    # OVSNeutronPluginV2下的create_port,Neutron-server最后会调用这个方法\n    def create_port(self, context, port):\n        port['port']['status'] = q_const.PORT_STATUS_DOWN\n        port_data = port['port']\n        session = context.session\n        with session.begin(subtransactions=True):\n            self._ensure_default_security_group_on_port(context, port)\n            sgids = self._get_security_groups_on_port(context, port)\n            dhcp_opts = port['port'].get(edo_ext.EXTRADHCPOPTS, [])\n\n            # 创建port\n            port = super(OVSNeutronPluginV2, self).create_port(context, port)\n\n            # 绑定port和host, 实际上是执行插入portbindingports表\n            self._process_portbindings_create_and_update(context, port_data, port)\n\n            # 绑定port和security, 实际上是执行插入securitygroupportbindings表\n            # 作用嘛,肯定就是用来执行port的securitygroup的操作啦\n            self._process_port_create_security_group(context, port, sgids)\n\n            # 执行插入extradhcpopts\n            # TODO? 这个作用我还不清楚\n            self._process_port_create_extra_dhcp_opts(context, port,\n                                                        dhcp_opts)\n            # 配置db,以允许该机器与外界进行通信,以后会生成iptables\n            # http://blog.csdn.net/matt_mao/article/details/19417451\n            port[addr_pair.ADDRESS_PAIRS] = (\n                self._process_create_allowed_address_pairs(\n                    context, port,\n                    port_data.get(addr_pair.ADDRESS_PAIRS)))\n        # 通知相关的agent执行security_group的更新,通常就是iptables\n        self.notify_security_groups_member_updated(context, port)\n        return port\n\n\n另外,由于OVSNeutronPluginV2的__init__方法中,存在`base_binding_dict`这么一个属性\n\n    class OVSNeutronPluginV2(...):\n       def __init__(self, configfile=None):\n            self.base_binding_dict = {\n                portbindings.VIF_TYPE: portbindings.VIF_TYPE_OVS,\n                portbindings.CAPABILITIES: {\n                    portbindings.CAP_PORT_FILTER:\n                    'security-group' in self.supported_extension_aliases}}\n\n\n在代码中可以看到,其初始化为`base_binding_dict['binding:vif_type']='ovs'`, 在之后的一些代码中会被update到port中.这个执行`neutron port-show`中可以看到对应的值,同时,在最后的`libvirt`的plug方法中也是起着判断因素的.\n\n\n## libvirt如何响应并创建相应的网卡设备\n这里就直接上代码,逻辑也不是很复杂.\n\n<img src=\"/images/blog/libvirt_vif_plug.png\" alt=\"lib_vif_plug\" />\n\n跟下plug的代码就知道了,其实根据配置文件来选择哪一个vif_driver的.在旧版的代码中,你还是有很多选择的,但是在新版的代码里面就只有`LibvirtGenericVIFDriver`\n\n    # 如此的配置在旧版的nova是可行的,不过代码中会有提示说已经废弃了,建议使用GenericVIFDriver\n    libvirt_vif_driver = nova.virt.libvirt.vif.LibvirtHybridOVSBridgeDriver\n    # 所以还是使用如下的配置\n    libvirt_vif_driver = nova.virt.libvirt.vif.LibvirtGenericVIFDriver\n\n此处就以OVS的创建代码来说明了\n\n    def plug_ovs_hybrid(self,instance,vif):\n        iface_id = self.get_ovs_interfaceid(vif)\n        # 获取了br_name, 以qbr开头\n        br_name = self.get_br_name(vif['id'])\n        # 获取了veth_pair_name, 以qvb,qvo开头\n        v1_name,v2_name = self.get_veth_pair_names(vif['id'])\n\n        # 添加一个qbr 网桥\n        if not linux_net.device_exists(br_name):\n            utils.execute('brctl','addbr',br_name,run_as_root=True)\n            utils.execute('brctl','setfd',br_name,0,run_as_root=True)\n            utils.execute('brctl','stp',br_name,'off',run_as_root=True)\n            utils.execute('tee',\n                          ('/sys/class/net/%s/bridge/multicast_snooping' %\n                           br_name),\n                          process_input='0',\n                          run_as_root=True,\n                          check_exit_code=[0,1])\n\n        # 创建添加一个qvo网桥\n        if not linux_net.device_exists(v2_name):\n            # 将两个veth创建为一个peer-port\n            linux_net._create_veth_pair(v1_name,v2_name)\n            utils.execute('ip','link','set',br_name,'up',run_as_root=True)\n            # 将qvb接口添加到qbr上\n            utils.execute('brctl','addif',br_name,v1_name,run_as_root=True)\n            # 将接口qvo桥接到br-int上\n            # 分别传入的参数为:br-int, qvo, port['id'], port的mac地址, instance-uuid\n            linux_net.create_ovs_vif_port(self.get_bridge_name(vif),\n                                          v2_name,iface_id,vif['address'],\n                                          instance['uuid'])\n\n    def _create_veth_pair(dev1_name, dev2_name):\n        # 将两个veth创建为一个peer-port\n        for dev in [dev1_name, dev2_name]:\n            delete_net_dev(dev)\n\n        utils.execute('ip', 'link', 'add', dev1_name, 'type', 'veth', 'peer',\n                      'name', dev2_name, run_as_root=True)\n        for dev in [dev1_name, dev2_name]:\n            utils.execute('ip', 'link', 'set', dev, 'up', run_as_root=True)\n            utils.execute('ip', 'link', 'set', dev, 'promisc', 'on',\n                          run_as_root=True)\n\n    def create_ovs_vif_port(bridge, dev, iface_id, mac, instance_id):\n        # 将接口qvo桥接到br-int上\n        # 分别传入的参数为:br-int, qvo, port['id'], port的mac地址, instance-uuid\n        utils.execute('ovs-vsctl', '--', '--may-exist', 'add-port',\n                      bridge, dev,\n                      '--', 'set', 'Interface', dev,\n                      'external-ids:iface-id=%s' % iface_id,\n                      'external-ids:iface-status=active',\n                      'external-ids:attached-mac=%s' % mac,\n                      'external-ids:vm-uuid=%s' % instance_id,\n                      run_as_root=True)\n\n\n\n由代码可以看出,至此,`<qbr>`--`(qvb)`--`(qvo)`--`<br-int>`就已经连接上了\n至于虚机是如何与`<qbr>`连上的,这个就是在virt内部做的了,执行以下的命令, 其中的source字段是你提供的`qbr`, `tap`则是virt生成的.\n\n    virsh domiflist <instance-id>\n\n到这里可以看出,从一个nova-compute到neutron到libvrit的各个网络信息的处理交互. 逻辑相对来说还是比较清晰的。\n\n终于整理完了之后，感觉变成了nova-compute的源码分析了。。。\n","source":"_posts/blog/nova-vif-plug.md","raw":"---\ntitle:  Neutron如何与Nova-Compute进行交互\ncategories: blog\ndate: 2014-03-24\n---\n\n开门见山,最近在研究了一下Neutton的代码，看的过程中也将所了解的内容进行整理，整理内容如下:\n\n## Nova-compute如何发出请求\n当我执行nova boot的时候,nova-compute是如何执行接下来的操作呢,贴个代码说起来也太罗嗦了,还是直接用一个流程图来说明一下,然后再根据他图来说明一下就比较直观吧\n\n不过看图容易画图难啊,为了表示函数调用层级,我用数字放在方法前面,比如`0 methodA` -> `1 methodB` -> `2 methodC` -> `0 methodD`. 就表明,`methodA`里面调用了`methodB`,`methodB`里面调用了`methodC`,然后`methodA`结束了,开始调用`methodD`.OK,上图:\n\n<img src=\"/images/blog/neutron_interact_with_nova_compute.png\" alt=\"nova-compute-build-instance\" />\n\nOpenstack毕竟是各个不同的模块组合起来的,上面的流程是通用的, 不管你是用neutron-ovs,nova-network,neutron-ml2,还是libvirt,lxc,hyperv等, 不变的部分它就长这样了.\n\n既然通用的都说完了,那么接下来就到了如何去管理和创建网络资源了.这里我们就采用Neutron-OVS和libvirt来为例说明.\n\n图中其中两个标红的操作,一个`post_message_to_create_and_bind`和`plug`,就是接下来要说明的重点:Neutron-OVS返回port并绑定,libvirt如何响应并创建相应的网卡设备\n\n\n## Neutron-OVS返回port并绑定\n\n    # OVSNeutronPluginV2下的create_port,Neutron-server最后会调用这个方法\n    def create_port(self, context, port):\n        port['port']['status'] = q_const.PORT_STATUS_DOWN\n        port_data = port['port']\n        session = context.session\n        with session.begin(subtransactions=True):\n            self._ensure_default_security_group_on_port(context, port)\n            sgids = self._get_security_groups_on_port(context, port)\n            dhcp_opts = port['port'].get(edo_ext.EXTRADHCPOPTS, [])\n\n            # 创建port\n            port = super(OVSNeutronPluginV2, self).create_port(context, port)\n\n            # 绑定port和host, 实际上是执行插入portbindingports表\n            self._process_portbindings_create_and_update(context, port_data, port)\n\n            # 绑定port和security, 实际上是执行插入securitygroupportbindings表\n            # 作用嘛,肯定就是用来执行port的securitygroup的操作啦\n            self._process_port_create_security_group(context, port, sgids)\n\n            # 执行插入extradhcpopts\n            # TODO? 这个作用我还不清楚\n            self._process_port_create_extra_dhcp_opts(context, port,\n                                                        dhcp_opts)\n            # 配置db,以允许该机器与外界进行通信,以后会生成iptables\n            # http://blog.csdn.net/matt_mao/article/details/19417451\n            port[addr_pair.ADDRESS_PAIRS] = (\n                self._process_create_allowed_address_pairs(\n                    context, port,\n                    port_data.get(addr_pair.ADDRESS_PAIRS)))\n        # 通知相关的agent执行security_group的更新,通常就是iptables\n        self.notify_security_groups_member_updated(context, port)\n        return port\n\n\n另外,由于OVSNeutronPluginV2的__init__方法中,存在`base_binding_dict`这么一个属性\n\n    class OVSNeutronPluginV2(...):\n       def __init__(self, configfile=None):\n            self.base_binding_dict = {\n                portbindings.VIF_TYPE: portbindings.VIF_TYPE_OVS,\n                portbindings.CAPABILITIES: {\n                    portbindings.CAP_PORT_FILTER:\n                    'security-group' in self.supported_extension_aliases}}\n\n\n在代码中可以看到,其初始化为`base_binding_dict['binding:vif_type']='ovs'`, 在之后的一些代码中会被update到port中.这个执行`neutron port-show`中可以看到对应的值,同时,在最后的`libvirt`的plug方法中也是起着判断因素的.\n\n\n## libvirt如何响应并创建相应的网卡设备\n这里就直接上代码,逻辑也不是很复杂.\n\n<img src=\"/images/blog/libvirt_vif_plug.png\" alt=\"lib_vif_plug\" />\n\n跟下plug的代码就知道了,其实根据配置文件来选择哪一个vif_driver的.在旧版的代码中,你还是有很多选择的,但是在新版的代码里面就只有`LibvirtGenericVIFDriver`\n\n    # 如此的配置在旧版的nova是可行的,不过代码中会有提示说已经废弃了,建议使用GenericVIFDriver\n    libvirt_vif_driver = nova.virt.libvirt.vif.LibvirtHybridOVSBridgeDriver\n    # 所以还是使用如下的配置\n    libvirt_vif_driver = nova.virt.libvirt.vif.LibvirtGenericVIFDriver\n\n此处就以OVS的创建代码来说明了\n\n    def plug_ovs_hybrid(self,instance,vif):\n        iface_id = self.get_ovs_interfaceid(vif)\n        # 获取了br_name, 以qbr开头\n        br_name = self.get_br_name(vif['id'])\n        # 获取了veth_pair_name, 以qvb,qvo开头\n        v1_name,v2_name = self.get_veth_pair_names(vif['id'])\n\n        # 添加一个qbr 网桥\n        if not linux_net.device_exists(br_name):\n            utils.execute('brctl','addbr',br_name,run_as_root=True)\n            utils.execute('brctl','setfd',br_name,0,run_as_root=True)\n            utils.execute('brctl','stp',br_name,'off',run_as_root=True)\n            utils.execute('tee',\n                          ('/sys/class/net/%s/bridge/multicast_snooping' %\n                           br_name),\n                          process_input='0',\n                          run_as_root=True,\n                          check_exit_code=[0,1])\n\n        # 创建添加一个qvo网桥\n        if not linux_net.device_exists(v2_name):\n            # 将两个veth创建为一个peer-port\n            linux_net._create_veth_pair(v1_name,v2_name)\n            utils.execute('ip','link','set',br_name,'up',run_as_root=True)\n            # 将qvb接口添加到qbr上\n            utils.execute('brctl','addif',br_name,v1_name,run_as_root=True)\n            # 将接口qvo桥接到br-int上\n            # 分别传入的参数为:br-int, qvo, port['id'], port的mac地址, instance-uuid\n            linux_net.create_ovs_vif_port(self.get_bridge_name(vif),\n                                          v2_name,iface_id,vif['address'],\n                                          instance['uuid'])\n\n    def _create_veth_pair(dev1_name, dev2_name):\n        # 将两个veth创建为一个peer-port\n        for dev in [dev1_name, dev2_name]:\n            delete_net_dev(dev)\n\n        utils.execute('ip', 'link', 'add', dev1_name, 'type', 'veth', 'peer',\n                      'name', dev2_name, run_as_root=True)\n        for dev in [dev1_name, dev2_name]:\n            utils.execute('ip', 'link', 'set', dev, 'up', run_as_root=True)\n            utils.execute('ip', 'link', 'set', dev, 'promisc', 'on',\n                          run_as_root=True)\n\n    def create_ovs_vif_port(bridge, dev, iface_id, mac, instance_id):\n        # 将接口qvo桥接到br-int上\n        # 分别传入的参数为:br-int, qvo, port['id'], port的mac地址, instance-uuid\n        utils.execute('ovs-vsctl', '--', '--may-exist', 'add-port',\n                      bridge, dev,\n                      '--', 'set', 'Interface', dev,\n                      'external-ids:iface-id=%s' % iface_id,\n                      'external-ids:iface-status=active',\n                      'external-ids:attached-mac=%s' % mac,\n                      'external-ids:vm-uuid=%s' % instance_id,\n                      run_as_root=True)\n\n\n\n由代码可以看出,至此,`<qbr>`--`(qvb)`--`(qvo)`--`<br-int>`就已经连接上了\n至于虚机是如何与`<qbr>`连上的,这个就是在virt内部做的了,执行以下的命令, 其中的source字段是你提供的`qbr`, `tap`则是virt生成的.\n\n    virsh domiflist <instance-id>\n\n到这里可以看出,从一个nova-compute到neutron到libvrit的各个网络信息的处理交互. 逻辑相对来说还是比较清晰的。\n\n终于整理完了之后，感觉变成了nova-compute的源码分析了。。。\n","slug":"blog/nova-vif-plug","published":1,"updated":"2016-07-17T11:39:33.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciuyae219000wyt7l49otcbzm","content":"<p>开门见山,最近在研究了一下Neutton的代码，看的过程中也将所了解的内容进行整理，整理内容如下:</p>\n<h2 id=\"Nova-compute如何发出请求\"><a href=\"#Nova-compute如何发出请求\" class=\"headerlink\" title=\"Nova-compute如何发出请求\"></a>Nova-compute如何发出请求</h2><p>当我执行nova boot的时候,nova-compute是如何执行接下来的操作呢,贴个代码说起来也太罗嗦了,还是直接用一个流程图来说明一下,然后再根据他图来说明一下就比较直观吧</p>\n<p>不过看图容易画图难啊,为了表示函数调用层级,我用数字放在方法前面,比如<code>0 methodA</code> -&gt; <code>1 methodB</code> -&gt; <code>2 methodC</code> -&gt; <code>0 methodD</code>. 就表明,<code>methodA</code>里面调用了<code>methodB</code>,<code>methodB</code>里面调用了<code>methodC</code>,然后<code>methodA</code>结束了,开始调用<code>methodD</code>.OK,上图:</p>\n<p><img src=\"/images/blog/neutron_interact_with_nova_compute.png\" alt=\"nova-compute-build-instance\"></p>\n<p>Openstack毕竟是各个不同的模块组合起来的,上面的流程是通用的, 不管你是用neutron-ovs,nova-network,neutron-ml2,还是libvirt,lxc,hyperv等, 不变的部分它就长这样了.</p>\n<p>既然通用的都说完了,那么接下来就到了如何去管理和创建网络资源了.这里我们就采用Neutron-OVS和libvirt来为例说明.</p>\n<p>图中其中两个标红的操作,一个<code>post_message_to_create_and_bind</code>和<code>plug</code>,就是接下来要说明的重点:Neutron-OVS返回port并绑定,libvirt如何响应并创建相应的网卡设备</p>\n<h2 id=\"Neutron-OVS返回port并绑定\"><a href=\"#Neutron-OVS返回port并绑定\" class=\"headerlink\" title=\"Neutron-OVS返回port并绑定\"></a>Neutron-OVS返回port并绑定</h2><pre><code># OVSNeutronPluginV2下的create_port,Neutron-server最后会调用这个方法\ndef create_port(self, context, port):\n    port[&apos;port&apos;][&apos;status&apos;] = q_const.PORT_STATUS_DOWN\n    port_data = port[&apos;port&apos;]\n    session = context.session\n    with session.begin(subtransactions=True):\n        self._ensure_default_security_group_on_port(context, port)\n        sgids = self._get_security_groups_on_port(context, port)\n        dhcp_opts = port[&apos;port&apos;].get(edo_ext.EXTRADHCPOPTS, [])\n\n        # 创建port\n        port = super(OVSNeutronPluginV2, self).create_port(context, port)\n\n        # 绑定port和host, 实际上是执行插入portbindingports表\n        self._process_portbindings_create_and_update(context, port_data, port)\n\n        # 绑定port和security, 实际上是执行插入securitygroupportbindings表\n        # 作用嘛,肯定就是用来执行port的securitygroup的操作啦\n        self._process_port_create_security_group(context, port, sgids)\n\n        # 执行插入extradhcpopts\n        # TODO? 这个作用我还不清楚\n        self._process_port_create_extra_dhcp_opts(context, port,\n                                                    dhcp_opts)\n        # 配置db,以允许该机器与外界进行通信,以后会生成iptables\n        # http://blog.csdn.net/matt_mao/article/details/19417451\n        port[addr_pair.ADDRESS_PAIRS] = (\n            self._process_create_allowed_address_pairs(\n                context, port,\n                port_data.get(addr_pair.ADDRESS_PAIRS)))\n    # 通知相关的agent执行security_group的更新,通常就是iptables\n    self.notify_security_groups_member_updated(context, port)\n    return port\n</code></pre><p>另外,由于OVSNeutronPluginV2的<strong>init</strong>方法中,存在<code>base_binding_dict</code>这么一个属性</p>\n<pre><code>class OVSNeutronPluginV2(...):\n   def __init__(self, configfile=None):\n        self.base_binding_dict = {\n            portbindings.VIF_TYPE: portbindings.VIF_TYPE_OVS,\n            portbindings.CAPABILITIES: {\n                portbindings.CAP_PORT_FILTER:\n                &apos;security-group&apos; in self.supported_extension_aliases}}\n</code></pre><p>在代码中可以看到,其初始化为<code>base_binding_dict[&#39;binding:vif_type&#39;]=&#39;ovs&#39;</code>, 在之后的一些代码中会被update到port中.这个执行<code>neutron port-show</code>中可以看到对应的值,同时,在最后的<code>libvirt</code>的plug方法中也是起着判断因素的.</p>\n<h2 id=\"libvirt如何响应并创建相应的网卡设备\"><a href=\"#libvirt如何响应并创建相应的网卡设备\" class=\"headerlink\" title=\"libvirt如何响应并创建相应的网卡设备\"></a>libvirt如何响应并创建相应的网卡设备</h2><p>这里就直接上代码,逻辑也不是很复杂.</p>\n<p><img src=\"/images/blog/libvirt_vif_plug.png\" alt=\"lib_vif_plug\"></p>\n<p>跟下plug的代码就知道了,其实根据配置文件来选择哪一个vif_driver的.在旧版的代码中,你还是有很多选择的,但是在新版的代码里面就只有<code>LibvirtGenericVIFDriver</code></p>\n<pre><code># 如此的配置在旧版的nova是可行的,不过代码中会有提示说已经废弃了,建议使用GenericVIFDriver\nlibvirt_vif_driver = nova.virt.libvirt.vif.LibvirtHybridOVSBridgeDriver\n# 所以还是使用如下的配置\nlibvirt_vif_driver = nova.virt.libvirt.vif.LibvirtGenericVIFDriver\n</code></pre><p>此处就以OVS的创建代码来说明了</p>\n<pre><code>def plug_ovs_hybrid(self,instance,vif):\n    iface_id = self.get_ovs_interfaceid(vif)\n    # 获取了br_name, 以qbr开头\n    br_name = self.get_br_name(vif[&apos;id&apos;])\n    # 获取了veth_pair_name, 以qvb,qvo开头\n    v1_name,v2_name = self.get_veth_pair_names(vif[&apos;id&apos;])\n\n    # 添加一个qbr 网桥\n    if not linux_net.device_exists(br_name):\n        utils.execute(&apos;brctl&apos;,&apos;addbr&apos;,br_name,run_as_root=True)\n        utils.execute(&apos;brctl&apos;,&apos;setfd&apos;,br_name,0,run_as_root=True)\n        utils.execute(&apos;brctl&apos;,&apos;stp&apos;,br_name,&apos;off&apos;,run_as_root=True)\n        utils.execute(&apos;tee&apos;,\n                      (&apos;/sys/class/net/%s/bridge/multicast_snooping&apos; %\n                       br_name),\n                      process_input=&apos;0&apos;,\n                      run_as_root=True,\n                      check_exit_code=[0,1])\n\n    # 创建添加一个qvo网桥\n    if not linux_net.device_exists(v2_name):\n        # 将两个veth创建为一个peer-port\n        linux_net._create_veth_pair(v1_name,v2_name)\n        utils.execute(&apos;ip&apos;,&apos;link&apos;,&apos;set&apos;,br_name,&apos;up&apos;,run_as_root=True)\n        # 将qvb接口添加到qbr上\n        utils.execute(&apos;brctl&apos;,&apos;addif&apos;,br_name,v1_name,run_as_root=True)\n        # 将接口qvo桥接到br-int上\n        # 分别传入的参数为:br-int, qvo, port[&apos;id&apos;], port的mac地址, instance-uuid\n        linux_net.create_ovs_vif_port(self.get_bridge_name(vif),\n                                      v2_name,iface_id,vif[&apos;address&apos;],\n                                      instance[&apos;uuid&apos;])\n\ndef _create_veth_pair(dev1_name, dev2_name):\n    # 将两个veth创建为一个peer-port\n    for dev in [dev1_name, dev2_name]:\n        delete_net_dev(dev)\n\n    utils.execute(&apos;ip&apos;, &apos;link&apos;, &apos;add&apos;, dev1_name, &apos;type&apos;, &apos;veth&apos;, &apos;peer&apos;,\n                  &apos;name&apos;, dev2_name, run_as_root=True)\n    for dev in [dev1_name, dev2_name]:\n        utils.execute(&apos;ip&apos;, &apos;link&apos;, &apos;set&apos;, dev, &apos;up&apos;, run_as_root=True)\n        utils.execute(&apos;ip&apos;, &apos;link&apos;, &apos;set&apos;, dev, &apos;promisc&apos;, &apos;on&apos;,\n                      run_as_root=True)\n\ndef create_ovs_vif_port(bridge, dev, iface_id, mac, instance_id):\n    # 将接口qvo桥接到br-int上\n    # 分别传入的参数为:br-int, qvo, port[&apos;id&apos;], port的mac地址, instance-uuid\n    utils.execute(&apos;ovs-vsctl&apos;, &apos;--&apos;, &apos;--may-exist&apos;, &apos;add-port&apos;,\n                  bridge, dev,\n                  &apos;--&apos;, &apos;set&apos;, &apos;Interface&apos;, dev,\n                  &apos;external-ids:iface-id=%s&apos; % iface_id,\n                  &apos;external-ids:iface-status=active&apos;,\n                  &apos;external-ids:attached-mac=%s&apos; % mac,\n                  &apos;external-ids:vm-uuid=%s&apos; % instance_id,\n                  run_as_root=True)\n</code></pre><p>由代码可以看出,至此,<code>&lt;qbr&gt;</code>–<code>(qvb)</code>–<code>(qvo)</code>–<code>&lt;br-int&gt;</code>就已经连接上了<br>至于虚机是如何与<code>&lt;qbr&gt;</code>连上的,这个就是在virt内部做的了,执行以下的命令, 其中的source字段是你提供的<code>qbr</code>, <code>tap</code>则是virt生成的.</p>\n<pre><code>virsh domiflist &lt;instance-id&gt;\n</code></pre><p>到这里可以看出,从一个nova-compute到neutron到libvrit的各个网络信息的处理交互. 逻辑相对来说还是比较清晰的。</p>\n<p>终于整理完了之后，感觉变成了nova-compute的源码分析了。。。</p>\n","excerpt":"","more":"<p>开门见山,最近在研究了一下Neutton的代码，看的过程中也将所了解的内容进行整理，整理内容如下:</p>\n<h2 id=\"Nova-compute如何发出请求\"><a href=\"#Nova-compute如何发出请求\" class=\"headerlink\" title=\"Nova-compute如何发出请求\"></a>Nova-compute如何发出请求</h2><p>当我执行nova boot的时候,nova-compute是如何执行接下来的操作呢,贴个代码说起来也太罗嗦了,还是直接用一个流程图来说明一下,然后再根据他图来说明一下就比较直观吧</p>\n<p>不过看图容易画图难啊,为了表示函数调用层级,我用数字放在方法前面,比如<code>0 methodA</code> -&gt; <code>1 methodB</code> -&gt; <code>2 methodC</code> -&gt; <code>0 methodD</code>. 就表明,<code>methodA</code>里面调用了<code>methodB</code>,<code>methodB</code>里面调用了<code>methodC</code>,然后<code>methodA</code>结束了,开始调用<code>methodD</code>.OK,上图:</p>\n<p><img src=\"/images/blog/neutron_interact_with_nova_compute.png\" alt=\"nova-compute-build-instance\" /></p>\n<p>Openstack毕竟是各个不同的模块组合起来的,上面的流程是通用的, 不管你是用neutron-ovs,nova-network,neutron-ml2,还是libvirt,lxc,hyperv等, 不变的部分它就长这样了.</p>\n<p>既然通用的都说完了,那么接下来就到了如何去管理和创建网络资源了.这里我们就采用Neutron-OVS和libvirt来为例说明.</p>\n<p>图中其中两个标红的操作,一个<code>post_message_to_create_and_bind</code>和<code>plug</code>,就是接下来要说明的重点:Neutron-OVS返回port并绑定,libvirt如何响应并创建相应的网卡设备</p>\n<h2 id=\"Neutron-OVS返回port并绑定\"><a href=\"#Neutron-OVS返回port并绑定\" class=\"headerlink\" title=\"Neutron-OVS返回port并绑定\"></a>Neutron-OVS返回port并绑定</h2><pre><code># OVSNeutronPluginV2下的create_port,Neutron-server最后会调用这个方法\ndef create_port(self, context, port):\n    port[&apos;port&apos;][&apos;status&apos;] = q_const.PORT_STATUS_DOWN\n    port_data = port[&apos;port&apos;]\n    session = context.session\n    with session.begin(subtransactions=True):\n        self._ensure_default_security_group_on_port(context, port)\n        sgids = self._get_security_groups_on_port(context, port)\n        dhcp_opts = port[&apos;port&apos;].get(edo_ext.EXTRADHCPOPTS, [])\n\n        # 创建port\n        port = super(OVSNeutronPluginV2, self).create_port(context, port)\n\n        # 绑定port和host, 实际上是执行插入portbindingports表\n        self._process_portbindings_create_and_update(context, port_data, port)\n\n        # 绑定port和security, 实际上是执行插入securitygroupportbindings表\n        # 作用嘛,肯定就是用来执行port的securitygroup的操作啦\n        self._process_port_create_security_group(context, port, sgids)\n\n        # 执行插入extradhcpopts\n        # TODO? 这个作用我还不清楚\n        self._process_port_create_extra_dhcp_opts(context, port,\n                                                    dhcp_opts)\n        # 配置db,以允许该机器与外界进行通信,以后会生成iptables\n        # http://blog.csdn.net/matt_mao/article/details/19417451\n        port[addr_pair.ADDRESS_PAIRS] = (\n            self._process_create_allowed_address_pairs(\n                context, port,\n                port_data.get(addr_pair.ADDRESS_PAIRS)))\n    # 通知相关的agent执行security_group的更新,通常就是iptables\n    self.notify_security_groups_member_updated(context, port)\n    return port\n</code></pre><p>另外,由于OVSNeutronPluginV2的<strong>init</strong>方法中,存在<code>base_binding_dict</code>这么一个属性</p>\n<pre><code>class OVSNeutronPluginV2(...):\n   def __init__(self, configfile=None):\n        self.base_binding_dict = {\n            portbindings.VIF_TYPE: portbindings.VIF_TYPE_OVS,\n            portbindings.CAPABILITIES: {\n                portbindings.CAP_PORT_FILTER:\n                &apos;security-group&apos; in self.supported_extension_aliases}}\n</code></pre><p>在代码中可以看到,其初始化为<code>base_binding_dict[&#39;binding:vif_type&#39;]=&#39;ovs&#39;</code>, 在之后的一些代码中会被update到port中.这个执行<code>neutron port-show</code>中可以看到对应的值,同时,在最后的<code>libvirt</code>的plug方法中也是起着判断因素的.</p>\n<h2 id=\"libvirt如何响应并创建相应的网卡设备\"><a href=\"#libvirt如何响应并创建相应的网卡设备\" class=\"headerlink\" title=\"libvirt如何响应并创建相应的网卡设备\"></a>libvirt如何响应并创建相应的网卡设备</h2><p>这里就直接上代码,逻辑也不是很复杂.</p>\n<p><img src=\"/images/blog/libvirt_vif_plug.png\" alt=\"lib_vif_plug\" /></p>\n<p>跟下plug的代码就知道了,其实根据配置文件来选择哪一个vif_driver的.在旧版的代码中,你还是有很多选择的,但是在新版的代码里面就只有<code>LibvirtGenericVIFDriver</code></p>\n<pre><code># 如此的配置在旧版的nova是可行的,不过代码中会有提示说已经废弃了,建议使用GenericVIFDriver\nlibvirt_vif_driver = nova.virt.libvirt.vif.LibvirtHybridOVSBridgeDriver\n# 所以还是使用如下的配置\nlibvirt_vif_driver = nova.virt.libvirt.vif.LibvirtGenericVIFDriver\n</code></pre><p>此处就以OVS的创建代码来说明了</p>\n<pre><code>def plug_ovs_hybrid(self,instance,vif):\n    iface_id = self.get_ovs_interfaceid(vif)\n    # 获取了br_name, 以qbr开头\n    br_name = self.get_br_name(vif[&apos;id&apos;])\n    # 获取了veth_pair_name, 以qvb,qvo开头\n    v1_name,v2_name = self.get_veth_pair_names(vif[&apos;id&apos;])\n\n    # 添加一个qbr 网桥\n    if not linux_net.device_exists(br_name):\n        utils.execute(&apos;brctl&apos;,&apos;addbr&apos;,br_name,run_as_root=True)\n        utils.execute(&apos;brctl&apos;,&apos;setfd&apos;,br_name,0,run_as_root=True)\n        utils.execute(&apos;brctl&apos;,&apos;stp&apos;,br_name,&apos;off&apos;,run_as_root=True)\n        utils.execute(&apos;tee&apos;,\n                      (&apos;/sys/class/net/%s/bridge/multicast_snooping&apos; %\n                       br_name),\n                      process_input=&apos;0&apos;,\n                      run_as_root=True,\n                      check_exit_code=[0,1])\n\n    # 创建添加一个qvo网桥\n    if not linux_net.device_exists(v2_name):\n        # 将两个veth创建为一个peer-port\n        linux_net._create_veth_pair(v1_name,v2_name)\n        utils.execute(&apos;ip&apos;,&apos;link&apos;,&apos;set&apos;,br_name,&apos;up&apos;,run_as_root=True)\n        # 将qvb接口添加到qbr上\n        utils.execute(&apos;brctl&apos;,&apos;addif&apos;,br_name,v1_name,run_as_root=True)\n        # 将接口qvo桥接到br-int上\n        # 分别传入的参数为:br-int, qvo, port[&apos;id&apos;], port的mac地址, instance-uuid\n        linux_net.create_ovs_vif_port(self.get_bridge_name(vif),\n                                      v2_name,iface_id,vif[&apos;address&apos;],\n                                      instance[&apos;uuid&apos;])\n\ndef _create_veth_pair(dev1_name, dev2_name):\n    # 将两个veth创建为一个peer-port\n    for dev in [dev1_name, dev2_name]:\n        delete_net_dev(dev)\n\n    utils.execute(&apos;ip&apos;, &apos;link&apos;, &apos;add&apos;, dev1_name, &apos;type&apos;, &apos;veth&apos;, &apos;peer&apos;,\n                  &apos;name&apos;, dev2_name, run_as_root=True)\n    for dev in [dev1_name, dev2_name]:\n        utils.execute(&apos;ip&apos;, &apos;link&apos;, &apos;set&apos;, dev, &apos;up&apos;, run_as_root=True)\n        utils.execute(&apos;ip&apos;, &apos;link&apos;, &apos;set&apos;, dev, &apos;promisc&apos;, &apos;on&apos;,\n                      run_as_root=True)\n\ndef create_ovs_vif_port(bridge, dev, iface_id, mac, instance_id):\n    # 将接口qvo桥接到br-int上\n    # 分别传入的参数为:br-int, qvo, port[&apos;id&apos;], port的mac地址, instance-uuid\n    utils.execute(&apos;ovs-vsctl&apos;, &apos;--&apos;, &apos;--may-exist&apos;, &apos;add-port&apos;,\n                  bridge, dev,\n                  &apos;--&apos;, &apos;set&apos;, &apos;Interface&apos;, dev,\n                  &apos;external-ids:iface-id=%s&apos; % iface_id,\n                  &apos;external-ids:iface-status=active&apos;,\n                  &apos;external-ids:attached-mac=%s&apos; % mac,\n                  &apos;external-ids:vm-uuid=%s&apos; % instance_id,\n                  run_as_root=True)\n</code></pre><p>由代码可以看出,至此,<code>&lt;qbr&gt;</code>–<code>(qvb)</code>–<code>(qvo)</code>–<code>&lt;br-int&gt;</code>就已经连接上了<br>至于虚机是如何与<code>&lt;qbr&gt;</code>连上的,这个就是在virt内部做的了,执行以下的命令, 其中的source字段是你提供的<code>qbr</code>, <code>tap</code>则是virt生成的.</p>\n<pre><code>virsh domiflist &lt;instance-id&gt;\n</code></pre><p>到这里可以看出,从一个nova-compute到neutron到libvrit的各个网络信息的处理交互. 逻辑相对来说还是比较清晰的。</p>\n<p>终于整理完了之后，感觉变成了nova-compute的源码分析了。。。</p>\n"},{"title":"Designate配置及部署","date":"2015-06-09T16:00:00.000Z","_content":"\nDesignate目前还在开发过程中, 且文档资料比较匮乏, 此处的介绍的内容就相对比较片面和不是那么严整了, 若有相应的错误,也请包涵并及时指正。\n\n## Designate的工作原理\n此处有一张图,用来描述designate的运行流程:\n\n<img style=\"width:100%;\" src='/images/blog/Designate-MiniDNS-Pools.gif'></img>\n> gif动态图片, 参考[Designate-MiniDNS-Pools](https://wiki.openstack.org/w/images/a/a7/Designate-MiniDNS-Pools.gif)\n\n0. 用户请求designate-api,添加record或者domain\n0. designate-api发送请求至mq中\n0. designate-central接收到mq请求,写入db,同时通过mq触发pool_manager进行更新操作\n0. pool_manager通过rndc(addzone/delzone/notifyzone)三个操作来通知pool_targets中定义的bind来进行操作\n0. bind使用axfr来请求同步mdns\n0. mdns从数据库中读取相应的domain信息来响应axfr请求\n\n## Designate的安装\n\n此处只描述和介绍其中一种可用的部署模式(其应该具有多种部署模式, 此处就没有深究了)\n\n架构如图(DB,MQ略):\n\n<img style=\"width:100%;\" src='/images/blog/designate_flow.png'></img>\n\n> 按照目前个人的理解, 在kilo版本种, 一个pool_manager进程就管理一个pool, pool中可以指定多个dns-server. 但不一定准确\n\n安装环境:\n\n- 系统为`Ubuntu 12.04`\n- `designate-api`, `designate-central`, `designate-pool-manager`, `designate-mdns`部署在 `172.16.2.100`\n- `bind`分别部署在`172.16.2.101`, `172.16.2.102`, `172.16.2.103`中\n- 测试domain为`lnmpy.com`\n- 使用kilo版本的designate\n\n\n### 配置bind & rndc(只以安装Bind-A为例, 其余类推)\n\n安装 bind\n\n    apt-get install bind9 -y\n\n\n修改`/etc/bind/named.conf.options`内容为:\n\n    options {\n            directory \"/var/cache/bind\";\n            dnssec-validation auto;\n            auth-nxdomain no;\n            allow-new-zones yes;  # 此配置必须加上, 其允许rndc进行zone的相关操作\n            listen-on { <your-ip>; };  # 表面bind的53端口是监听在这个网络中\n            listen-on-v6 { any; };\n    };\n\n    controls {\n            inet 172.16.2.101 port 953\n                    allow { 172.16.2.100; } keys { \"rndc-key\"; };\n    };\n\n    # 以下内容来自: rndc-confgen\n    key \"rndc-key\" {\n            algorithm hmac-md5;\n            secret \"jmED6H54nY+DD/SRJG6Okw==\";\n    };\n\n\n修改`/etc/bind/rndc.key`内容为(secret值保持与named.conf.options中一致):\n\n    key \"rndc-key\" {\n            algorithm hmac-md5;\n            secret \"jmED6H54nY+DD/SRJG6Okw==\";\n    };\n\n\n在`172.16.2.100`中调用以下命令进行测试:\n\n\n    rndc -s 172.16.2.101 -p 953 -k /etc/bind/rndc.key addzone lnmpy.com '{ type slave;masters { 172.16.2.100 port 5354;}; file \"slave.lnmpy.com.ba4dbff3-a32f-4f54-bb7c-68710f7935a5\"; };'\n\n\n如果没有报错且`172.16.2.101`机器中的`/var/cache/bind/`出现了`slave.lnmpy.com.ba4dbff3-a32f-4f54-bb7c-68710f7935a5`, 则表明`bind`配置成功.\n\n\n### 配置Designate(以全部安装在同一个机器上为例)\n\n安装MySql,RabbitMq, 配置从略:\n\n    apt-get install -y rabbitmq-server mysql-server python-dev libmysqlclient-dev\n\n    git clone git://github.com/openstack/designate designate\n    cd designate\n    git checkout stable/kilo # checkout出指定版本\n    pip install virtualenv\n    virtualenv .venv\n    source .venv/bin/activate\n    sed -i 's/oslo.config>=1.9.3,<1.10.0  # Apache-2.0/oslo.config>=1.9.3,<=1.11.0  #Apache-2.0/' requirements.txt\n    pip install -r requirements.txt -i http://pypi.douban.com/simple  # 视网络情况可能会有超时失败多次,重复运行一次就行\n    while [ $? != 0 ]\n    do\n    pip install -r requirements.txt -i http://pypi.douban.com/simple\n    done\n    pip install mysql-python functools32 -i http://pypi.douban.com/simple\n    python setup.py install\n    cp -R etc/designate /etc/\n    ls /etc/designate/*.sample | while read f; do sudo cp $f $(echo $f | sed \"s/.sample$//g\"); done\n    mkdir /var/log/designate/ /var/cache/designate\n\n\n修改`/etc/designate/designate.conf`\n\n    [DEFAULT]\n    verbose = True\n    debug = True\n    state_path = /var/lib/designate\n    logdir = /var/log/designate\n    notification_driver = messaging\n    notification_topics = notifications\n\n    # 默认的quota值， 按需设置\n    quota_domains = 100000\n    quota_domain_recordsets = 100000\n    quota_domain_records = 100000\n    quota_recordset_records = 100000\n\n    [oslo_messaging_rabbit]\n    rabbit_userid = guest # 默认不配置RabbitMq的话是guest, 建议修改\n    rabbit_password = guest\n    rabbit_virtual_host = /\n    rabbit_use_ssl = False\n    rabbit_hosts = 127.0.0.1:5672\n    [service:central]\n    [service:api]\n    auth_strategy = noauth # 此处为了便利, 关闭了auth认证\n    enable_api_v1 = True\n    enabled_extensions_v1 = sync, quotas\n    enable_api_v2 = True\n    [service:mdns]\n    threads = 1000\n    host = 0.0.0.0\n    port = 5354\n    tcp_backlog = 100\n    tcp_recv_timeout = 0.5\n    query_enforce_tsig = False\n    [service:pool_manager]\n    pool_id = 794ccc2c-d751-44fe-b57f-8894c9f5c842\n    [pool_manager_cache:sqlalchemy]\n    connection = mysql://root:r00t@127.0.0.1/designate_pool_manager\n    [storage:sqlalchemy]\n    connection = mysql://root:r00t@127.0.0.1:3306/designate\n    connection_debug = 0\n    [pool:794ccc2c-d751-44fe-b57f-8894c9f5c842]\n    nameservers = 0f66b842-96c2-4189-93fc-1dc95a08b012, 0f66b842-96c2-4189-93fc-1dc95a08b013\n    targets = f26e0b32-736f-4f0a-831b-039a415c481e, f26e0b32-736f-4f0a-831b-039a415c481f\n    [pool_nameserver:0f66b842-96c2-4189-93fc-1dc95a08b012]\n    port = 53\n    host = 172.16.2.101\n    [pool_target:f26e0b32-736f-4f0a-831b-039a415c481e]\n    options = rndc_host: 172.16.2.101, rndc_port: 953, rndc_key_file: /etc/bind/rndc.key\n    masters = 172.16.2.100:5354\n    type = bind9\n    port = 53\n    host = 172.16.2.101\n    [pool_nameserver:0f66b842-96c2-4189-93fc-1dc95a08b013]\n    port = 53\n    host = 172.16.2.102\n    [pool_target:f26e0b32-736f-4f0a-831b-039a415c481f]\n    options = rndc_host: 172.16.2.102, rndc_port: 953, rndc_key_file: /etc/bind/rndc.key\n    masters = 172.16.2.100:5354\n    type = bind9\n    port = 53\n    host = 172.16.2.102\n    [pool_nameserver:0f66b842-96c2-4189-93fc-1dc95a08b014]\n    port = 53\n    host = 172.16.2.103\n    [pool_target:f26e0b32-736f-4f0a-831b-039a415c4820]\n    options = rndc_host: 172.16.2.103, rndc_port: 953, rndc_key_file: /etc/bind/rndc.key\n    masters = 172.16.2.100:5354\n    type = bind9\n    port = 53\n    host = 172.16.2.103\n\n初始化数据库\n\n    mysql -uroot -pr00t  -e 'drop database if exists designate; create database designate;'\n    mysql -uroot -pr00t  -e 'drop database if exists designate_pool_manager; create database designate_pool_manager;'\n\n    designate-manage database sync\n    designate-manage pool-manager-cache sync\n\n启动Designate\n\n    # 在virtualenv中启动下面四个组件(无顺序要求)\n    designate-central\n    designate-api\n    designate-pool-manager\n    designate-mdns\n\n\n如无报错,则表面正常启动, 再将其包装成upstart即可\n\n## Designate的API\n\n此处使用了[httpie](https://github.com/jakubroztocil/httpie)作为客户端,也可以试用postmane或者curl\n\n    http 127.0.0.1:9001/v1/servers name=ns.lnmpy.com.\n\n    http 127.0.0.1:9001/v1/domains name=lnmpy.com. ttl:=3600 email=elvis@lnmpy.com\n\n    http 127.0.0.1:9001/v1/domains/{domain_id}/records name=www.lnmpy.com. type=A data=192.168.1.101\n    http 127.0.0.1:9001/v1/domains/{domain_id}/records name=mail.lnmpy.com. type=A data=192.168.1.102\n\n    dig @172.16.2.101 www.lnmpy.com\n    dig @172.16.2.102 www.lnmpy.com\n    dig @172.16.2.103 www.lnmpy.com\n\n    # 如果要创建PTR反向解析的话， 需要再单独创建一个domain\n    # 注：反向解析域必须以 in-addr.arpa. 结尾， designate只支持在 in-addr.arpa.的域中添加PTR记录\n    http 127.0.0.1:9001/v1/domains name=1.168.192.in-addr.arpa. ttl:=3600 email=elvis@lnmpy.com\n\n    http 127.0.0.1:9001/v1/domains/{ptr_domain_id}/records name=102.1.168.192.in-addr.arpa. type=PTR data=mail.lnmpy.com.\n\n    dig @172.16.2.101 -x 192.168.1.101\n    dig @172.16.2.102 -x 192.168.1.101\n    dig @172.16.2.103 -x 192.168.1.101\n\n\n可以看到,通过dig测试,返回的结果表面3台bind-server均可(包括反向解析)解析www.lnmpy.com.\n\n## Designate HA\n\nMQ, DB的HA不必说了。\n\n- `desigante-api`只会涉及到读取DB和rpc调用`designate-central`, 所以使用`nginx`在多台机器上部署,都没有问题\n- `desigante-central`会被`desigante-api`rpc调用,但是有oslo.concurrency的存在,也只会有一个被调用到, 所以在不同的机器中部署,也是没有问题的。其被调用后会发送一条mq消息给`designate-pool-manager`\n- 由于mq的消息是独占性的,`desigante-pool-manager`之间的消息自然也不会发生抢占,部署多个自然也是允许的\n- `desigante-mdns`逻辑上来讲也是只读取db并且响应`axfr`请求, 只要pool中的bind能够实现`multi-master`即可\n\n修改`pool_target`内容为:\n\n    [pool_target:f26e0b32-736f-4f0a-831b-039a415c4820]\n    ...\n    masters = 172.16.2.100:5354, 172.16.2.200:5354   # masters列表\n    ...\n\n\n那么`/var/cache/bind/3bf305731dd26307.nzf`中对应的zone就变成了:\n\n\n    ...\n    zone lnmpy.com { type slave; masters { 172.16.2.100 port 5354; 172.16.2.200 port 5354;}; file \"slave.lnmpy.com.60987de9-97a1-4ecf-a124-3f148b21af78\"; };\n    ...\n\n\n这样,当其中一个mdns down了之后,bind依然能够sync另一个mdns\n\n\n## 参考\n0. [Designate Developer Docs](http://docs.openstack.org/developer/designate/)\n0. [Installing Juno on Ubuntu](http://docs.openstack.org/developer/designate/install/ubuntu-juno.html)\n0. [Designate Rest API](http://docs.openstack.org/developer/designate/rest.html)\n0. [designate-overview-openstack](http://www.slideshare.net/grahamhayes/designate-overview-openstack-summit-paris-presentation)\n0. [Designate-MiniDNS-Pools](https://wiki.openstack.org/w/images/a/a7/Designate-MiniDNS-Pools.gif)\n0. [DNS视图及bind中rndc的使用](http://wubinary.blog.51cto.com/8570032/1378363)\n","source":"_posts/blog/openstack-designate.md","raw":"---\ntitle:  Designate配置及部署\ncategories: blog\ndate: 2015-06-10\n---\n\nDesignate目前还在开发过程中, 且文档资料比较匮乏, 此处的介绍的内容就相对比较片面和不是那么严整了, 若有相应的错误,也请包涵并及时指正。\n\n## Designate的工作原理\n此处有一张图,用来描述designate的运行流程:\n\n<img style=\"width:100%;\" src='/images/blog/Designate-MiniDNS-Pools.gif'></img>\n> gif动态图片, 参考[Designate-MiniDNS-Pools](https://wiki.openstack.org/w/images/a/a7/Designate-MiniDNS-Pools.gif)\n\n0. 用户请求designate-api,添加record或者domain\n0. designate-api发送请求至mq中\n0. designate-central接收到mq请求,写入db,同时通过mq触发pool_manager进行更新操作\n0. pool_manager通过rndc(addzone/delzone/notifyzone)三个操作来通知pool_targets中定义的bind来进行操作\n0. bind使用axfr来请求同步mdns\n0. mdns从数据库中读取相应的domain信息来响应axfr请求\n\n## Designate的安装\n\n此处只描述和介绍其中一种可用的部署模式(其应该具有多种部署模式, 此处就没有深究了)\n\n架构如图(DB,MQ略):\n\n<img style=\"width:100%;\" src='/images/blog/designate_flow.png'></img>\n\n> 按照目前个人的理解, 在kilo版本种, 一个pool_manager进程就管理一个pool, pool中可以指定多个dns-server. 但不一定准确\n\n安装环境:\n\n- 系统为`Ubuntu 12.04`\n- `designate-api`, `designate-central`, `designate-pool-manager`, `designate-mdns`部署在 `172.16.2.100`\n- `bind`分别部署在`172.16.2.101`, `172.16.2.102`, `172.16.2.103`中\n- 测试domain为`lnmpy.com`\n- 使用kilo版本的designate\n\n\n### 配置bind & rndc(只以安装Bind-A为例, 其余类推)\n\n安装 bind\n\n    apt-get install bind9 -y\n\n\n修改`/etc/bind/named.conf.options`内容为:\n\n    options {\n            directory \"/var/cache/bind\";\n            dnssec-validation auto;\n            auth-nxdomain no;\n            allow-new-zones yes;  # 此配置必须加上, 其允许rndc进行zone的相关操作\n            listen-on { <your-ip>; };  # 表面bind的53端口是监听在这个网络中\n            listen-on-v6 { any; };\n    };\n\n    controls {\n            inet 172.16.2.101 port 953\n                    allow { 172.16.2.100; } keys { \"rndc-key\"; };\n    };\n\n    # 以下内容来自: rndc-confgen\n    key \"rndc-key\" {\n            algorithm hmac-md5;\n            secret \"jmED6H54nY+DD/SRJG6Okw==\";\n    };\n\n\n修改`/etc/bind/rndc.key`内容为(secret值保持与named.conf.options中一致):\n\n    key \"rndc-key\" {\n            algorithm hmac-md5;\n            secret \"jmED6H54nY+DD/SRJG6Okw==\";\n    };\n\n\n在`172.16.2.100`中调用以下命令进行测试:\n\n\n    rndc -s 172.16.2.101 -p 953 -k /etc/bind/rndc.key addzone lnmpy.com '{ type slave;masters { 172.16.2.100 port 5354;}; file \"slave.lnmpy.com.ba4dbff3-a32f-4f54-bb7c-68710f7935a5\"; };'\n\n\n如果没有报错且`172.16.2.101`机器中的`/var/cache/bind/`出现了`slave.lnmpy.com.ba4dbff3-a32f-4f54-bb7c-68710f7935a5`, 则表明`bind`配置成功.\n\n\n### 配置Designate(以全部安装在同一个机器上为例)\n\n安装MySql,RabbitMq, 配置从略:\n\n    apt-get install -y rabbitmq-server mysql-server python-dev libmysqlclient-dev\n\n    git clone git://github.com/openstack/designate designate\n    cd designate\n    git checkout stable/kilo # checkout出指定版本\n    pip install virtualenv\n    virtualenv .venv\n    source .venv/bin/activate\n    sed -i 's/oslo.config>=1.9.3,<1.10.0  # Apache-2.0/oslo.config>=1.9.3,<=1.11.0  #Apache-2.0/' requirements.txt\n    pip install -r requirements.txt -i http://pypi.douban.com/simple  # 视网络情况可能会有超时失败多次,重复运行一次就行\n    while [ $? != 0 ]\n    do\n    pip install -r requirements.txt -i http://pypi.douban.com/simple\n    done\n    pip install mysql-python functools32 -i http://pypi.douban.com/simple\n    python setup.py install\n    cp -R etc/designate /etc/\n    ls /etc/designate/*.sample | while read f; do sudo cp $f $(echo $f | sed \"s/.sample$//g\"); done\n    mkdir /var/log/designate/ /var/cache/designate\n\n\n修改`/etc/designate/designate.conf`\n\n    [DEFAULT]\n    verbose = True\n    debug = True\n    state_path = /var/lib/designate\n    logdir = /var/log/designate\n    notification_driver = messaging\n    notification_topics = notifications\n\n    # 默认的quota值， 按需设置\n    quota_domains = 100000\n    quota_domain_recordsets = 100000\n    quota_domain_records = 100000\n    quota_recordset_records = 100000\n\n    [oslo_messaging_rabbit]\n    rabbit_userid = guest # 默认不配置RabbitMq的话是guest, 建议修改\n    rabbit_password = guest\n    rabbit_virtual_host = /\n    rabbit_use_ssl = False\n    rabbit_hosts = 127.0.0.1:5672\n    [service:central]\n    [service:api]\n    auth_strategy = noauth # 此处为了便利, 关闭了auth认证\n    enable_api_v1 = True\n    enabled_extensions_v1 = sync, quotas\n    enable_api_v2 = True\n    [service:mdns]\n    threads = 1000\n    host = 0.0.0.0\n    port = 5354\n    tcp_backlog = 100\n    tcp_recv_timeout = 0.5\n    query_enforce_tsig = False\n    [service:pool_manager]\n    pool_id = 794ccc2c-d751-44fe-b57f-8894c9f5c842\n    [pool_manager_cache:sqlalchemy]\n    connection = mysql://root:r00t@127.0.0.1/designate_pool_manager\n    [storage:sqlalchemy]\n    connection = mysql://root:r00t@127.0.0.1:3306/designate\n    connection_debug = 0\n    [pool:794ccc2c-d751-44fe-b57f-8894c9f5c842]\n    nameservers = 0f66b842-96c2-4189-93fc-1dc95a08b012, 0f66b842-96c2-4189-93fc-1dc95a08b013\n    targets = f26e0b32-736f-4f0a-831b-039a415c481e, f26e0b32-736f-4f0a-831b-039a415c481f\n    [pool_nameserver:0f66b842-96c2-4189-93fc-1dc95a08b012]\n    port = 53\n    host = 172.16.2.101\n    [pool_target:f26e0b32-736f-4f0a-831b-039a415c481e]\n    options = rndc_host: 172.16.2.101, rndc_port: 953, rndc_key_file: /etc/bind/rndc.key\n    masters = 172.16.2.100:5354\n    type = bind9\n    port = 53\n    host = 172.16.2.101\n    [pool_nameserver:0f66b842-96c2-4189-93fc-1dc95a08b013]\n    port = 53\n    host = 172.16.2.102\n    [pool_target:f26e0b32-736f-4f0a-831b-039a415c481f]\n    options = rndc_host: 172.16.2.102, rndc_port: 953, rndc_key_file: /etc/bind/rndc.key\n    masters = 172.16.2.100:5354\n    type = bind9\n    port = 53\n    host = 172.16.2.102\n    [pool_nameserver:0f66b842-96c2-4189-93fc-1dc95a08b014]\n    port = 53\n    host = 172.16.2.103\n    [pool_target:f26e0b32-736f-4f0a-831b-039a415c4820]\n    options = rndc_host: 172.16.2.103, rndc_port: 953, rndc_key_file: /etc/bind/rndc.key\n    masters = 172.16.2.100:5354\n    type = bind9\n    port = 53\n    host = 172.16.2.103\n\n初始化数据库\n\n    mysql -uroot -pr00t  -e 'drop database if exists designate; create database designate;'\n    mysql -uroot -pr00t  -e 'drop database if exists designate_pool_manager; create database designate_pool_manager;'\n\n    designate-manage database sync\n    designate-manage pool-manager-cache sync\n\n启动Designate\n\n    # 在virtualenv中启动下面四个组件(无顺序要求)\n    designate-central\n    designate-api\n    designate-pool-manager\n    designate-mdns\n\n\n如无报错,则表面正常启动, 再将其包装成upstart即可\n\n## Designate的API\n\n此处使用了[httpie](https://github.com/jakubroztocil/httpie)作为客户端,也可以试用postmane或者curl\n\n    http 127.0.0.1:9001/v1/servers name=ns.lnmpy.com.\n\n    http 127.0.0.1:9001/v1/domains name=lnmpy.com. ttl:=3600 email=elvis@lnmpy.com\n\n    http 127.0.0.1:9001/v1/domains/{domain_id}/records name=www.lnmpy.com. type=A data=192.168.1.101\n    http 127.0.0.1:9001/v1/domains/{domain_id}/records name=mail.lnmpy.com. type=A data=192.168.1.102\n\n    dig @172.16.2.101 www.lnmpy.com\n    dig @172.16.2.102 www.lnmpy.com\n    dig @172.16.2.103 www.lnmpy.com\n\n    # 如果要创建PTR反向解析的话， 需要再单独创建一个domain\n    # 注：反向解析域必须以 in-addr.arpa. 结尾， designate只支持在 in-addr.arpa.的域中添加PTR记录\n    http 127.0.0.1:9001/v1/domains name=1.168.192.in-addr.arpa. ttl:=3600 email=elvis@lnmpy.com\n\n    http 127.0.0.1:9001/v1/domains/{ptr_domain_id}/records name=102.1.168.192.in-addr.arpa. type=PTR data=mail.lnmpy.com.\n\n    dig @172.16.2.101 -x 192.168.1.101\n    dig @172.16.2.102 -x 192.168.1.101\n    dig @172.16.2.103 -x 192.168.1.101\n\n\n可以看到,通过dig测试,返回的结果表面3台bind-server均可(包括反向解析)解析www.lnmpy.com.\n\n## Designate HA\n\nMQ, DB的HA不必说了。\n\n- `desigante-api`只会涉及到读取DB和rpc调用`designate-central`, 所以使用`nginx`在多台机器上部署,都没有问题\n- `desigante-central`会被`desigante-api`rpc调用,但是有oslo.concurrency的存在,也只会有一个被调用到, 所以在不同的机器中部署,也是没有问题的。其被调用后会发送一条mq消息给`designate-pool-manager`\n- 由于mq的消息是独占性的,`desigante-pool-manager`之间的消息自然也不会发生抢占,部署多个自然也是允许的\n- `desigante-mdns`逻辑上来讲也是只读取db并且响应`axfr`请求, 只要pool中的bind能够实现`multi-master`即可\n\n修改`pool_target`内容为:\n\n    [pool_target:f26e0b32-736f-4f0a-831b-039a415c4820]\n    ...\n    masters = 172.16.2.100:5354, 172.16.2.200:5354   # masters列表\n    ...\n\n\n那么`/var/cache/bind/3bf305731dd26307.nzf`中对应的zone就变成了:\n\n\n    ...\n    zone lnmpy.com { type slave; masters { 172.16.2.100 port 5354; 172.16.2.200 port 5354;}; file \"slave.lnmpy.com.60987de9-97a1-4ecf-a124-3f148b21af78\"; };\n    ...\n\n\n这样,当其中一个mdns down了之后,bind依然能够sync另一个mdns\n\n\n## 参考\n0. [Designate Developer Docs](http://docs.openstack.org/developer/designate/)\n0. [Installing Juno on Ubuntu](http://docs.openstack.org/developer/designate/install/ubuntu-juno.html)\n0. [Designate Rest API](http://docs.openstack.org/developer/designate/rest.html)\n0. [designate-overview-openstack](http://www.slideshare.net/grahamhayes/designate-overview-openstack-summit-paris-presentation)\n0. [Designate-MiniDNS-Pools](https://wiki.openstack.org/w/images/a/a7/Designate-MiniDNS-Pools.gif)\n0. [DNS视图及bind中rndc的使用](http://wubinary.blog.51cto.com/8570032/1378363)\n","slug":"blog/openstack-designate","published":1,"updated":"2016-07-17T11:34:26.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciuyae21b000zyt7lc9htmefi","content":"<p>Designate目前还在开发过程中, 且文档资料比较匮乏, 此处的介绍的内容就相对比较片面和不是那么严整了, 若有相应的错误,也请包涵并及时指正。</p>\n<h2 id=\"Designate的工作原理\"><a href=\"#Designate的工作原理\" class=\"headerlink\" title=\"Designate的工作原理\"></a>Designate的工作原理</h2><p>此处有一张图,用来描述designate的运行流程:</p>\n<p><img style=\"width:100%;\" src=\"/images/blog/Designate-MiniDNS-Pools.gif\"></p>\n<blockquote>\n<p>gif动态图片, 参考<a href=\"https://wiki.openstack.org/w/images/a/a7/Designate-MiniDNS-Pools.gif\" target=\"_blank\" rel=\"external\">Designate-MiniDNS-Pools</a></p>\n</blockquote>\n<ol>\n<li>用户请求designate-api,添加record或者domain</li>\n<li>designate-api发送请求至mq中</li>\n<li>designate-central接收到mq请求,写入db,同时通过mq触发pool_manager进行更新操作</li>\n<li>pool_manager通过rndc(addzone/delzone/notifyzone)三个操作来通知pool_targets中定义的bind来进行操作</li>\n<li>bind使用axfr来请求同步mdns</li>\n<li>mdns从数据库中读取相应的domain信息来响应axfr请求</li>\n</ol>\n<h2 id=\"Designate的安装\"><a href=\"#Designate的安装\" class=\"headerlink\" title=\"Designate的安装\"></a>Designate的安装</h2><p>此处只描述和介绍其中一种可用的部署模式(其应该具有多种部署模式, 此处就没有深究了)</p>\n<p>架构如图(DB,MQ略):</p>\n<p><img style=\"width:100%;\" src=\"/images/blog/designate_flow.png\"></p>\n<blockquote>\n<p>按照目前个人的理解, 在kilo版本种, 一个pool_manager进程就管理一个pool, pool中可以指定多个dns-server. 但不一定准确</p>\n</blockquote>\n<p>安装环境:</p>\n<ul>\n<li>系统为<code>Ubuntu 12.04</code></li>\n<li><code>designate-api</code>, <code>designate-central</code>, <code>designate-pool-manager</code>, <code>designate-mdns</code>部署在 <code>172.16.2.100</code></li>\n<li><code>bind</code>分别部署在<code>172.16.2.101</code>, <code>172.16.2.102</code>, <code>172.16.2.103</code>中</li>\n<li>测试domain为<code>lnmpy.com</code></li>\n<li>使用kilo版本的designate</li>\n</ul>\n<h3 id=\"配置bind-amp-rndc-只以安装Bind-A为例-其余类推\"><a href=\"#配置bind-amp-rndc-只以安装Bind-A为例-其余类推\" class=\"headerlink\" title=\"配置bind &amp; rndc(只以安装Bind-A为例, 其余类推)\"></a>配置bind &amp; rndc(只以安装Bind-A为例, 其余类推)</h3><p>安装 bind</p>\n<pre><code>apt-get install bind9 -y\n</code></pre><p>修改<code>/etc/bind/named.conf.options</code>内容为:</p>\n<pre><code>options {\n        directory &quot;/var/cache/bind&quot;;\n        dnssec-validation auto;\n        auth-nxdomain no;\n        allow-new-zones yes;  # 此配置必须加上, 其允许rndc进行zone的相关操作\n        listen-on { &lt;your-ip&gt;; };  # 表面bind的53端口是监听在这个网络中\n        listen-on-v6 { any; };\n};\n\ncontrols {\n        inet 172.16.2.101 port 953\n                allow { 172.16.2.100; } keys { &quot;rndc-key&quot;; };\n};\n\n# 以下内容来自: rndc-confgen\nkey &quot;rndc-key&quot; {\n        algorithm hmac-md5;\n        secret &quot;jmED6H54nY+DD/SRJG6Okw==&quot;;\n};\n</code></pre><p>修改<code>/etc/bind/rndc.key</code>内容为(secret值保持与named.conf.options中一致):</p>\n<pre><code>key &quot;rndc-key&quot; {\n        algorithm hmac-md5;\n        secret &quot;jmED6H54nY+DD/SRJG6Okw==&quot;;\n};\n</code></pre><p>在<code>172.16.2.100</code>中调用以下命令进行测试:</p>\n<pre><code>rndc -s 172.16.2.101 -p 953 -k /etc/bind/rndc.key addzone lnmpy.com &apos;{ type slave;masters { 172.16.2.100 port 5354;}; file &quot;slave.lnmpy.com.ba4dbff3-a32f-4f54-bb7c-68710f7935a5&quot;; };&apos;\n</code></pre><p>如果没有报错且<code>172.16.2.101</code>机器中的<code>/var/cache/bind/</code>出现了<code>slave.lnmpy.com.ba4dbff3-a32f-4f54-bb7c-68710f7935a5</code>, 则表明<code>bind</code>配置成功.</p>\n<h3 id=\"配置Designate-以全部安装在同一个机器上为例\"><a href=\"#配置Designate-以全部安装在同一个机器上为例\" class=\"headerlink\" title=\"配置Designate(以全部安装在同一个机器上为例)\"></a>配置Designate(以全部安装在同一个机器上为例)</h3><p>安装MySql,RabbitMq, 配置从略:</p>\n<pre><code>apt-get install -y rabbitmq-server mysql-server python-dev libmysqlclient-dev\n\ngit clone git://github.com/openstack/designate designate\ncd designate\ngit checkout stable/kilo # checkout出指定版本\npip install virtualenv\nvirtualenv .venv\nsource .venv/bin/activate\nsed -i &apos;s/oslo.config&gt;=1.9.3,&lt;1.10.0  # Apache-2.0/oslo.config&gt;=1.9.3,&lt;=1.11.0  #Apache-2.0/&apos; requirements.txt\npip install -r requirements.txt -i http://pypi.douban.com/simple  # 视网络情况可能会有超时失败多次,重复运行一次就行\nwhile [ $? != 0 ]\ndo\npip install -r requirements.txt -i http://pypi.douban.com/simple\ndone\npip install mysql-python functools32 -i http://pypi.douban.com/simple\npython setup.py install\ncp -R etc/designate /etc/\nls /etc/designate/*.sample | while read f; do sudo cp $f $(echo $f | sed &quot;s/.sample$//g&quot;); done\nmkdir /var/log/designate/ /var/cache/designate\n</code></pre><p>修改<code>/etc/designate/designate.conf</code></p>\n<pre><code>[DEFAULT]\nverbose = True\ndebug = True\nstate_path = /var/lib/designate\nlogdir = /var/log/designate\nnotification_driver = messaging\nnotification_topics = notifications\n\n# 默认的quota值， 按需设置\nquota_domains = 100000\nquota_domain_recordsets = 100000\nquota_domain_records = 100000\nquota_recordset_records = 100000\n\n[oslo_messaging_rabbit]\nrabbit_userid = guest # 默认不配置RabbitMq的话是guest, 建议修改\nrabbit_password = guest\nrabbit_virtual_host = /\nrabbit_use_ssl = False\nrabbit_hosts = 127.0.0.1:5672\n[service:central]\n[service:api]\nauth_strategy = noauth # 此处为了便利, 关闭了auth认证\nenable_api_v1 = True\nenabled_extensions_v1 = sync, quotas\nenable_api_v2 = True\n[service:mdns]\nthreads = 1000\nhost = 0.0.0.0\nport = 5354\ntcp_backlog = 100\ntcp_recv_timeout = 0.5\nquery_enforce_tsig = False\n[service:pool_manager]\npool_id = 794ccc2c-d751-44fe-b57f-8894c9f5c842\n[pool_manager_cache:sqlalchemy]\nconnection = mysql://root:r00t@127.0.0.1/designate_pool_manager\n[storage:sqlalchemy]\nconnection = mysql://root:r00t@127.0.0.1:3306/designate\nconnection_debug = 0\n[pool:794ccc2c-d751-44fe-b57f-8894c9f5c842]\nnameservers = 0f66b842-96c2-4189-93fc-1dc95a08b012, 0f66b842-96c2-4189-93fc-1dc95a08b013\ntargets = f26e0b32-736f-4f0a-831b-039a415c481e, f26e0b32-736f-4f0a-831b-039a415c481f\n[pool_nameserver:0f66b842-96c2-4189-93fc-1dc95a08b012]\nport = 53\nhost = 172.16.2.101\n[pool_target:f26e0b32-736f-4f0a-831b-039a415c481e]\noptions = rndc_host: 172.16.2.101, rndc_port: 953, rndc_key_file: /etc/bind/rndc.key\nmasters = 172.16.2.100:5354\ntype = bind9\nport = 53\nhost = 172.16.2.101\n[pool_nameserver:0f66b842-96c2-4189-93fc-1dc95a08b013]\nport = 53\nhost = 172.16.2.102\n[pool_target:f26e0b32-736f-4f0a-831b-039a415c481f]\noptions = rndc_host: 172.16.2.102, rndc_port: 953, rndc_key_file: /etc/bind/rndc.key\nmasters = 172.16.2.100:5354\ntype = bind9\nport = 53\nhost = 172.16.2.102\n[pool_nameserver:0f66b842-96c2-4189-93fc-1dc95a08b014]\nport = 53\nhost = 172.16.2.103\n[pool_target:f26e0b32-736f-4f0a-831b-039a415c4820]\noptions = rndc_host: 172.16.2.103, rndc_port: 953, rndc_key_file: /etc/bind/rndc.key\nmasters = 172.16.2.100:5354\ntype = bind9\nport = 53\nhost = 172.16.2.103\n</code></pre><p>初始化数据库</p>\n<pre><code>mysql -uroot -pr00t  -e &apos;drop database if exists designate; create database designate;&apos;\nmysql -uroot -pr00t  -e &apos;drop database if exists designate_pool_manager; create database designate_pool_manager;&apos;\n\ndesignate-manage database sync\ndesignate-manage pool-manager-cache sync\n</code></pre><p>启动Designate</p>\n<pre><code># 在virtualenv中启动下面四个组件(无顺序要求)\ndesignate-central\ndesignate-api\ndesignate-pool-manager\ndesignate-mdns\n</code></pre><p>如无报错,则表面正常启动, 再将其包装成upstart即可</p>\n<h2 id=\"Designate的API\"><a href=\"#Designate的API\" class=\"headerlink\" title=\"Designate的API\"></a>Designate的API</h2><p>此处使用了<a href=\"https://github.com/jakubroztocil/httpie\" target=\"_blank\" rel=\"external\">httpie</a>作为客户端,也可以试用postmane或者curl</p>\n<pre><code>http 127.0.0.1:9001/v1/servers name=ns.lnmpy.com.\n\nhttp 127.0.0.1:9001/v1/domains name=lnmpy.com. ttl:=3600 email=elvis@lnmpy.com\n\nhttp 127.0.0.1:9001/v1/domains/{domain_id}/records name=www.lnmpy.com. type=A data=192.168.1.101\nhttp 127.0.0.1:9001/v1/domains/{domain_id}/records name=mail.lnmpy.com. type=A data=192.168.1.102\n\ndig @172.16.2.101 www.lnmpy.com\ndig @172.16.2.102 www.lnmpy.com\ndig @172.16.2.103 www.lnmpy.com\n\n# 如果要创建PTR反向解析的话， 需要再单独创建一个domain\n# 注：反向解析域必须以 in-addr.arpa. 结尾， designate只支持在 in-addr.arpa.的域中添加PTR记录\nhttp 127.0.0.1:9001/v1/domains name=1.168.192.in-addr.arpa. ttl:=3600 email=elvis@lnmpy.com\n\nhttp 127.0.0.1:9001/v1/domains/{ptr_domain_id}/records name=102.1.168.192.in-addr.arpa. type=PTR data=mail.lnmpy.com.\n\ndig @172.16.2.101 -x 192.168.1.101\ndig @172.16.2.102 -x 192.168.1.101\ndig @172.16.2.103 -x 192.168.1.101\n</code></pre><p>可以看到,通过dig测试,返回的结果表面3台bind-server均可(包括反向解析)解析www.lnmpy.com.</p>\n<h2 id=\"Designate-HA\"><a href=\"#Designate-HA\" class=\"headerlink\" title=\"Designate HA\"></a>Designate HA</h2><p>MQ, DB的HA不必说了。</p>\n<ul>\n<li><code>desigante-api</code>只会涉及到读取DB和rpc调用<code>designate-central</code>, 所以使用<code>nginx</code>在多台机器上部署,都没有问题</li>\n<li><code>desigante-central</code>会被<code>desigante-api</code>rpc调用,但是有oslo.concurrency的存在,也只会有一个被调用到, 所以在不同的机器中部署,也是没有问题的。其被调用后会发送一条mq消息给<code>designate-pool-manager</code></li>\n<li>由于mq的消息是独占性的,<code>desigante-pool-manager</code>之间的消息自然也不会发生抢占,部署多个自然也是允许的</li>\n<li><code>desigante-mdns</code>逻辑上来讲也是只读取db并且响应<code>axfr</code>请求, 只要pool中的bind能够实现<code>multi-master</code>即可</li>\n</ul>\n<p>修改<code>pool_target</code>内容为:</p>\n<pre><code>[pool_target:f26e0b32-736f-4f0a-831b-039a415c4820]\n...\nmasters = 172.16.2.100:5354, 172.16.2.200:5354   # masters列表\n...\n</code></pre><p>那么<code>/var/cache/bind/3bf305731dd26307.nzf</code>中对应的zone就变成了:</p>\n<pre><code>...\nzone lnmpy.com { type slave; masters { 172.16.2.100 port 5354; 172.16.2.200 port 5354;}; file &quot;slave.lnmpy.com.60987de9-97a1-4ecf-a124-3f148b21af78&quot;; };\n...\n</code></pre><p>这样,当其中一个mdns down了之后,bind依然能够sync另一个mdns</p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ol>\n<li><a href=\"http://docs.openstack.org/developer/designate/\" target=\"_blank\" rel=\"external\">Designate Developer Docs</a></li>\n<li><a href=\"http://docs.openstack.org/developer/designate/install/ubuntu-juno.html\" target=\"_blank\" rel=\"external\">Installing Juno on Ubuntu</a></li>\n<li><a href=\"http://docs.openstack.org/developer/designate/rest.html\" target=\"_blank\" rel=\"external\">Designate Rest API</a></li>\n<li><a href=\"http://www.slideshare.net/grahamhayes/designate-overview-openstack-summit-paris-presentation\" target=\"_blank\" rel=\"external\">designate-overview-openstack</a></li>\n<li><a href=\"https://wiki.openstack.org/w/images/a/a7/Designate-MiniDNS-Pools.gif\" target=\"_blank\" rel=\"external\">Designate-MiniDNS-Pools</a></li>\n<li><a href=\"http://wubinary.blog.51cto.com/8570032/1378363\" target=\"_blank\" rel=\"external\">DNS视图及bind中rndc的使用</a></li>\n</ol>\n","excerpt":"","more":"<p>Designate目前还在开发过程中, 且文档资料比较匮乏, 此处的介绍的内容就相对比较片面和不是那么严整了, 若有相应的错误,也请包涵并及时指正。</p>\n<h2 id=\"Designate的工作原理\"><a href=\"#Designate的工作原理\" class=\"headerlink\" title=\"Designate的工作原理\"></a>Designate的工作原理</h2><p>此处有一张图,用来描述designate的运行流程:</p>\n<p><img style=\"width:100%;\" src='/images/blog/Designate-MiniDNS-Pools.gif'></img></p>\n<blockquote>\n<p>gif动态图片, 参考<a href=\"https://wiki.openstack.org/w/images/a/a7/Designate-MiniDNS-Pools.gif\">Designate-MiniDNS-Pools</a></p>\n</blockquote>\n<ol>\n<li>用户请求designate-api,添加record或者domain</li>\n<li>designate-api发送请求至mq中</li>\n<li>designate-central接收到mq请求,写入db,同时通过mq触发pool_manager进行更新操作</li>\n<li>pool_manager通过rndc(addzone/delzone/notifyzone)三个操作来通知pool_targets中定义的bind来进行操作</li>\n<li>bind使用axfr来请求同步mdns</li>\n<li>mdns从数据库中读取相应的domain信息来响应axfr请求</li>\n</ol>\n<h2 id=\"Designate的安装\"><a href=\"#Designate的安装\" class=\"headerlink\" title=\"Designate的安装\"></a>Designate的安装</h2><p>此处只描述和介绍其中一种可用的部署模式(其应该具有多种部署模式, 此处就没有深究了)</p>\n<p>架构如图(DB,MQ略):</p>\n<p><img style=\"width:100%;\" src='/images/blog/designate_flow.png'></img></p>\n<blockquote>\n<p>按照目前个人的理解, 在kilo版本种, 一个pool_manager进程就管理一个pool, pool中可以指定多个dns-server. 但不一定准确</p>\n</blockquote>\n<p>安装环境:</p>\n<ul>\n<li>系统为<code>Ubuntu 12.04</code></li>\n<li><code>designate-api</code>, <code>designate-central</code>, <code>designate-pool-manager</code>, <code>designate-mdns</code>部署在 <code>172.16.2.100</code></li>\n<li><code>bind</code>分别部署在<code>172.16.2.101</code>, <code>172.16.2.102</code>, <code>172.16.2.103</code>中</li>\n<li>测试domain为<code>lnmpy.com</code></li>\n<li>使用kilo版本的designate</li>\n</ul>\n<h3 id=\"配置bind-amp-rndc-只以安装Bind-A为例-其余类推\"><a href=\"#配置bind-amp-rndc-只以安装Bind-A为例-其余类推\" class=\"headerlink\" title=\"配置bind &amp; rndc(只以安装Bind-A为例, 其余类推)\"></a>配置bind &amp; rndc(只以安装Bind-A为例, 其余类推)</h3><p>安装 bind</p>\n<pre><code>apt-get install bind9 -y\n</code></pre><p>修改<code>/etc/bind/named.conf.options</code>内容为:</p>\n<pre><code>options {\n        directory &quot;/var/cache/bind&quot;;\n        dnssec-validation auto;\n        auth-nxdomain no;\n        allow-new-zones yes;  # 此配置必须加上, 其允许rndc进行zone的相关操作\n        listen-on { &lt;your-ip&gt;; };  # 表面bind的53端口是监听在这个网络中\n        listen-on-v6 { any; };\n};\n\ncontrols {\n        inet 172.16.2.101 port 953\n                allow { 172.16.2.100; } keys { &quot;rndc-key&quot;; };\n};\n\n# 以下内容来自: rndc-confgen\nkey &quot;rndc-key&quot; {\n        algorithm hmac-md5;\n        secret &quot;jmED6H54nY+DD/SRJG6Okw==&quot;;\n};\n</code></pre><p>修改<code>/etc/bind/rndc.key</code>内容为(secret值保持与named.conf.options中一致):</p>\n<pre><code>key &quot;rndc-key&quot; {\n        algorithm hmac-md5;\n        secret &quot;jmED6H54nY+DD/SRJG6Okw==&quot;;\n};\n</code></pre><p>在<code>172.16.2.100</code>中调用以下命令进行测试:</p>\n<pre><code>rndc -s 172.16.2.101 -p 953 -k /etc/bind/rndc.key addzone lnmpy.com &apos;{ type slave;masters { 172.16.2.100 port 5354;}; file &quot;slave.lnmpy.com.ba4dbff3-a32f-4f54-bb7c-68710f7935a5&quot;; };&apos;\n</code></pre><p>如果没有报错且<code>172.16.2.101</code>机器中的<code>/var/cache/bind/</code>出现了<code>slave.lnmpy.com.ba4dbff3-a32f-4f54-bb7c-68710f7935a5</code>, 则表明<code>bind</code>配置成功.</p>\n<h3 id=\"配置Designate-以全部安装在同一个机器上为例\"><a href=\"#配置Designate-以全部安装在同一个机器上为例\" class=\"headerlink\" title=\"配置Designate(以全部安装在同一个机器上为例)\"></a>配置Designate(以全部安装在同一个机器上为例)</h3><p>安装MySql,RabbitMq, 配置从略:</p>\n<pre><code>apt-get install -y rabbitmq-server mysql-server python-dev libmysqlclient-dev\n\ngit clone git://github.com/openstack/designate designate\ncd designate\ngit checkout stable/kilo # checkout出指定版本\npip install virtualenv\nvirtualenv .venv\nsource .venv/bin/activate\nsed -i &apos;s/oslo.config&gt;=1.9.3,&lt;1.10.0  # Apache-2.0/oslo.config&gt;=1.9.3,&lt;=1.11.0  #Apache-2.0/&apos; requirements.txt\npip install -r requirements.txt -i http://pypi.douban.com/simple  # 视网络情况可能会有超时失败多次,重复运行一次就行\nwhile [ $? != 0 ]\ndo\npip install -r requirements.txt -i http://pypi.douban.com/simple\ndone\npip install mysql-python functools32 -i http://pypi.douban.com/simple\npython setup.py install\ncp -R etc/designate /etc/\nls /etc/designate/*.sample | while read f; do sudo cp $f $(echo $f | sed &quot;s/.sample$//g&quot;); done\nmkdir /var/log/designate/ /var/cache/designate\n</code></pre><p>修改<code>/etc/designate/designate.conf</code></p>\n<pre><code>[DEFAULT]\nverbose = True\ndebug = True\nstate_path = /var/lib/designate\nlogdir = /var/log/designate\nnotification_driver = messaging\nnotification_topics = notifications\n\n# 默认的quota值， 按需设置\nquota_domains = 100000\nquota_domain_recordsets = 100000\nquota_domain_records = 100000\nquota_recordset_records = 100000\n\n[oslo_messaging_rabbit]\nrabbit_userid = guest # 默认不配置RabbitMq的话是guest, 建议修改\nrabbit_password = guest\nrabbit_virtual_host = /\nrabbit_use_ssl = False\nrabbit_hosts = 127.0.0.1:5672\n[service:central]\n[service:api]\nauth_strategy = noauth # 此处为了便利, 关闭了auth认证\nenable_api_v1 = True\nenabled_extensions_v1 = sync, quotas\nenable_api_v2 = True\n[service:mdns]\nthreads = 1000\nhost = 0.0.0.0\nport = 5354\ntcp_backlog = 100\ntcp_recv_timeout = 0.5\nquery_enforce_tsig = False\n[service:pool_manager]\npool_id = 794ccc2c-d751-44fe-b57f-8894c9f5c842\n[pool_manager_cache:sqlalchemy]\nconnection = mysql://root:r00t@127.0.0.1/designate_pool_manager\n[storage:sqlalchemy]\nconnection = mysql://root:r00t@127.0.0.1:3306/designate\nconnection_debug = 0\n[pool:794ccc2c-d751-44fe-b57f-8894c9f5c842]\nnameservers = 0f66b842-96c2-4189-93fc-1dc95a08b012, 0f66b842-96c2-4189-93fc-1dc95a08b013\ntargets = f26e0b32-736f-4f0a-831b-039a415c481e, f26e0b32-736f-4f0a-831b-039a415c481f\n[pool_nameserver:0f66b842-96c2-4189-93fc-1dc95a08b012]\nport = 53\nhost = 172.16.2.101\n[pool_target:f26e0b32-736f-4f0a-831b-039a415c481e]\noptions = rndc_host: 172.16.2.101, rndc_port: 953, rndc_key_file: /etc/bind/rndc.key\nmasters = 172.16.2.100:5354\ntype = bind9\nport = 53\nhost = 172.16.2.101\n[pool_nameserver:0f66b842-96c2-4189-93fc-1dc95a08b013]\nport = 53\nhost = 172.16.2.102\n[pool_target:f26e0b32-736f-4f0a-831b-039a415c481f]\noptions = rndc_host: 172.16.2.102, rndc_port: 953, rndc_key_file: /etc/bind/rndc.key\nmasters = 172.16.2.100:5354\ntype = bind9\nport = 53\nhost = 172.16.2.102\n[pool_nameserver:0f66b842-96c2-4189-93fc-1dc95a08b014]\nport = 53\nhost = 172.16.2.103\n[pool_target:f26e0b32-736f-4f0a-831b-039a415c4820]\noptions = rndc_host: 172.16.2.103, rndc_port: 953, rndc_key_file: /etc/bind/rndc.key\nmasters = 172.16.2.100:5354\ntype = bind9\nport = 53\nhost = 172.16.2.103\n</code></pre><p>初始化数据库</p>\n<pre><code>mysql -uroot -pr00t  -e &apos;drop database if exists designate; create database designate;&apos;\nmysql -uroot -pr00t  -e &apos;drop database if exists designate_pool_manager; create database designate_pool_manager;&apos;\n\ndesignate-manage database sync\ndesignate-manage pool-manager-cache sync\n</code></pre><p>启动Designate</p>\n<pre><code># 在virtualenv中启动下面四个组件(无顺序要求)\ndesignate-central\ndesignate-api\ndesignate-pool-manager\ndesignate-mdns\n</code></pre><p>如无报错,则表面正常启动, 再将其包装成upstart即可</p>\n<h2 id=\"Designate的API\"><a href=\"#Designate的API\" class=\"headerlink\" title=\"Designate的API\"></a>Designate的API</h2><p>此处使用了<a href=\"https://github.com/jakubroztocil/httpie\">httpie</a>作为客户端,也可以试用postmane或者curl</p>\n<pre><code>http 127.0.0.1:9001/v1/servers name=ns.lnmpy.com.\n\nhttp 127.0.0.1:9001/v1/domains name=lnmpy.com. ttl:=3600 email=elvis@lnmpy.com\n\nhttp 127.0.0.1:9001/v1/domains/{domain_id}/records name=www.lnmpy.com. type=A data=192.168.1.101\nhttp 127.0.0.1:9001/v1/domains/{domain_id}/records name=mail.lnmpy.com. type=A data=192.168.1.102\n\ndig @172.16.2.101 www.lnmpy.com\ndig @172.16.2.102 www.lnmpy.com\ndig @172.16.2.103 www.lnmpy.com\n\n# 如果要创建PTR反向解析的话， 需要再单独创建一个domain\n# 注：反向解析域必须以 in-addr.arpa. 结尾， designate只支持在 in-addr.arpa.的域中添加PTR记录\nhttp 127.0.0.1:9001/v1/domains name=1.168.192.in-addr.arpa. ttl:=3600 email=elvis@lnmpy.com\n\nhttp 127.0.0.1:9001/v1/domains/{ptr_domain_id}/records name=102.1.168.192.in-addr.arpa. type=PTR data=mail.lnmpy.com.\n\ndig @172.16.2.101 -x 192.168.1.101\ndig @172.16.2.102 -x 192.168.1.101\ndig @172.16.2.103 -x 192.168.1.101\n</code></pre><p>可以看到,通过dig测试,返回的结果表面3台bind-server均可(包括反向解析)解析www.lnmpy.com.</p>\n<h2 id=\"Designate-HA\"><a href=\"#Designate-HA\" class=\"headerlink\" title=\"Designate HA\"></a>Designate HA</h2><p>MQ, DB的HA不必说了。</p>\n<ul>\n<li><code>desigante-api</code>只会涉及到读取DB和rpc调用<code>designate-central</code>, 所以使用<code>nginx</code>在多台机器上部署,都没有问题</li>\n<li><code>desigante-central</code>会被<code>desigante-api</code>rpc调用,但是有oslo.concurrency的存在,也只会有一个被调用到, 所以在不同的机器中部署,也是没有问题的。其被调用后会发送一条mq消息给<code>designate-pool-manager</code></li>\n<li>由于mq的消息是独占性的,<code>desigante-pool-manager</code>之间的消息自然也不会发生抢占,部署多个自然也是允许的</li>\n<li><code>desigante-mdns</code>逻辑上来讲也是只读取db并且响应<code>axfr</code>请求, 只要pool中的bind能够实现<code>multi-master</code>即可</li>\n</ul>\n<p>修改<code>pool_target</code>内容为:</p>\n<pre><code>[pool_target:f26e0b32-736f-4f0a-831b-039a415c4820]\n...\nmasters = 172.16.2.100:5354, 172.16.2.200:5354   # masters列表\n...\n</code></pre><p>那么<code>/var/cache/bind/3bf305731dd26307.nzf</code>中对应的zone就变成了:</p>\n<pre><code>...\nzone lnmpy.com { type slave; masters { 172.16.2.100 port 5354; 172.16.2.200 port 5354;}; file &quot;slave.lnmpy.com.60987de9-97a1-4ecf-a124-3f148b21af78&quot;; };\n...\n</code></pre><p>这样,当其中一个mdns down了之后,bind依然能够sync另一个mdns</p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ol>\n<li><a href=\"http://docs.openstack.org/developer/designate/\">Designate Developer Docs</a></li>\n<li><a href=\"http://docs.openstack.org/developer/designate/install/ubuntu-juno.html\">Installing Juno on Ubuntu</a></li>\n<li><a href=\"http://docs.openstack.org/developer/designate/rest.html\">Designate Rest API</a></li>\n<li><a href=\"http://www.slideshare.net/grahamhayes/designate-overview-openstack-summit-paris-presentation\">designate-overview-openstack</a></li>\n<li><a href=\"https://wiki.openstack.org/w/images/a/a7/Designate-MiniDNS-Pools.gif\">Designate-MiniDNS-Pools</a></li>\n<li><a href=\"http://wubinary.blog.51cto.com/8570032/1378363\">DNS视图及bind中rndc的使用</a></li>\n</ol>\n"},{"title":"RabbitMQ HA和LB的配置","date":"2014-11-11T16:00:00.000Z","_content":"\nrabbitmq是使用erlang开发的,集群非常方便,且天生就支持并发分布式,但自身并不支持负载均衡. 常规的博客介绍都是说rabbitmq有几种部署模式,其中最常用的也就两种:\n\n0. 单一模式: 就是不做ha...\n0. 镜像模式模式: active/active模式的ha,当master挂掉了,按照策略选择某个slave(其实就是最先加入集群的那个slave)来担当master的角色\n\n下面就直接切入正题,在实际中该如何针对rabbitmq进行ha\n\n### 配置网络环境\n实验中使用三台机器(mq-cluster1,2,3)来进行部署实验, 系统均为ubuntu-14.04, amd64, 直接将以下内容其加到`/etc/hosts`文件中.\n\n其中`mq-cluster1`为master,其余的为slave\n\n{% codeblock %}\n10.22.129.57 mq-cluster1\n10.22.129.58 mq-cluster2\n10.22.129.59 mq-cluster3\n{% endcodeblock %}\n\n### 安装rabbitmq-server\n\n{% codeblock %}\napt-get install -y rabbitmq-server\n{% endcodeblock %}\n\n### 同步erlang.cookie文件\nrabbitmq集群是依赖erlang的集群来工作的,所以要保证集群中每个rabbitmq的`/var/lib/rabbitmq/.erlang.cookie`内容是一样的.\n\n我是以`mq-cluster1`为master的,所以需要将其内容覆盖到`mq-cluster2`和`mq-cluster3`中\n\n{% codeblock %}\nservice rabbitmq-server stop\n# 你也可以选择其它方式来进行同步\nscp root@mq-cluster1:/var/lib/rabbitmq/.erlang.cookie /var/lib/rabbitmq/.erlang.cookie\nservice rabbitmq-server start\n{% endcodeblock %}\n\n\n### 设置ha模式\n`rabbitmqctl set_policy [-p <vhostpath>] [--priority <priority>] [--apply-to <apply-to>] <name> <pattern> <definition>`\n\n- name 策略名称\n- pattern  正则表达式,用来匹配资源,符合的就会应用设置的策略\n- definition 是json格式设置的策略。\n- apply-to 表示策略应用到什么类型的地方,一般有queues,exchange和all,默认是all\n- priority 是个整数优先级\n\n其中`ha-mode`有三种模式:\n\n- all: 同步至所有的.\n- exactly: 同步最多N个机器. 当现有集群机器数小于N时,同步所有,大于等于N时则不进行同步. N需要额外通过`ha-params`来指定.\n- nodes: 只同步至符合指定名称的nodes. N需要额外通过`ha-params`来指定.\n\n{% codeblock %}\n// 这里设置的是同步全部的queue, 可以按需自己选择指定的queue\nrabbitmqctl  set_policy ha-all '.*' '{\"ha-mode\":\"all\"}'\n{% endcodeblock %}\n\n### cluster2,3加入集群\n在`mq-cluster2`和`mq-cluster3`中分别执行:\n\n{% codeblock %}\nrabbitmqctl stop_app\nrabbitmqctl join_cluster rabbit@mq-cluster1\nrabbitmqctl start_app\n{% endcodeblock %}\n\n加入之后, 可以通过`rabbitmqctl cluster_status`来查看cluster状态.\n\nps:\n> 默认加入是一`disc`模式加入,可以执行`rabbitmqctl change_cluster_node_type <ram|disc>`进行模式的修改\n\n以上是在rabbitmq 3.*中使用, 而在rabbitmq 2.*中使用:\n\n{% codeblock %}\nrabbitmqctl stop_app\nrabbitmqctl force_cluster rabbit@mq-cluster1 # 不加自己的node_name, 是ram模式\nrabbitmqctl force_cluster rabbit@mq-cluster1 rabbit@mq-cluster2 # 加自己的node_name, 是disc模式\nrabbitmqctl start_app\n{% endcodeblock %}\n\n### 测试rabbitmq的ha\n\n测试的python代码,依次发送消息到三个rabbitmq-server中,\n\n{% codeblock %}\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nimport pika\n\nmq_servers = ['10.22.129.57', '10.22.129.58', '10.22.129.59']\nmq_exchange = 'test_exchange'\n\nqueue_name = 'test'\nrouting_key = 'test.test'\nmessage = 'msg'\n\nfor mq_server in mq_exchange:\n    try:\n        connection = pika.BlockingConnection(pika.ConnectionParameters(host=mq_server))\n        channel = connection.channel()\n        channel.exchange_declare(exchange=mq_exchange, type='topic', durable=True, auto_delete=False)\n        channel.queue_declare(queue=queue_name, durable=True, exclusive=False, auto_delete=False)\n        channel.queue_bind(exchange=mq_exchange, queue=queue_name, routing_key=routing_key)\n\n        channel.basic_publish(exchange=mq_exchange,\n                              routing_key=routing_key,\n                              body=message,\n                              properties=pika.BasicProperties(content_type='text/plain',\n                                                              delivery_mode=2)\n                              )\n\n        channel.close()\n        connection.close()\n        print 'success: ' + mq_server\n    except:\n        print 'failed: ' + mq_server\n{% endcodeblock %}\n\n\n可以随机的操作去关闭任意一个`mq-cluster`上的`rabbitmq-server`服务, 再通过`rabbitmqctl list_queues`来查看消息的数量. 可以看到,尽管master挂了,消息依然能够发送成功,且当挂掉的机器(master或者slave)重新起起来之后,消息会马上同步过去.\n\n### 搭建haproxy\n\n安装和初始配置haproxy此处就从略.\n\n在配置好的`/etc/haproxy/haproxy.cfg`尾端加上以下内容\n\n{% codeblock %}\nlisten  rabbitmq 0.0.0.0:56720\n    mode    tcp\n    balance roundrobin\n    option  tcplog\n    option  tcpka\n    server  rabbit1 192.168.100.67:5672 check inter 5000\n    server  rabbit2 192.168.100.68:5672 check inter 5000\n    server  rabbit3 192.168.100.69:5672 check inter 5000\n{% endcodeblock %}\n\n接着启动haproxy\n\n{% codeblock %}\nhaproxy -f /etc/haproxy/haproxy.cfg -D\n{% endcodeblock %}\n\n### 测试rabbitmq的haproxy下的lb\n\n将之前的测试代码中的\n\n{% codeblock %}\nmq_servers = ['10.22.129.57', '10.22.129.58', '10.22.129.59']\n{% endcodeblock %}\n\n改成\n\n{% codeblock %}\nmq_servers = ['10.22.129.53', '10.22.129.53', '10.22.129.53']\n{% endcodeblock %}\n\n\n执行测试代码,发现三个消息均发送成功,然后即使手动关闭其中一台mq,消息依然发送成功,通过`rabbitctl list_queues`也依然可以看到消息是成功收到３条的.\n\n至此，可以看到rabbitmq-server成功的解除了`single-point`状态.\n\n\n### 参考\n\n0. [rabbitmq-ha](https://www.rabbitmq.com/ha.html)\n0. [rabbitmqctl命令介绍](http://my.oschina.net/guol/blog/186445)\n0. [软件级负载均衡器(LVS/HAProxy/Nginx)的特点简介和对比](http://yuhongchun.blog.51cto.com/1604432/697466)\n","source":"_posts/blog/rabbitmq-ha-lb.md","raw":"---\ntitle:  RabbitMQ HA和LB的配置\ncategories: blog\ndate: 2014-11-12\ntag:\n- RabbitMQ\n- Linux\n- Server\n---\n\nrabbitmq是使用erlang开发的,集群非常方便,且天生就支持并发分布式,但自身并不支持负载均衡. 常规的博客介绍都是说rabbitmq有几种部署模式,其中最常用的也就两种:\n\n0. 单一模式: 就是不做ha...\n0. 镜像模式模式: active/active模式的ha,当master挂掉了,按照策略选择某个slave(其实就是最先加入集群的那个slave)来担当master的角色\n\n下面就直接切入正题,在实际中该如何针对rabbitmq进行ha\n\n### 配置网络环境\n实验中使用三台机器(mq-cluster1,2,3)来进行部署实验, 系统均为ubuntu-14.04, amd64, 直接将以下内容其加到`/etc/hosts`文件中.\n\n其中`mq-cluster1`为master,其余的为slave\n\n{% codeblock %}\n10.22.129.57 mq-cluster1\n10.22.129.58 mq-cluster2\n10.22.129.59 mq-cluster3\n{% endcodeblock %}\n\n### 安装rabbitmq-server\n\n{% codeblock %}\napt-get install -y rabbitmq-server\n{% endcodeblock %}\n\n### 同步erlang.cookie文件\nrabbitmq集群是依赖erlang的集群来工作的,所以要保证集群中每个rabbitmq的`/var/lib/rabbitmq/.erlang.cookie`内容是一样的.\n\n我是以`mq-cluster1`为master的,所以需要将其内容覆盖到`mq-cluster2`和`mq-cluster3`中\n\n{% codeblock %}\nservice rabbitmq-server stop\n# 你也可以选择其它方式来进行同步\nscp root@mq-cluster1:/var/lib/rabbitmq/.erlang.cookie /var/lib/rabbitmq/.erlang.cookie\nservice rabbitmq-server start\n{% endcodeblock %}\n\n\n### 设置ha模式\n`rabbitmqctl set_policy [-p <vhostpath>] [--priority <priority>] [--apply-to <apply-to>] <name> <pattern> <definition>`\n\n- name 策略名称\n- pattern  正则表达式,用来匹配资源,符合的就会应用设置的策略\n- definition 是json格式设置的策略。\n- apply-to 表示策略应用到什么类型的地方,一般有queues,exchange和all,默认是all\n- priority 是个整数优先级\n\n其中`ha-mode`有三种模式:\n\n- all: 同步至所有的.\n- exactly: 同步最多N个机器. 当现有集群机器数小于N时,同步所有,大于等于N时则不进行同步. N需要额外通过`ha-params`来指定.\n- nodes: 只同步至符合指定名称的nodes. N需要额外通过`ha-params`来指定.\n\n{% codeblock %}\n// 这里设置的是同步全部的queue, 可以按需自己选择指定的queue\nrabbitmqctl  set_policy ha-all '.*' '{\"ha-mode\":\"all\"}'\n{% endcodeblock %}\n\n### cluster2,3加入集群\n在`mq-cluster2`和`mq-cluster3`中分别执行:\n\n{% codeblock %}\nrabbitmqctl stop_app\nrabbitmqctl join_cluster rabbit@mq-cluster1\nrabbitmqctl start_app\n{% endcodeblock %}\n\n加入之后, 可以通过`rabbitmqctl cluster_status`来查看cluster状态.\n\nps:\n> 默认加入是一`disc`模式加入,可以执行`rabbitmqctl change_cluster_node_type <ram|disc>`进行模式的修改\n\n以上是在rabbitmq 3.*中使用, 而在rabbitmq 2.*中使用:\n\n{% codeblock %}\nrabbitmqctl stop_app\nrabbitmqctl force_cluster rabbit@mq-cluster1 # 不加自己的node_name, 是ram模式\nrabbitmqctl force_cluster rabbit@mq-cluster1 rabbit@mq-cluster2 # 加自己的node_name, 是disc模式\nrabbitmqctl start_app\n{% endcodeblock %}\n\n### 测试rabbitmq的ha\n\n测试的python代码,依次发送消息到三个rabbitmq-server中,\n\n{% codeblock %}\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nimport pika\n\nmq_servers = ['10.22.129.57', '10.22.129.58', '10.22.129.59']\nmq_exchange = 'test_exchange'\n\nqueue_name = 'test'\nrouting_key = 'test.test'\nmessage = 'msg'\n\nfor mq_server in mq_exchange:\n    try:\n        connection = pika.BlockingConnection(pika.ConnectionParameters(host=mq_server))\n        channel = connection.channel()\n        channel.exchange_declare(exchange=mq_exchange, type='topic', durable=True, auto_delete=False)\n        channel.queue_declare(queue=queue_name, durable=True, exclusive=False, auto_delete=False)\n        channel.queue_bind(exchange=mq_exchange, queue=queue_name, routing_key=routing_key)\n\n        channel.basic_publish(exchange=mq_exchange,\n                              routing_key=routing_key,\n                              body=message,\n                              properties=pika.BasicProperties(content_type='text/plain',\n                                                              delivery_mode=2)\n                              )\n\n        channel.close()\n        connection.close()\n        print 'success: ' + mq_server\n    except:\n        print 'failed: ' + mq_server\n{% endcodeblock %}\n\n\n可以随机的操作去关闭任意一个`mq-cluster`上的`rabbitmq-server`服务, 再通过`rabbitmqctl list_queues`来查看消息的数量. 可以看到,尽管master挂了,消息依然能够发送成功,且当挂掉的机器(master或者slave)重新起起来之后,消息会马上同步过去.\n\n### 搭建haproxy\n\n安装和初始配置haproxy此处就从略.\n\n在配置好的`/etc/haproxy/haproxy.cfg`尾端加上以下内容\n\n{% codeblock %}\nlisten  rabbitmq 0.0.0.0:56720\n    mode    tcp\n    balance roundrobin\n    option  tcplog\n    option  tcpka\n    server  rabbit1 192.168.100.67:5672 check inter 5000\n    server  rabbit2 192.168.100.68:5672 check inter 5000\n    server  rabbit3 192.168.100.69:5672 check inter 5000\n{% endcodeblock %}\n\n接着启动haproxy\n\n{% codeblock %}\nhaproxy -f /etc/haproxy/haproxy.cfg -D\n{% endcodeblock %}\n\n### 测试rabbitmq的haproxy下的lb\n\n将之前的测试代码中的\n\n{% codeblock %}\nmq_servers = ['10.22.129.57', '10.22.129.58', '10.22.129.59']\n{% endcodeblock %}\n\n改成\n\n{% codeblock %}\nmq_servers = ['10.22.129.53', '10.22.129.53', '10.22.129.53']\n{% endcodeblock %}\n\n\n执行测试代码,发现三个消息均发送成功,然后即使手动关闭其中一台mq,消息依然发送成功,通过`rabbitctl list_queues`也依然可以看到消息是成功收到３条的.\n\n至此，可以看到rabbitmq-server成功的解除了`single-point`状态.\n\n\n### 参考\n\n0. [rabbitmq-ha](https://www.rabbitmq.com/ha.html)\n0. [rabbitmqctl命令介绍](http://my.oschina.net/guol/blog/186445)\n0. [软件级负载均衡器(LVS/HAProxy/Nginx)的特点简介和对比](http://yuhongchun.blog.51cto.com/1604432/697466)\n","slug":"blog/rabbitmq-ha-lb","published":1,"updated":"2016-07-17T11:36:36.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciuyae21d0012yt7lfw8qofiv","content":"<p>rabbitmq是使用erlang开发的,集群非常方便,且天生就支持并发分布式,但自身并不支持负载均衡. 常规的博客介绍都是说rabbitmq有几种部署模式,其中最常用的也就两种:</p>\n<ol>\n<li>单一模式: 就是不做ha…</li>\n<li>镜像模式模式: active/active模式的ha,当master挂掉了,按照策略选择某个slave(其实就是最先加入集群的那个slave)来担当master的角色</li>\n</ol>\n<p>下面就直接切入正题,在实际中该如何针对rabbitmq进行ha</p>\n<h3 id=\"配置网络环境\"><a href=\"#配置网络环境\" class=\"headerlink\" title=\"配置网络环境\"></a>配置网络环境</h3><p>实验中使用三台机器(mq-cluster1,2,3)来进行部署实验, 系统均为ubuntu-14.04, amd64, 直接将以下内容其加到<code>/etc/hosts</code>文件中.</p>\n<p>其中<code>mq-cluster1</code>为master,其余的为slave</p>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><div class=\"line\">10<span class=\"selector-class\">.22</span><span class=\"selector-class\">.129</span><span class=\"selector-class\">.57</span> <span class=\"selector-tag\">mq-cluster1</span></div><div class=\"line\">10<span class=\"selector-class\">.22</span><span class=\"selector-class\">.129</span><span class=\"selector-class\">.58</span> <span class=\"selector-tag\">mq-cluster2</span></div><div class=\"line\">10<span class=\"selector-class\">.22</span><span class=\"selector-class\">.129</span><span class=\"selector-class\">.59</span> <span class=\"selector-tag\">mq-cluster3</span></div></pre></td></tr></table></figure>\n<h3 id=\"安装rabbitmq-server\"><a href=\"#安装rabbitmq-server\" class=\"headerlink\" title=\"安装rabbitmq-server\"></a>安装rabbitmq-server</h3><figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><div class=\"line\">apt-get <span class=\"keyword\">install</span> -y rabbitmq-<span class=\"keyword\">server</span></div></pre></td></tr></table></figure>\n<h3 id=\"同步erlang-cookie文件\"><a href=\"#同步erlang-cookie文件\" class=\"headerlink\" title=\"同步erlang.cookie文件\"></a>同步erlang.cookie文件</h3><p>rabbitmq集群是依赖erlang的集群来工作的,所以要保证集群中每个rabbitmq的<code>/var/lib/rabbitmq/.erlang.cookie</code>内容是一样的.</p>\n<p>我是以<code>mq-cluster1</code>为master的,所以需要将其内容覆盖到<code>mq-cluster2</code>和<code>mq-cluster3</code>中</p>\n<figure class=\"highlight crystal\"><table><tr><td class=\"code\"><pre><div class=\"line\">service rabbitmq-server stop</div><div class=\"line\"><span class=\"comment\"># 你也可以选择其它方式来进行同步</span></div><div class=\"line\">scp root@mq-<span class=\"symbol\">cluster1:</span>/var/<span class=\"class\"><span class=\"keyword\">lib</span>/<span class=\"title\">rabbitmq</span>/.<span class=\"title\">erlang</span>.<span class=\"title\">cookie</span> /<span class=\"title\">var</span>/<span class=\"title\">lib</span>/<span class=\"title\">rabbitmq</span>/.<span class=\"title\">erlang</span>.<span class=\"title\">cookie</span></span></div><div class=\"line\">service rabbitmq-server start</div></pre></td></tr></table></figure>\n<h3 id=\"设置ha模式\"><a href=\"#设置ha模式\" class=\"headerlink\" title=\"设置ha模式\"></a>设置ha模式</h3><p><code>rabbitmqctl set_policy [-p &lt;vhostpath&gt;] [--priority &lt;priority&gt;] [--apply-to &lt;apply-to&gt;] &lt;name&gt; &lt;pattern&gt; &lt;definition&gt;</code></p>\n<ul>\n<li>name 策略名称</li>\n<li>pattern  正则表达式,用来匹配资源,符合的就会应用设置的策略</li>\n<li>definition 是json格式设置的策略。</li>\n<li>apply-to 表示策略应用到什么类型的地方,一般有queues,exchange和all,默认是all</li>\n<li>priority 是个整数优先级</li>\n</ul>\n<p>其中<code>ha-mode</code>有三种模式:</p>\n<ul>\n<li>all: 同步至所有的.</li>\n<li>exactly: 同步最多N个机器. 当现有集群机器数小于N时,同步所有,大于等于N时则不进行同步. N需要额外通过<code>ha-params</code>来指定.</li>\n<li>nodes: 只同步至符合指定名称的nodes. N需要额外通过<code>ha-params</code>来指定.</li>\n</ul>\n<figure class=\"highlight scilab\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 这里设置的是同步全部的queue, 可以按需自己选择指定的queue</span></div><div class=\"line\">rabbitmqctl  set_policy ha-all <span class=\"string\">'.*'</span> <span class=\"string\">'&#123;\"</span>ha-mode<span class=\"string\">\":\"</span>all<span class=\"string\">\"&#125;'</span></div></pre></td></tr></table></figure>\n<h3 id=\"cluster2-3加入集群\"><a href=\"#cluster2-3加入集群\" class=\"headerlink\" title=\"cluster2,3加入集群\"></a>cluster2,3加入集群</h3><p>在<code>mq-cluster2</code>和<code>mq-cluster3</code>中分别执行:</p>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">rabbitmqctl</span> <span class=\"selector-tag\">stop_app</span></div><div class=\"line\"><span class=\"selector-tag\">rabbitmqctl</span> <span class=\"selector-tag\">join_cluster</span> <span class=\"selector-tag\">rabbit</span>@<span class=\"keyword\">mq</span>-<span class=\"keyword\">cluster1</span></div><div class=\"line\">rabbitmqctl start_app</div></pre></td></tr></table></figure>\n<p>加入之后, 可以通过<code>rabbitmqctl cluster_status</code>来查看cluster状态.</p>\n<p>ps:</p>\n<blockquote>\n<p>默认加入是一<code>disc</code>模式加入,可以执行<code>rabbitmqctl change_cluster_node_type &lt;ram|disc&gt;</code>进行模式的修改</p>\n</blockquote>\n<p>以上是在rabbitmq 3.<em>中使用, 而在rabbitmq 2.</em>中使用:</p>\n<figure class=\"highlight less\"><table><tr><td class=\"code\"><pre><div class=\"line\">rabbitmqctl stop_app</div><div class=\"line\">rabbitmqctl force_cluster rabbit<span class=\"variable\">@mq-cluster1</span> # 不加自己的node_name, 是ram模式</div><div class=\"line\">rabbitmqctl force_cluster rabbit<span class=\"variable\">@mq-cluster1</span> rabbit<span class=\"variable\">@mq-cluster2</span> # 加自己的node_name, 是disc模式</div><div class=\"line\">rabbitmqctl start_app</div></pre></td></tr></table></figure>\n<h3 id=\"测试rabbitmq的ha\"><a href=\"#测试rabbitmq的ha\" class=\"headerlink\" title=\"测试rabbitmq的ha\"></a>测试rabbitmq的ha</h3><p>测试的python代码,依次发送消息到三个rabbitmq-server中,</p>\n<figure class=\"highlight nix\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></div><div class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">import</span> pika</div><div class=\"line\"></div><div class=\"line\"><span class=\"attr\">mq_servers</span> = ['<span class=\"number\">10.22</span>.<span class=\"number\">129.57</span>', '<span class=\"number\">10.22</span>.<span class=\"number\">129.58</span>', '<span class=\"number\">10.22</span>.<span class=\"number\">129.59</span>']</div><div class=\"line\"><span class=\"attr\">mq_exchange</span> = 'test_exchange'</div><div class=\"line\"></div><div class=\"line\"><span class=\"attr\">queue_name</span> = 'test'</div><div class=\"line\"><span class=\"attr\">routing_key</span> = 'test.test'</div><div class=\"line\"><span class=\"attr\">message</span> = 'msg'</div><div class=\"line\"></div><div class=\"line\">for mq_server <span class=\"keyword\">in</span> mq_exchange:</div><div class=\"line\">    try:</div><div class=\"line\">        <span class=\"attr\">connection</span> = pika.BlockingConnection(pika.ConnectionParameters(<span class=\"attr\">host=mq_server))</span></div><div class=\"line\">        <span class=\"attr\">channel</span> = connection.channel()</div><div class=\"line\">        channel.exchange_declare(<span class=\"attr\">exchange=mq_exchange,</span> <span class=\"attr\">type='topic',</span> <span class=\"attr\">durable=True,</span> <span class=\"attr\">auto_delete=False)</span></div><div class=\"line\">        channel.queue_declare(<span class=\"attr\">queue=queue_name,</span> <span class=\"attr\">durable=True,</span> <span class=\"attr\">exclusive=False,</span> <span class=\"attr\">auto_delete=False)</span></div><div class=\"line\">        channel.queue_bind(<span class=\"attr\">exchange=mq_exchange,</span> <span class=\"attr\">queue=queue_name,</span> <span class=\"attr\">routing_key=routing_key)</span></div><div class=\"line\"></div><div class=\"line\">        channel.basic_publish(<span class=\"attr\">exchange=mq_exchange,</span></div><div class=\"line\">                              <span class=\"attr\">routing_key=routing_key,</span></div><div class=\"line\">                              <span class=\"attr\">body=message,</span></div><div class=\"line\">                              <span class=\"attr\">properties=pika.BasicProperties(content_type='text/plain',</span></div><div class=\"line\">                                                              <span class=\"attr\">delivery_mode=2)</span></div><div class=\"line\">                              )</div><div class=\"line\"></div><div class=\"line\">        channel.close()</div><div class=\"line\">        connection.close()</div><div class=\"line\">        print 'success: ' + mq_server</div><div class=\"line\">    except:</div><div class=\"line\">        print 'failed: ' + mq_server</div></pre></td></tr></table></figure>\n<p>可以随机的操作去关闭任意一个<code>mq-cluster</code>上的<code>rabbitmq-server</code>服务, 再通过<code>rabbitmqctl list_queues</code>来查看消息的数量. 可以看到,尽管master挂了,消息依然能够发送成功,且当挂掉的机器(master或者slave)重新起起来之后,消息会马上同步过去.</p>\n<h3 id=\"搭建haproxy\"><a href=\"#搭建haproxy\" class=\"headerlink\" title=\"搭建haproxy\"></a>搭建haproxy</h3><p>安装和初始配置haproxy此处就从略.</p>\n<p>在配置好的<code>/etc/haproxy/haproxy.cfg</code>尾端加上以下内容</p>\n<figure class=\"highlight smali\"><table><tr><td class=\"code\"><pre><div class=\"line\">listen  rabbitmq 0.0.0.0:56720</div><div class=\"line\">    mode    tcp</div><div class=\"line\">    balance roundrobin</div><div class=\"line\">    option  tcplog</div><div class=\"line\">    option  tcpka</div><div class=\"line\">    server  rabbit1 192.168.100.67:5672<span class=\"built_in\"> check </span>inter 5000</div><div class=\"line\">    server  rabbit2 192.168.100.68:5672<span class=\"built_in\"> check </span>inter 5000</div><div class=\"line\">    server  rabbit3 192.168.100.69:5672<span class=\"built_in\"> check </span>inter 5000</div></pre></td></tr></table></figure>\n<p>接着启动haproxy</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"code\"><pre><div class=\"line\">haproxy -f /etc/haproxy/haproxy<span class=\"selector-class\">.cfg</span> -D</div></pre></td></tr></table></figure>\n<h3 id=\"测试rabbitmq的haproxy下的lb\"><a href=\"#测试rabbitmq的haproxy下的lb\" class=\"headerlink\" title=\"测试rabbitmq的haproxy下的lb\"></a>测试rabbitmq的haproxy下的lb</h3><p>将之前的测试代码中的</p>\n<figure class=\"highlight lsl\"><table><tr><td class=\"code\"><pre><div class=\"line\">mq_servers = ['<span class=\"number\">10.22</span><span class=\"number\">.129</span><span class=\"number\">.57</span>', '<span class=\"number\">10.22</span><span class=\"number\">.129</span><span class=\"number\">.58</span>', '<span class=\"number\">10.22</span><span class=\"number\">.129</span><span class=\"number\">.59</span>']</div></pre></td></tr></table></figure>\n<p>改成</p>\n<figure class=\"highlight lsl\"><table><tr><td class=\"code\"><pre><div class=\"line\">mq_servers = ['<span class=\"number\">10.22</span><span class=\"number\">.129</span><span class=\"number\">.53</span>', '<span class=\"number\">10.22</span><span class=\"number\">.129</span><span class=\"number\">.53</span>', '<span class=\"number\">10.22</span><span class=\"number\">.129</span><span class=\"number\">.53</span>']</div></pre></td></tr></table></figure>\n<p>执行测试代码,发现三个消息均发送成功,然后即使手动关闭其中一台mq,消息依然发送成功,通过<code>rabbitctl list_queues</code>也依然可以看到消息是成功收到３条的.</p>\n<p>至此，可以看到rabbitmq-server成功的解除了<code>single-point</code>状态.</p>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><ol>\n<li><a href=\"https://www.rabbitmq.com/ha.html\" target=\"_blank\" rel=\"external\">rabbitmq-ha</a></li>\n<li><a href=\"http://my.oschina.net/guol/blog/186445\" target=\"_blank\" rel=\"external\">rabbitmqctl命令介绍</a></li>\n<li><a href=\"http://yuhongchun.blog.51cto.com/1604432/697466\" target=\"_blank\" rel=\"external\">软件级负载均衡器(LVS/HAProxy/Nginx)的特点简介和对比</a></li>\n</ol>\n","excerpt":"","more":"<p>rabbitmq是使用erlang开发的,集群非常方便,且天生就支持并发分布式,但自身并不支持负载均衡. 常规的博客介绍都是说rabbitmq有几种部署模式,其中最常用的也就两种:</p>\n<ol>\n<li>单一模式: 就是不做ha…</li>\n<li>镜像模式模式: active/active模式的ha,当master挂掉了,按照策略选择某个slave(其实就是最先加入集群的那个slave)来担当master的角色</li>\n</ol>\n<p>下面就直接切入正题,在实际中该如何针对rabbitmq进行ha</p>\n<h3 id=\"配置网络环境\"><a href=\"#配置网络环境\" class=\"headerlink\" title=\"配置网络环境\"></a>配置网络环境</h3><p>实验中使用三台机器(mq-cluster1,2,3)来进行部署实验, 系统均为ubuntu-14.04, amd64, 直接将以下内容其加到<code>/etc/hosts</code>文件中.</p>\n<p>其中<code>mq-cluster1</code>为master,其余的为slave</p>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><div class=\"line\">10<span class=\"selector-class\">.22</span><span class=\"selector-class\">.129</span><span class=\"selector-class\">.57</span> <span class=\"selector-tag\">mq-cluster1</span></div><div class=\"line\">10<span class=\"selector-class\">.22</span><span class=\"selector-class\">.129</span><span class=\"selector-class\">.58</span> <span class=\"selector-tag\">mq-cluster2</span></div><div class=\"line\">10<span class=\"selector-class\">.22</span><span class=\"selector-class\">.129</span><span class=\"selector-class\">.59</span> <span class=\"selector-tag\">mq-cluster3</span></div></pre></td></tr></table></figure>\n<h3 id=\"安装rabbitmq-server\"><a href=\"#安装rabbitmq-server\" class=\"headerlink\" title=\"安装rabbitmq-server\"></a>安装rabbitmq-server</h3><figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><div class=\"line\">apt-get <span class=\"keyword\">install</span> -y rabbitmq-<span class=\"keyword\">server</span></div></pre></td></tr></table></figure>\n<h3 id=\"同步erlang-cookie文件\"><a href=\"#同步erlang-cookie文件\" class=\"headerlink\" title=\"同步erlang.cookie文件\"></a>同步erlang.cookie文件</h3><p>rabbitmq集群是依赖erlang的集群来工作的,所以要保证集群中每个rabbitmq的<code>/var/lib/rabbitmq/.erlang.cookie</code>内容是一样的.</p>\n<p>我是以<code>mq-cluster1</code>为master的,所以需要将其内容覆盖到<code>mq-cluster2</code>和<code>mq-cluster3</code>中</p>\n<figure class=\"highlight crystal\"><table><tr><td class=\"code\"><pre><div class=\"line\">service rabbitmq-server stop</div><div class=\"line\"><span class=\"comment\"># 你也可以选择其它方式来进行同步</span></div><div class=\"line\">scp root@mq-<span class=\"symbol\">cluster1:</span>/var/<span class=\"class\"><span class=\"keyword\">lib</span>/<span class=\"title\">rabbitmq</span>/.<span class=\"title\">erlang</span>.<span class=\"title\">cookie</span> /<span class=\"title\">var</span>/<span class=\"title\">lib</span>/<span class=\"title\">rabbitmq</span>/.<span class=\"title\">erlang</span>.<span class=\"title\">cookie</span></span></div><div class=\"line\">service rabbitmq-server start</div></pre></td></tr></table></figure>\n<h3 id=\"设置ha模式\"><a href=\"#设置ha模式\" class=\"headerlink\" title=\"设置ha模式\"></a>设置ha模式</h3><p><code>rabbitmqctl set_policy [-p &lt;vhostpath&gt;] [--priority &lt;priority&gt;] [--apply-to &lt;apply-to&gt;] &lt;name&gt; &lt;pattern&gt; &lt;definition&gt;</code></p>\n<ul>\n<li>name 策略名称</li>\n<li>pattern  正则表达式,用来匹配资源,符合的就会应用设置的策略</li>\n<li>definition 是json格式设置的策略。</li>\n<li>apply-to 表示策略应用到什么类型的地方,一般有queues,exchange和all,默认是all</li>\n<li>priority 是个整数优先级</li>\n</ul>\n<p>其中<code>ha-mode</code>有三种模式:</p>\n<ul>\n<li>all: 同步至所有的.</li>\n<li>exactly: 同步最多N个机器. 当现有集群机器数小于N时,同步所有,大于等于N时则不进行同步. N需要额外通过<code>ha-params</code>来指定.</li>\n<li>nodes: 只同步至符合指定名称的nodes. N需要额外通过<code>ha-params</code>来指定.</li>\n</ul>\n<figure class=\"highlight scilab\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 这里设置的是同步全部的queue, 可以按需自己选择指定的queue</span></div><div class=\"line\">rabbitmqctl  set_policy ha-all <span class=\"string\">'.*'</span> <span class=\"string\">'&#123;\"</span>ha-mode<span class=\"string\">\":\"</span>all<span class=\"string\">\"&#125;'</span></div></pre></td></tr></table></figure>\n<h3 id=\"cluster2-3加入集群\"><a href=\"#cluster2-3加入集群\" class=\"headerlink\" title=\"cluster2,3加入集群\"></a>cluster2,3加入集群</h3><p>在<code>mq-cluster2</code>和<code>mq-cluster3</code>中分别执行:</p>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">rabbitmqctl</span> <span class=\"selector-tag\">stop_app</span></div><div class=\"line\"><span class=\"selector-tag\">rabbitmqctl</span> <span class=\"selector-tag\">join_cluster</span> <span class=\"selector-tag\">rabbit</span>@<span class=\"keyword\">mq</span>-<span class=\"keyword\">cluster1</span></div><div class=\"line\">rabbitmqctl start_app</div></pre></td></tr></table></figure>\n<p>加入之后, 可以通过<code>rabbitmqctl cluster_status</code>来查看cluster状态.</p>\n<p>ps:</p>\n<blockquote>\n<p>默认加入是一<code>disc</code>模式加入,可以执行<code>rabbitmqctl change_cluster_node_type &lt;ram|disc&gt;</code>进行模式的修改</p>\n</blockquote>\n<p>以上是在rabbitmq 3.<em>中使用, 而在rabbitmq 2.</em>中使用:</p>\n<figure class=\"highlight less\"><table><tr><td class=\"code\"><pre><div class=\"line\">rabbitmqctl stop_app</div><div class=\"line\">rabbitmqctl force_cluster rabbit<span class=\"variable\">@mq-cluster1</span> # 不加自己的node_name, 是ram模式</div><div class=\"line\">rabbitmqctl force_cluster rabbit<span class=\"variable\">@mq-cluster1</span> rabbit<span class=\"variable\">@mq-cluster2</span> # 加自己的node_name, 是disc模式</div><div class=\"line\">rabbitmqctl start_app</div></pre></td></tr></table></figure>\n<h3 id=\"测试rabbitmq的ha\"><a href=\"#测试rabbitmq的ha\" class=\"headerlink\" title=\"测试rabbitmq的ha\"></a>测试rabbitmq的ha</h3><p>测试的python代码,依次发送消息到三个rabbitmq-server中,</p>\n<figure class=\"highlight nix\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></div><div class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">import</span> pika</div><div class=\"line\"></div><div class=\"line\"><span class=\"attr\">mq_servers</span> = ['<span class=\"number\">10.22</span>.<span class=\"number\">129.57</span>', '<span class=\"number\">10.22</span>.<span class=\"number\">129.58</span>', '<span class=\"number\">10.22</span>.<span class=\"number\">129.59</span>']</div><div class=\"line\"><span class=\"attr\">mq_exchange</span> = 'test_exchange'</div><div class=\"line\"></div><div class=\"line\"><span class=\"attr\">queue_name</span> = 'test'</div><div class=\"line\"><span class=\"attr\">routing_key</span> = 'test.test'</div><div class=\"line\"><span class=\"attr\">message</span> = 'msg'</div><div class=\"line\"></div><div class=\"line\">for mq_server <span class=\"keyword\">in</span> mq_exchange:</div><div class=\"line\">    try:</div><div class=\"line\">        <span class=\"attr\">connection</span> = pika.BlockingConnection(pika.ConnectionParameters(<span class=\"attr\">host=mq_server))</span></div><div class=\"line\">        <span class=\"attr\">channel</span> = connection.channel()</div><div class=\"line\">        channel.exchange_declare(<span class=\"attr\">exchange=mq_exchange,</span> <span class=\"attr\">type='topic',</span> <span class=\"attr\">durable=True,</span> <span class=\"attr\">auto_delete=False)</span></div><div class=\"line\">        channel.queue_declare(<span class=\"attr\">queue=queue_name,</span> <span class=\"attr\">durable=True,</span> <span class=\"attr\">exclusive=False,</span> <span class=\"attr\">auto_delete=False)</span></div><div class=\"line\">        channel.queue_bind(<span class=\"attr\">exchange=mq_exchange,</span> <span class=\"attr\">queue=queue_name,</span> <span class=\"attr\">routing_key=routing_key)</span></div><div class=\"line\"></div><div class=\"line\">        channel.basic_publish(<span class=\"attr\">exchange=mq_exchange,</span></div><div class=\"line\">                              <span class=\"attr\">routing_key=routing_key,</span></div><div class=\"line\">                              <span class=\"attr\">body=message,</span></div><div class=\"line\">                              <span class=\"attr\">properties=pika.BasicProperties(content_type='text/plain',</span></div><div class=\"line\">                                                              <span class=\"attr\">delivery_mode=2)</span></div><div class=\"line\">                              )</div><div class=\"line\"></div><div class=\"line\">        channel.close()</div><div class=\"line\">        connection.close()</div><div class=\"line\">        print 'success: ' + mq_server</div><div class=\"line\">    except:</div><div class=\"line\">        print 'failed: ' + mq_server</div></pre></td></tr></table></figure>\n<p>可以随机的操作去关闭任意一个<code>mq-cluster</code>上的<code>rabbitmq-server</code>服务, 再通过<code>rabbitmqctl list_queues</code>来查看消息的数量. 可以看到,尽管master挂了,消息依然能够发送成功,且当挂掉的机器(master或者slave)重新起起来之后,消息会马上同步过去.</p>\n<h3 id=\"搭建haproxy\"><a href=\"#搭建haproxy\" class=\"headerlink\" title=\"搭建haproxy\"></a>搭建haproxy</h3><p>安装和初始配置haproxy此处就从略.</p>\n<p>在配置好的<code>/etc/haproxy/haproxy.cfg</code>尾端加上以下内容</p>\n<figure class=\"highlight smali\"><table><tr><td class=\"code\"><pre><div class=\"line\">listen  rabbitmq 0.0.0.0:56720</div><div class=\"line\">    mode    tcp</div><div class=\"line\">    balance roundrobin</div><div class=\"line\">    option  tcplog</div><div class=\"line\">    option  tcpka</div><div class=\"line\">    server  rabbit1 192.168.100.67:5672<span class=\"built_in\"> check </span>inter 5000</div><div class=\"line\">    server  rabbit2 192.168.100.68:5672<span class=\"built_in\"> check </span>inter 5000</div><div class=\"line\">    server  rabbit3 192.168.100.69:5672<span class=\"built_in\"> check </span>inter 5000</div></pre></td></tr></table></figure>\n<p>接着启动haproxy</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"code\"><pre><div class=\"line\">haproxy -f /etc/haproxy/haproxy<span class=\"selector-class\">.cfg</span> -D</div></pre></td></tr></table></figure>\n<h3 id=\"测试rabbitmq的haproxy下的lb\"><a href=\"#测试rabbitmq的haproxy下的lb\" class=\"headerlink\" title=\"测试rabbitmq的haproxy下的lb\"></a>测试rabbitmq的haproxy下的lb</h3><p>将之前的测试代码中的</p>\n<figure class=\"highlight lsl\"><table><tr><td class=\"code\"><pre><div class=\"line\">mq_servers = ['<span class=\"number\">10.22</span><span class=\"number\">.129</span><span class=\"number\">.57</span>', '<span class=\"number\">10.22</span><span class=\"number\">.129</span><span class=\"number\">.58</span>', '<span class=\"number\">10.22</span><span class=\"number\">.129</span><span class=\"number\">.59</span>']</div></pre></td></tr></table></figure>\n<p>改成</p>\n<figure class=\"highlight lsl\"><table><tr><td class=\"code\"><pre><div class=\"line\">mq_servers = ['<span class=\"number\">10.22</span><span class=\"number\">.129</span><span class=\"number\">.53</span>', '<span class=\"number\">10.22</span><span class=\"number\">.129</span><span class=\"number\">.53</span>', '<span class=\"number\">10.22</span><span class=\"number\">.129</span><span class=\"number\">.53</span>']</div></pre></td></tr></table></figure>\n<p>执行测试代码,发现三个消息均发送成功,然后即使手动关闭其中一台mq,消息依然发送成功,通过<code>rabbitctl list_queues</code>也依然可以看到消息是成功收到３条的.</p>\n<p>至此，可以看到rabbitmq-server成功的解除了<code>single-point</code>状态.</p>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><ol>\n<li><a href=\"https://www.rabbitmq.com/ha.html\">rabbitmq-ha</a></li>\n<li><a href=\"http://my.oschina.net/guol/blog/186445\">rabbitmqctl命令介绍</a></li>\n<li><a href=\"http://yuhongchun.blog.51cto.com/1604432/697466\">软件级负载均衡器(LVS/HAProxy/Nginx)的特点简介和对比</a></li>\n</ol>\n"},{"title":"pypi本地源的搭建","date":"2014-07-07T16:00:00.000Z","_content":"\n介于Python的跨平台性，所以这里就不描述我本地的环境了\n\n## 安装pypimirror\n首先安装pypimirror\n\n    pip install z3c.pypimirror\n\n\n> 安装的过程中会会出现`BeautifulSoup`版本不匹配的报错\n\n    Downloading/unpacking BeautifulSoup<=3.0.9999 (from z3c.pypimirror)\n    Could not find a version that satisfies the requirement BeautifulSoup<=3.0.9999 (from z3c.pypimirror) (from versions: 3.2.0, 3.2.1)\n    Cleaning up...\n    No distributions matching the version for BeautifulSoup<=3.0.9999 (from z3c.pypimirror)\n    Storing debug log for failure in /home/topgear/.pip/pip.log\n\n\n将`/usr/local/lib/python2.7/dist-packages/z3c.pypimirror-1.0.16-py2.7.egg/EGG-INFO/requires.txt`文件修改一下即可. (这里我是ubuntu的，具体的发行版的配置可能会不一样)\n\n其中有一行是: `BeautifulSoup<=3.0.9999`, 将版本号去掉，即改成:`BeautifulSoup`. 改完之后再重新执行上面的安装命令即可.\n\n\n## 配置pypimirror.cfg\n配置pypimirror.cfg文件，保存路径无所谓\n\n    [DEFAULT]\n    # 镜像文件的本地存放路径\n    mirror_file_path = /opt/pypi/\n\n    # 远程镜像的url\n    base_url =  http://0.0.0.0/pypi\n\n    # 日志文件\n    log_filename = /var/log/pypi-mirror.log\n\n    # 防止重复运行的锁文件\n    lock_file_name = /tmp/pypi-mirror.lock\n\n    # days to fetch in past on update\n    fetch_since_days = 1\n\n    # 需要进行镜像拷贝的文件类型，不在列表中的则不进行拷贝\n    filename_matches =\n        *.zip\n        *.tgz\n        *.egg\n        *.tar.gz\n        *.tar.bz2\n\n    # 需要进行镜像拷贝的文件名称，不在列表中的则不进行拷贝\n    # 默认拷贝全部，上面已经删选了类型\n    package_matches =\n        *\n\n    # 删除本地有而服务器上没有的包\n    # 默认是True，会进行删除的，此处我调整为False\n    cleanup = False\n\n    # 创建索引文件\n    create_indexes = True\n\n    # 显示相信信息\n    verbose = True\n\n\n## 拷贝远程镜像\n\n> 执行`pypimirror -h` 可以看到pypimirror的帮助信息\n\n> -I: 初始化镜像\n\n> -U: 更新镜像(当已经初始化过了，只需要进行同步的更新)\n\n> -i: 为本地文件创建索引\n\n> -c: 同时输出到console中\n\n> -v: 显示详细信息\n\n\n\n    pypimirror -c -v -I pypimirror.cfg # 第一次需要初始化\n    pypimirror -c -v -U pypimirror.cfg # 如果已经存在本地镜像了则可以进行更新\n\n\n\n## 创建本地索引\n\n    pypimirror -c -v -i pypimirror.cfg\n\n\n\n## 整合apache\n其实就是简单的执行一个软链接而已\n\n    ln -sf /opt/pypi /var/www/pypi\n\n\n\n## 使用本地源\n使用镜像源很简单，用-i指定就行了:\n\n    easy_install -i http://127.0.0.1/pypi/ django\n    pip install -i http://127.0.0.1/pypi/ django\n\n\n> 当然实际中你会发现有些源即使你指定了第三方的源(本地源)， 它竟然还是从官方的源去下载了, so(=￣ω￣=), 改下pip或者easy_install的源码，替换掉代码中hardcode的官方源吧.\n\n## 参考\n 0. [搭建本地pypi服务器](http://www.worldhello.net/2011/03/14/2357.html)\n 0. [Setting up a PyPI mirror](http://bluedynamics.com/articles/jens/setup-z3c.pypimirror)\n","source":"_posts/blog/pypi-mirror.md","raw":"---\ntitle: pypi本地源的搭建\ncategories: blog\ndate: 2014-07-08\n---\n\n介于Python的跨平台性，所以这里就不描述我本地的环境了\n\n## 安装pypimirror\n首先安装pypimirror\n\n    pip install z3c.pypimirror\n\n\n> 安装的过程中会会出现`BeautifulSoup`版本不匹配的报错\n\n    Downloading/unpacking BeautifulSoup<=3.0.9999 (from z3c.pypimirror)\n    Could not find a version that satisfies the requirement BeautifulSoup<=3.0.9999 (from z3c.pypimirror) (from versions: 3.2.0, 3.2.1)\n    Cleaning up...\n    No distributions matching the version for BeautifulSoup<=3.0.9999 (from z3c.pypimirror)\n    Storing debug log for failure in /home/topgear/.pip/pip.log\n\n\n将`/usr/local/lib/python2.7/dist-packages/z3c.pypimirror-1.0.16-py2.7.egg/EGG-INFO/requires.txt`文件修改一下即可. (这里我是ubuntu的，具体的发行版的配置可能会不一样)\n\n其中有一行是: `BeautifulSoup<=3.0.9999`, 将版本号去掉，即改成:`BeautifulSoup`. 改完之后再重新执行上面的安装命令即可.\n\n\n## 配置pypimirror.cfg\n配置pypimirror.cfg文件，保存路径无所谓\n\n    [DEFAULT]\n    # 镜像文件的本地存放路径\n    mirror_file_path = /opt/pypi/\n\n    # 远程镜像的url\n    base_url =  http://0.0.0.0/pypi\n\n    # 日志文件\n    log_filename = /var/log/pypi-mirror.log\n\n    # 防止重复运行的锁文件\n    lock_file_name = /tmp/pypi-mirror.lock\n\n    # days to fetch in past on update\n    fetch_since_days = 1\n\n    # 需要进行镜像拷贝的文件类型，不在列表中的则不进行拷贝\n    filename_matches =\n        *.zip\n        *.tgz\n        *.egg\n        *.tar.gz\n        *.tar.bz2\n\n    # 需要进行镜像拷贝的文件名称，不在列表中的则不进行拷贝\n    # 默认拷贝全部，上面已经删选了类型\n    package_matches =\n        *\n\n    # 删除本地有而服务器上没有的包\n    # 默认是True，会进行删除的，此处我调整为False\n    cleanup = False\n\n    # 创建索引文件\n    create_indexes = True\n\n    # 显示相信信息\n    verbose = True\n\n\n## 拷贝远程镜像\n\n> 执行`pypimirror -h` 可以看到pypimirror的帮助信息\n\n> -I: 初始化镜像\n\n> -U: 更新镜像(当已经初始化过了，只需要进行同步的更新)\n\n> -i: 为本地文件创建索引\n\n> -c: 同时输出到console中\n\n> -v: 显示详细信息\n\n\n\n    pypimirror -c -v -I pypimirror.cfg # 第一次需要初始化\n    pypimirror -c -v -U pypimirror.cfg # 如果已经存在本地镜像了则可以进行更新\n\n\n\n## 创建本地索引\n\n    pypimirror -c -v -i pypimirror.cfg\n\n\n\n## 整合apache\n其实就是简单的执行一个软链接而已\n\n    ln -sf /opt/pypi /var/www/pypi\n\n\n\n## 使用本地源\n使用镜像源很简单，用-i指定就行了:\n\n    easy_install -i http://127.0.0.1/pypi/ django\n    pip install -i http://127.0.0.1/pypi/ django\n\n\n> 当然实际中你会发现有些源即使你指定了第三方的源(本地源)， 它竟然还是从官方的源去下载了, so(=￣ω￣=), 改下pip或者easy_install的源码，替换掉代码中hardcode的官方源吧.\n\n## 参考\n 0. [搭建本地pypi服务器](http://www.worldhello.net/2011/03/14/2357.html)\n 0. [Setting up a PyPI mirror](http://bluedynamics.com/articles/jens/setup-z3c.pypimirror)\n","slug":"blog/pypi-mirror","published":1,"updated":"2016-07-17T11:34:29.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciuyae21f0015yt7lkw3m429v","content":"<p>介于Python的跨平台性，所以这里就不描述我本地的环境了</p>\n<h2 id=\"安装pypimirror\"><a href=\"#安装pypimirror\" class=\"headerlink\" title=\"安装pypimirror\"></a>安装pypimirror</h2><p>首先安装pypimirror</p>\n<pre><code>pip install z3c.pypimirror\n</code></pre><blockquote>\n<p>安装的过程中会会出现<code>BeautifulSoup</code>版本不匹配的报错</p>\n</blockquote>\n<pre><code>Downloading/unpacking BeautifulSoup&lt;=3.0.9999 (from z3c.pypimirror)\nCould not find a version that satisfies the requirement BeautifulSoup&lt;=3.0.9999 (from z3c.pypimirror) (from versions: 3.2.0, 3.2.1)\nCleaning up...\nNo distributions matching the version for BeautifulSoup&lt;=3.0.9999 (from z3c.pypimirror)\nStoring debug log for failure in /home/topgear/.pip/pip.log\n</code></pre><p>将<code>/usr/local/lib/python2.7/dist-packages/z3c.pypimirror-1.0.16-py2.7.egg/EGG-INFO/requires.txt</code>文件修改一下即可. (这里我是ubuntu的，具体的发行版的配置可能会不一样)</p>\n<p>其中有一行是: <code>BeautifulSoup&lt;=3.0.9999</code>, 将版本号去掉，即改成:<code>BeautifulSoup</code>. 改完之后再重新执行上面的安装命令即可.</p>\n<h2 id=\"配置pypimirror-cfg\"><a href=\"#配置pypimirror-cfg\" class=\"headerlink\" title=\"配置pypimirror.cfg\"></a>配置pypimirror.cfg</h2><p>配置pypimirror.cfg文件，保存路径无所谓</p>\n<pre><code>[DEFAULT]\n# 镜像文件的本地存放路径\nmirror_file_path = /opt/pypi/\n\n# 远程镜像的url\nbase_url =  http://0.0.0.0/pypi\n\n# 日志文件\nlog_filename = /var/log/pypi-mirror.log\n\n# 防止重复运行的锁文件\nlock_file_name = /tmp/pypi-mirror.lock\n\n# days to fetch in past on update\nfetch_since_days = 1\n\n# 需要进行镜像拷贝的文件类型，不在列表中的则不进行拷贝\nfilename_matches =\n    *.zip\n    *.tgz\n    *.egg\n    *.tar.gz\n    *.tar.bz2\n\n# 需要进行镜像拷贝的文件名称，不在列表中的则不进行拷贝\n# 默认拷贝全部，上面已经删选了类型\npackage_matches =\n    *\n\n# 删除本地有而服务器上没有的包\n# 默认是True，会进行删除的，此处我调整为False\ncleanup = False\n\n# 创建索引文件\ncreate_indexes = True\n\n# 显示相信信息\nverbose = True\n</code></pre><h2 id=\"拷贝远程镜像\"><a href=\"#拷贝远程镜像\" class=\"headerlink\" title=\"拷贝远程镜像\"></a>拷贝远程镜像</h2><blockquote>\n<p>执行<code>pypimirror -h</code> 可以看到pypimirror的帮助信息</p>\n<p>-I: 初始化镜像</p>\n<p>-U: 更新镜像(当已经初始化过了，只需要进行同步的更新)</p>\n<p>-i: 为本地文件创建索引</p>\n<p>-c: 同时输出到console中</p>\n<p>-v: 显示详细信息</p>\n</blockquote>\n<pre><code>pypimirror -c -v -I pypimirror.cfg # 第一次需要初始化\npypimirror -c -v -U pypimirror.cfg # 如果已经存在本地镜像了则可以进行更新\n</code></pre><h2 id=\"创建本地索引\"><a href=\"#创建本地索引\" class=\"headerlink\" title=\"创建本地索引\"></a>创建本地索引</h2><pre><code>pypimirror -c -v -i pypimirror.cfg\n</code></pre><h2 id=\"整合apache\"><a href=\"#整合apache\" class=\"headerlink\" title=\"整合apache\"></a>整合apache</h2><p>其实就是简单的执行一个软链接而已</p>\n<pre><code>ln -sf /opt/pypi /var/www/pypi\n</code></pre><h2 id=\"使用本地源\"><a href=\"#使用本地源\" class=\"headerlink\" title=\"使用本地源\"></a>使用本地源</h2><p>使用镜像源很简单，用-i指定就行了:</p>\n<pre><code>easy_install -i http://127.0.0.1/pypi/ django\npip install -i http://127.0.0.1/pypi/ django\n</code></pre><blockquote>\n<p>当然实际中你会发现有些源即使你指定了第三方的源(本地源)， 它竟然还是从官方的源去下载了, so(=￣ω￣=), 改下pip或者easy_install的源码，替换掉代码中hardcode的官方源吧.</p>\n</blockquote>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ol>\n<li><a href=\"http://www.worldhello.net/2011/03/14/2357.html\" target=\"_blank\" rel=\"external\">搭建本地pypi服务器</a></li>\n<li><a href=\"http://bluedynamics.com/articles/jens/setup-z3c.pypimirror\" target=\"_blank\" rel=\"external\">Setting up a PyPI mirror</a></li>\n</ol>\n","excerpt":"","more":"<p>介于Python的跨平台性，所以这里就不描述我本地的环境了</p>\n<h2 id=\"安装pypimirror\"><a href=\"#安装pypimirror\" class=\"headerlink\" title=\"安装pypimirror\"></a>安装pypimirror</h2><p>首先安装pypimirror</p>\n<pre><code>pip install z3c.pypimirror\n</code></pre><blockquote>\n<p>安装的过程中会会出现<code>BeautifulSoup</code>版本不匹配的报错</p>\n</blockquote>\n<pre><code>Downloading/unpacking BeautifulSoup&lt;=3.0.9999 (from z3c.pypimirror)\nCould not find a version that satisfies the requirement BeautifulSoup&lt;=3.0.9999 (from z3c.pypimirror) (from versions: 3.2.0, 3.2.1)\nCleaning up...\nNo distributions matching the version for BeautifulSoup&lt;=3.0.9999 (from z3c.pypimirror)\nStoring debug log for failure in /home/topgear/.pip/pip.log\n</code></pre><p>将<code>/usr/local/lib/python2.7/dist-packages/z3c.pypimirror-1.0.16-py2.7.egg/EGG-INFO/requires.txt</code>文件修改一下即可. (这里我是ubuntu的，具体的发行版的配置可能会不一样)</p>\n<p>其中有一行是: <code>BeautifulSoup&lt;=3.0.9999</code>, 将版本号去掉，即改成:<code>BeautifulSoup</code>. 改完之后再重新执行上面的安装命令即可.</p>\n<h2 id=\"配置pypimirror-cfg\"><a href=\"#配置pypimirror-cfg\" class=\"headerlink\" title=\"配置pypimirror.cfg\"></a>配置pypimirror.cfg</h2><p>配置pypimirror.cfg文件，保存路径无所谓</p>\n<pre><code>[DEFAULT]\n# 镜像文件的本地存放路径\nmirror_file_path = /opt/pypi/\n\n# 远程镜像的url\nbase_url =  http://0.0.0.0/pypi\n\n# 日志文件\nlog_filename = /var/log/pypi-mirror.log\n\n# 防止重复运行的锁文件\nlock_file_name = /tmp/pypi-mirror.lock\n\n# days to fetch in past on update\nfetch_since_days = 1\n\n# 需要进行镜像拷贝的文件类型，不在列表中的则不进行拷贝\nfilename_matches =\n    *.zip\n    *.tgz\n    *.egg\n    *.tar.gz\n    *.tar.bz2\n\n# 需要进行镜像拷贝的文件名称，不在列表中的则不进行拷贝\n# 默认拷贝全部，上面已经删选了类型\npackage_matches =\n    *\n\n# 删除本地有而服务器上没有的包\n# 默认是True，会进行删除的，此处我调整为False\ncleanup = False\n\n# 创建索引文件\ncreate_indexes = True\n\n# 显示相信信息\nverbose = True\n</code></pre><h2 id=\"拷贝远程镜像\"><a href=\"#拷贝远程镜像\" class=\"headerlink\" title=\"拷贝远程镜像\"></a>拷贝远程镜像</h2><blockquote>\n<p>执行<code>pypimirror -h</code> 可以看到pypimirror的帮助信息</p>\n<p>-I: 初始化镜像</p>\n<p>-U: 更新镜像(当已经初始化过了，只需要进行同步的更新)</p>\n<p>-i: 为本地文件创建索引</p>\n<p>-c: 同时输出到console中</p>\n<p>-v: 显示详细信息</p>\n</blockquote>\n<pre><code>pypimirror -c -v -I pypimirror.cfg # 第一次需要初始化\npypimirror -c -v -U pypimirror.cfg # 如果已经存在本地镜像了则可以进行更新\n</code></pre><h2 id=\"创建本地索引\"><a href=\"#创建本地索引\" class=\"headerlink\" title=\"创建本地索引\"></a>创建本地索引</h2><pre><code>pypimirror -c -v -i pypimirror.cfg\n</code></pre><h2 id=\"整合apache\"><a href=\"#整合apache\" class=\"headerlink\" title=\"整合apache\"></a>整合apache</h2><p>其实就是简单的执行一个软链接而已</p>\n<pre><code>ln -sf /opt/pypi /var/www/pypi\n</code></pre><h2 id=\"使用本地源\"><a href=\"#使用本地源\" class=\"headerlink\" title=\"使用本地源\"></a>使用本地源</h2><p>使用镜像源很简单，用-i指定就行了:</p>\n<pre><code>easy_install -i http://127.0.0.1/pypi/ django\npip install -i http://127.0.0.1/pypi/ django\n</code></pre><blockquote>\n<p>当然实际中你会发现有些源即使你指定了第三方的源(本地源)， 它竟然还是从官方的源去下载了, so(=￣ω￣=), 改下pip或者easy_install的源码，替换掉代码中hardcode的官方源吧.</p>\n</blockquote>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ol>\n<li><a href=\"http://www.worldhello.net/2011/03/14/2357.html\">搭建本地pypi服务器</a></li>\n<li><a href=\"http://bluedynamics.com/articles/jens/setup-z3c.pypimirror\">Setting up a PyPI mirror</a></li>\n</ol>\n"},{"title":"/etc/resolv.conf中search和domain的作用","date":"2013-12-20T16:00:00.000Z","_content":"\n对这个一开始是一种半解的，Google打不开，顺手百度了半天都找不出一个合理的解释。。无语中。\n\n\"nameserver\"指定要进行域名解析的dnsserver的IP地址。可以定义多个IP地址，按照顺序来请求\n\n\"domain\"指定本地的domain，如果查询时的域名没有包含\".\"，则会在此后面加上domain的值来进行解析\n\n\"search\"若搜索的域名没有找到，则将域名拼接上search来搜索。下面会有例子来说明。\n\n现实中有\"qing.blog.sina.com.cn\"，下面就以这个来说明，主要是说明\"domain\"和\"search\"的意义。\n\n/etc/resolv.conf配置如下\n\n    nameserver 192.168.1.1\n    nameserver 8.8.8.8\n    domain  sina.com.cn\n    search  sina.com baidu.com\n\n\n    ping qing.blog.sina.com.cn   ### 这里就老老实实的走nameserver吧\n    ping blog\n    ### 按顺序查找<strong>blog</strong>，<strong>blog.sina.com.cn</strong>,<strong>blog.sina.com</strong>和<strong>blog.baidu.com</strong>\n    ### 这里的顺序是<strong>nameserver,domain,search</strong>\n\n    ping qing.blog\n    ### 此处就只查找<strong>qing.blog</strong>，<strong>qing.blog.sina.com</strong>和<strong>qing.blog.baidu.com</strong>\n    ### 这里的顺序是<strong>nameserver,<s>domain,</s>search</strong>\n    ### domain此时没有起到作用，因为其定义是<strong>当搜索的domain没有\".\"时，则优先搜索domain，否则跳过</strong>\n\nOK，这里基本上就可以说明/etc/resolv.conf的配置了，简单明了\n\n\n写一篇博客，确实很花时间，这段时间比较忙，以后再抽空整理下学习OpenStack的心得。\n","source":"_posts/blog/resolv.conf-search-domain.md","raw":"---\ntitle:  /etc/resolv.conf中search和domain的作用\ncategories: blog\ndate: 2013-12-21\n---\n\n对这个一开始是一种半解的，Google打不开，顺手百度了半天都找不出一个合理的解释。。无语中。\n\n\"nameserver\"指定要进行域名解析的dnsserver的IP地址。可以定义多个IP地址，按照顺序来请求\n\n\"domain\"指定本地的domain，如果查询时的域名没有包含\".\"，则会在此后面加上domain的值来进行解析\n\n\"search\"若搜索的域名没有找到，则将域名拼接上search来搜索。下面会有例子来说明。\n\n现实中有\"qing.blog.sina.com.cn\"，下面就以这个来说明，主要是说明\"domain\"和\"search\"的意义。\n\n/etc/resolv.conf配置如下\n\n    nameserver 192.168.1.1\n    nameserver 8.8.8.8\n    domain  sina.com.cn\n    search  sina.com baidu.com\n\n\n    ping qing.blog.sina.com.cn   ### 这里就老老实实的走nameserver吧\n    ping blog\n    ### 按顺序查找<strong>blog</strong>，<strong>blog.sina.com.cn</strong>,<strong>blog.sina.com</strong>和<strong>blog.baidu.com</strong>\n    ### 这里的顺序是<strong>nameserver,domain,search</strong>\n\n    ping qing.blog\n    ### 此处就只查找<strong>qing.blog</strong>，<strong>qing.blog.sina.com</strong>和<strong>qing.blog.baidu.com</strong>\n    ### 这里的顺序是<strong>nameserver,<s>domain,</s>search</strong>\n    ### domain此时没有起到作用，因为其定义是<strong>当搜索的domain没有\".\"时，则优先搜索domain，否则跳过</strong>\n\nOK，这里基本上就可以说明/etc/resolv.conf的配置了，简单明了\n\n\n写一篇博客，确实很花时间，这段时间比较忙，以后再抽空整理下学习OpenStack的心得。\n","slug":"blog/resolv.conf-search-domain","published":1,"updated":"2016-07-17T11:34:36.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciuyae21h0018yt7ldzwxbz6b","content":"<p>对这个一开始是一种半解的，Google打不开，顺手百度了半天都找不出一个合理的解释。。无语中。</p>\n<p>“nameserver”指定要进行域名解析的dnsserver的IP地址。可以定义多个IP地址，按照顺序来请求</p>\n<p>“domain”指定本地的domain，如果查询时的域名没有包含”.”，则会在此后面加上domain的值来进行解析</p>\n<p>“search”若搜索的域名没有找到，则将域名拼接上search来搜索。下面会有例子来说明。</p>\n<p>现实中有”qing.blog.sina.com.cn”，下面就以这个来说明，主要是说明”domain”和”search”的意义。</p>\n<p>/etc/resolv.conf配置如下</p>\n<pre><code>nameserver 192.168.1.1\nnameserver 8.8.8.8\ndomain  sina.com.cn\nsearch  sina.com baidu.com\n\n\nping qing.blog.sina.com.cn   ### 这里就老老实实的走nameserver吧\nping blog\n### 按顺序查找&lt;strong&gt;blog&lt;/strong&gt;，&lt;strong&gt;blog.sina.com.cn&lt;/strong&gt;,&lt;strong&gt;blog.sina.com&lt;/strong&gt;和&lt;strong&gt;blog.baidu.com&lt;/strong&gt;\n### 这里的顺序是&lt;strong&gt;nameserver,domain,search&lt;/strong&gt;\n\nping qing.blog\n### 此处就只查找&lt;strong&gt;qing.blog&lt;/strong&gt;，&lt;strong&gt;qing.blog.sina.com&lt;/strong&gt;和&lt;strong&gt;qing.blog.baidu.com&lt;/strong&gt;\n### 这里的顺序是&lt;strong&gt;nameserver,&lt;s&gt;domain,&lt;/s&gt;search&lt;/strong&gt;\n### domain此时没有起到作用，因为其定义是&lt;strong&gt;当搜索的domain没有&quot;.&quot;时，则优先搜索domain，否则跳过&lt;/strong&gt;\n</code></pre><p>OK，这里基本上就可以说明/etc/resolv.conf的配置了，简单明了</p>\n<p>写一篇博客，确实很花时间，这段时间比较忙，以后再抽空整理下学习OpenStack的心得。</p>\n","excerpt":"","more":"<p>对这个一开始是一种半解的，Google打不开，顺手百度了半天都找不出一个合理的解释。。无语中。</p>\n<p>“nameserver”指定要进行域名解析的dnsserver的IP地址。可以定义多个IP地址，按照顺序来请求</p>\n<p>“domain”指定本地的domain，如果查询时的域名没有包含”.”，则会在此后面加上domain的值来进行解析</p>\n<p>“search”若搜索的域名没有找到，则将域名拼接上search来搜索。下面会有例子来说明。</p>\n<p>现实中有”qing.blog.sina.com.cn”，下面就以这个来说明，主要是说明”domain”和”search”的意义。</p>\n<p>/etc/resolv.conf配置如下</p>\n<pre><code>nameserver 192.168.1.1\nnameserver 8.8.8.8\ndomain  sina.com.cn\nsearch  sina.com baidu.com\n\n\nping qing.blog.sina.com.cn   ### 这里就老老实实的走nameserver吧\nping blog\n### 按顺序查找&lt;strong&gt;blog&lt;/strong&gt;，&lt;strong&gt;blog.sina.com.cn&lt;/strong&gt;,&lt;strong&gt;blog.sina.com&lt;/strong&gt;和&lt;strong&gt;blog.baidu.com&lt;/strong&gt;\n### 这里的顺序是&lt;strong&gt;nameserver,domain,search&lt;/strong&gt;\n\nping qing.blog\n### 此处就只查找&lt;strong&gt;qing.blog&lt;/strong&gt;，&lt;strong&gt;qing.blog.sina.com&lt;/strong&gt;和&lt;strong&gt;qing.blog.baidu.com&lt;/strong&gt;\n### 这里的顺序是&lt;strong&gt;nameserver,&lt;s&gt;domain,&lt;/s&gt;search&lt;/strong&gt;\n### domain此时没有起到作用，因为其定义是&lt;strong&gt;当搜索的domain没有&quot;.&quot;时，则优先搜索domain，否则跳过&lt;/strong&gt;\n</code></pre><p>OK，这里基本上就可以说明/etc/resolv.conf的配置了，简单明了</p>\n<p>写一篇博客，确实很花时间，这段时间比较忙，以后再抽空整理下学习OpenStack的心得。</p>\n"},{"title":"Textual UML","date":"2014-01-10T16:00:00.000Z","_content":"\n\n## 闲扯\n闲扯，就是扯下为啥我要写这篇博客。\n\ncode reading是门技术活，比必须理解别人的\"语无伦次\"，别人的\"方言\"，别人的\"头脑发热\"。好的程序员就像好的作家一样，那代码看起来，如行云流水，完全没有那种骂娘的念头，因为你看了觉得他有脑子。（这里顺便mark一下，中科院的[COS](http://zh.wikipedia.org/wiki/%E4%B8%AD%E5%9B%BD%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F)，国耻啊，切记）。\n\n但不管是好的代码，坏的代码，总有你需要整理的地方，整理一下便于理清思路。画流程图，是个很好的手段，只是可惜了，制作那些看着很舒服的类图，时序图是多么的繁琐。你要我用鼠标一个一个去拖那些UML还不如要了我的命呢。\n\n继续坚持我的原则：可以懒，但必须懒得有个性。\n\n作为一个合格的程序员来看，全手工的去画图是不合理的。懒得花时间去折腾那玩意，画图，呵呵，代码来画岂不是最合适不过的。\n\n<small>\n 顺便说下TEX的诞生:\n TEX的诞生，就是为了解决书籍排版的无奈的。想想，当你要更改其中一个页码，然后要一个一个地去修改页码，调整布局，加引用，调整公式图表等等，这个会让人疯的。。应该有不少人在完成各种论文的时候，都是采用这种蛮力法。Tex的诞生可谓提高了一部分生产力，其区别就像在用牛耕地的原始社会中突然出现了一辆现代化的农用机车。(不过，学习这种机车可不是那么一般人能够简单摸索出来的，Tex的难度更甚于此)\n</small>\n\n也就是说，要找一个DSL的语言来生成UML图吗([顺便扯下，UML是不是DSL呢](http://stackoverflow.com/questions/10518286/is-uml-a-domain-specific-language-dsl))？\n\n找了半天，有这么个网站可以比较好的介绍当前有那些UML工具，[textual版本的UML工具](http://modeling-languages.com/uml-tools/#textual)，当然他也有很多其他的图形化工具。（网站有段时间打不开，翻了墙也打不开，为了确保在你看到这个文章的时候也可以用）\n\n## 各种Textual UML工具\n### [yUml](yuml.me)\n由yuml.me提供，免费的http接口可以使用，结合[yuml](https://github.com/wandernauta/yuml)命令行工具，可以很快的在vim下面编写完。语法最为简单，功能倒也不弱。学习曲线相当的低呀，语法直接看官网的几个demo就搞定了。\n\n优点：\n1.学习曲线低\n2.基本功能都有\n3.图形话做得不错\n4.支持多种格式导出\n缺点：\n1.免费的只提供线上接口，商业版收费\n2.功能太少了点，图片不支持自定义\n3.不能识别现有代码，需要自己重新编写DSL。只能小范围的用用\n\n**Demo:**\n\n    [Customer]<>-orders*>[Order]\n    [Order]++-0..*>[LineItem]\n    [Order]-[note:Aggregate root.]\n\n<img src=\"http://yuml.me/0b63c209\" alt=\"yuml\">\n\n\n### [UML Graph](http://www.umlgraph.org)\n依赖Graphviz，开源力作，不过，是java的阵营。。如果你懂java，想生成个简单的图图框框之类的，速度也是很快的。\n\n优点：\n1.学习曲线也低，如果你懂java的话\n2.功能比较强大\n3.图形话很简洁，不过很geek，一个程序猿要个那么好的图干啥（不是自嘲）\n4.支持多种格式导出\n缺点：\n1.只支持java。同时若要完美的展示，必须现有的javadoc符合一定的格式才行\n2.编写起来太麻烦了，需要从一开始就书写符合规范的javadoc才行\n\n**Demo:**\n\n    /*\n    * Schema model\n    * UML User Guide p. 112\n    */\n\n    /**\n    * @opt operations\n    * @opt attributes\n    * @opt types\n    * @hidden\n    */\n    class UMLOptions {}\n\n    /* Define some types we use */\n    /** @hidden */\n    class Name {}\n    /** @hidden */\n    class Number {}\n\n    /**\n    * @has 1..* Member * Student\n    * @composed 1..* Has 1..* Department\n    */\n    class School {\n            Name name;\n            String address;\n            Number phone;\n            void addStudent() {}\n            void removeStudent() {}\n            void getStudent() {}\n            void getAllStudents() {}\n            void addDepartment() {}\n            void removeDepartment() {}\n            void getDepartment() {}\n            void getAllDepartments() {}\n    }\n\n    /**\n    * @has 1..* AssignedTo 1..* Instructor\n    * @assoc 1..* - 1..* Course\n    * @assoc 0..* - \"0..1 chairperson\" Instructor\n    */\n    class Department {\n            Name name;\n            void addInstructor() {}\n            void removeInstructor() {}\n            void getInstructor() {}\n            void getAllInstructors() {}\n    }\n\n    /**\n    * @assoc * Attends * Course\n    */\n    class Student {\n            Name name;\n            Number studentID;\n    }\n\n    class Course {\n            Name name;\n            Number courseID;\n    }\n\n    /**\n    * @assoc 1..* Teaches * Course\n    */\n    class Instructor {\n            Name name;\n    }\n\n<img src=\"http://www.umlgraph.org/doc/schema.gif\" alt=\"uml graph\">\n\n\n### [TextUML Toolkit](http://sourceforge.net/apps/mediawiki/textuml/index.php)\n与其他的相比，这个倒还提供一个IDE(基于Eclipse)，\n\n优点：\n1.学习曲线也低，语法长得像java\n2.功能比较强大\n3.图片基本可以实时的显示，IDE整合得不错\n4.支持多种格式导出\n缺点：\n1.长得像java，但它不是java。。需要自己从头编写\n2.IDE啊，太重量级了吧，尽管你还是跨平台的\n\n    package payment;\n\n    class PaymentMethod\n    end;\n\n    class Cheque specializes PaymentMethod\n    end;\n\n    class Paypal specializes PaymentMethod\n    end;\n\n    class CreditCard specializes PaymentMethod\n    end;\n\n    class Visa specializes CreditCard\n    end;\n\n    class AmericanExpress specializes CreditCard\n    end;\n\n    class Diners specializes CreditCard\n    end;\n\n    end.\n\n<img src=\"http://sourceforge.net/apps/mediawiki/textuml/nfs/project/t/te/textuml/6/6e/Tutorial-generalization.png\" alt=\"TextUML Toolkit\">\n\n### [MetaUML](http://metauml.sourceforge.net)\n几年没更新了，再加上语法也有点太冗余了，这个与现有的主流语言太迥异了，而且\n\n\n    Class.A(\"Point\")\n        (\"+x: int\",\n            \"+y: int\") ();\n\n    Class.B(\"Circle\")\n        (\"radius: int\")\n        (\"+getRadius(): int\",\n            \"+setRadius(r: int):void\");\n\n    topToBottom(45)(A, B);\n\n    drawObjects(A, B);\n\n    clink(aggregationUni)(A, B)\n\n<img src=\"http://metauml.sourceforge.net/old/images/class.png\" alt=\"metauml\">\n\n### [MODSL](https://code.google.com/p/modsl)\n哇，超级干练的语法，你看看就知道了，用这个来整理下代码是奇快无比的。直接将原来的代码copy过来稍作修改就可以了。看看下面的demo就知道了，相当简练。当然，其功能并不强大，只能称得上一个简单的。而且，好几点没有更新了，功能也一直维持在几个基本的功能。\n\n优点：\n1.简练，上手容易。\n2.可以作为一个Eclipse插件存在的，操作配置比较简单\n缺点：\n1.只支持类图和序列图\n2.生成的图片\n3.由内容编译生成图片略微麻烦了一点。没有直接提供原生的工具\n\n    collaboration diagram Sample {\n        Main->Lexer.tokenize();\n        Main->Parser.parse();\n        Main->GraphLayout.apply();\n        GraphLayout->SugiyamaLayout.apply();\n        GraphLayout->NodeLabelLayout.apply();\n        GraphLayout->EdgeLabelLayout.apply();\n        Main->RenderVisitor.apply(graph);\n        RenderVisitor->Graph.visit();\n    }\n\n<img src=\"http://modsl.googlecode.com/files/collab_sample.png\" alt=\"modsl\">\n\n\n### [PlantUML](http://plantuml.sourceforge.net/)\n功能极其强大，底层基于java。下载了个plant-uml的jar包之后，只用执行\n\n    java -jar plantuml.jar your_plantuml_file\n\n就会生成对应的png文件，速度很快的\n\n优点:\n1.功能真的很强大，基本上只有这一个支持像if-else这样的判断分支\n2.使用起来也很方便，直接一个jar包就可以搞定了\n3.图片的样式看起来听不错的\n4.资源支持相当丰富，不管是插件，还是文档还是demo都很多\n缺点:\n1.语法看着有点纠结，真心是独立的DSL\n2.需要安装java的\n\n    @startuml\n    (*)  --> \"check input\"\n    If \"input is verbose\" then\n    --> [Yes] \"turn on verbosity\"\n    --> \"run command\"\n    else\n    --> \"run command\"\n    Endif\n    -->(*)\n    @enduml\n\n<img src=\"http://plantuml.sourceforge.net/imgp/activity_004.png\"/>\n\n\n\n## 总结\n总体感觉，还是plantuml比较好，支持的功能特性最多，非常有助于使用其来好好的整理下代码的结构与流程，很接近原生的`思维导图`，所以个人感觉也可以用来制作思维导图的工具，文本式的生成，比鼠标拖来拖去效率高太多了。\n当然，如果有一个特定的工具能够将特定的代码转换成需要的DSL语言就非常美妙了。\n","source":"_posts/blog/textual-uml.md","raw":"---\ntitle:  Textual UML\ncategories: blog\ndate: 2014-01-11\n---\n\n\n## 闲扯\n闲扯，就是扯下为啥我要写这篇博客。\n\ncode reading是门技术活，比必须理解别人的\"语无伦次\"，别人的\"方言\"，别人的\"头脑发热\"。好的程序员就像好的作家一样，那代码看起来，如行云流水，完全没有那种骂娘的念头，因为你看了觉得他有脑子。（这里顺便mark一下，中科院的[COS](http://zh.wikipedia.org/wiki/%E4%B8%AD%E5%9B%BD%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F)，国耻啊，切记）。\n\n但不管是好的代码，坏的代码，总有你需要整理的地方，整理一下便于理清思路。画流程图，是个很好的手段，只是可惜了，制作那些看着很舒服的类图，时序图是多么的繁琐。你要我用鼠标一个一个去拖那些UML还不如要了我的命呢。\n\n继续坚持我的原则：可以懒，但必须懒得有个性。\n\n作为一个合格的程序员来看，全手工的去画图是不合理的。懒得花时间去折腾那玩意，画图，呵呵，代码来画岂不是最合适不过的。\n\n<small>\n 顺便说下TEX的诞生:\n TEX的诞生，就是为了解决书籍排版的无奈的。想想，当你要更改其中一个页码，然后要一个一个地去修改页码，调整布局，加引用，调整公式图表等等，这个会让人疯的。。应该有不少人在完成各种论文的时候，都是采用这种蛮力法。Tex的诞生可谓提高了一部分生产力，其区别就像在用牛耕地的原始社会中突然出现了一辆现代化的农用机车。(不过，学习这种机车可不是那么一般人能够简单摸索出来的，Tex的难度更甚于此)\n</small>\n\n也就是说，要找一个DSL的语言来生成UML图吗([顺便扯下，UML是不是DSL呢](http://stackoverflow.com/questions/10518286/is-uml-a-domain-specific-language-dsl))？\n\n找了半天，有这么个网站可以比较好的介绍当前有那些UML工具，[textual版本的UML工具](http://modeling-languages.com/uml-tools/#textual)，当然他也有很多其他的图形化工具。（网站有段时间打不开，翻了墙也打不开，为了确保在你看到这个文章的时候也可以用）\n\n## 各种Textual UML工具\n### [yUml](yuml.me)\n由yuml.me提供，免费的http接口可以使用，结合[yuml](https://github.com/wandernauta/yuml)命令行工具，可以很快的在vim下面编写完。语法最为简单，功能倒也不弱。学习曲线相当的低呀，语法直接看官网的几个demo就搞定了。\n\n优点：\n1.学习曲线低\n2.基本功能都有\n3.图形话做得不错\n4.支持多种格式导出\n缺点：\n1.免费的只提供线上接口，商业版收费\n2.功能太少了点，图片不支持自定义\n3.不能识别现有代码，需要自己重新编写DSL。只能小范围的用用\n\n**Demo:**\n\n    [Customer]<>-orders*>[Order]\n    [Order]++-0..*>[LineItem]\n    [Order]-[note:Aggregate root.]\n\n<img src=\"http://yuml.me/0b63c209\" alt=\"yuml\">\n\n\n### [UML Graph](http://www.umlgraph.org)\n依赖Graphviz，开源力作，不过，是java的阵营。。如果你懂java，想生成个简单的图图框框之类的，速度也是很快的。\n\n优点：\n1.学习曲线也低，如果你懂java的话\n2.功能比较强大\n3.图形话很简洁，不过很geek，一个程序猿要个那么好的图干啥（不是自嘲）\n4.支持多种格式导出\n缺点：\n1.只支持java。同时若要完美的展示，必须现有的javadoc符合一定的格式才行\n2.编写起来太麻烦了，需要从一开始就书写符合规范的javadoc才行\n\n**Demo:**\n\n    /*\n    * Schema model\n    * UML User Guide p. 112\n    */\n\n    /**\n    * @opt operations\n    * @opt attributes\n    * @opt types\n    * @hidden\n    */\n    class UMLOptions {}\n\n    /* Define some types we use */\n    /** @hidden */\n    class Name {}\n    /** @hidden */\n    class Number {}\n\n    /**\n    * @has 1..* Member * Student\n    * @composed 1..* Has 1..* Department\n    */\n    class School {\n            Name name;\n            String address;\n            Number phone;\n            void addStudent() {}\n            void removeStudent() {}\n            void getStudent() {}\n            void getAllStudents() {}\n            void addDepartment() {}\n            void removeDepartment() {}\n            void getDepartment() {}\n            void getAllDepartments() {}\n    }\n\n    /**\n    * @has 1..* AssignedTo 1..* Instructor\n    * @assoc 1..* - 1..* Course\n    * @assoc 0..* - \"0..1 chairperson\" Instructor\n    */\n    class Department {\n            Name name;\n            void addInstructor() {}\n            void removeInstructor() {}\n            void getInstructor() {}\n            void getAllInstructors() {}\n    }\n\n    /**\n    * @assoc * Attends * Course\n    */\n    class Student {\n            Name name;\n            Number studentID;\n    }\n\n    class Course {\n            Name name;\n            Number courseID;\n    }\n\n    /**\n    * @assoc 1..* Teaches * Course\n    */\n    class Instructor {\n            Name name;\n    }\n\n<img src=\"http://www.umlgraph.org/doc/schema.gif\" alt=\"uml graph\">\n\n\n### [TextUML Toolkit](http://sourceforge.net/apps/mediawiki/textuml/index.php)\n与其他的相比，这个倒还提供一个IDE(基于Eclipse)，\n\n优点：\n1.学习曲线也低，语法长得像java\n2.功能比较强大\n3.图片基本可以实时的显示，IDE整合得不错\n4.支持多种格式导出\n缺点：\n1.长得像java，但它不是java。。需要自己从头编写\n2.IDE啊，太重量级了吧，尽管你还是跨平台的\n\n    package payment;\n\n    class PaymentMethod\n    end;\n\n    class Cheque specializes PaymentMethod\n    end;\n\n    class Paypal specializes PaymentMethod\n    end;\n\n    class CreditCard specializes PaymentMethod\n    end;\n\n    class Visa specializes CreditCard\n    end;\n\n    class AmericanExpress specializes CreditCard\n    end;\n\n    class Diners specializes CreditCard\n    end;\n\n    end.\n\n<img src=\"http://sourceforge.net/apps/mediawiki/textuml/nfs/project/t/te/textuml/6/6e/Tutorial-generalization.png\" alt=\"TextUML Toolkit\">\n\n### [MetaUML](http://metauml.sourceforge.net)\n几年没更新了，再加上语法也有点太冗余了，这个与现有的主流语言太迥异了，而且\n\n\n    Class.A(\"Point\")\n        (\"+x: int\",\n            \"+y: int\") ();\n\n    Class.B(\"Circle\")\n        (\"radius: int\")\n        (\"+getRadius(): int\",\n            \"+setRadius(r: int):void\");\n\n    topToBottom(45)(A, B);\n\n    drawObjects(A, B);\n\n    clink(aggregationUni)(A, B)\n\n<img src=\"http://metauml.sourceforge.net/old/images/class.png\" alt=\"metauml\">\n\n### [MODSL](https://code.google.com/p/modsl)\n哇，超级干练的语法，你看看就知道了，用这个来整理下代码是奇快无比的。直接将原来的代码copy过来稍作修改就可以了。看看下面的demo就知道了，相当简练。当然，其功能并不强大，只能称得上一个简单的。而且，好几点没有更新了，功能也一直维持在几个基本的功能。\n\n优点：\n1.简练，上手容易。\n2.可以作为一个Eclipse插件存在的，操作配置比较简单\n缺点：\n1.只支持类图和序列图\n2.生成的图片\n3.由内容编译生成图片略微麻烦了一点。没有直接提供原生的工具\n\n    collaboration diagram Sample {\n        Main->Lexer.tokenize();\n        Main->Parser.parse();\n        Main->GraphLayout.apply();\n        GraphLayout->SugiyamaLayout.apply();\n        GraphLayout->NodeLabelLayout.apply();\n        GraphLayout->EdgeLabelLayout.apply();\n        Main->RenderVisitor.apply(graph);\n        RenderVisitor->Graph.visit();\n    }\n\n<img src=\"http://modsl.googlecode.com/files/collab_sample.png\" alt=\"modsl\">\n\n\n### [PlantUML](http://plantuml.sourceforge.net/)\n功能极其强大，底层基于java。下载了个plant-uml的jar包之后，只用执行\n\n    java -jar plantuml.jar your_plantuml_file\n\n就会生成对应的png文件，速度很快的\n\n优点:\n1.功能真的很强大，基本上只有这一个支持像if-else这样的判断分支\n2.使用起来也很方便，直接一个jar包就可以搞定了\n3.图片的样式看起来听不错的\n4.资源支持相当丰富，不管是插件，还是文档还是demo都很多\n缺点:\n1.语法看着有点纠结，真心是独立的DSL\n2.需要安装java的\n\n    @startuml\n    (*)  --> \"check input\"\n    If \"input is verbose\" then\n    --> [Yes] \"turn on verbosity\"\n    --> \"run command\"\n    else\n    --> \"run command\"\n    Endif\n    -->(*)\n    @enduml\n\n<img src=\"http://plantuml.sourceforge.net/imgp/activity_004.png\"/>\n\n\n\n## 总结\n总体感觉，还是plantuml比较好，支持的功能特性最多，非常有助于使用其来好好的整理下代码的结构与流程，很接近原生的`思维导图`，所以个人感觉也可以用来制作思维导图的工具，文本式的生成，比鼠标拖来拖去效率高太多了。\n当然，如果有一个特定的工具能够将特定的代码转换成需要的DSL语言就非常美妙了。\n","slug":"blog/textual-uml","published":1,"updated":"2016-07-17T11:42:32.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciuyae21i001ayt7le6ytruxf","content":"<h2 id=\"闲扯\"><a href=\"#闲扯\" class=\"headerlink\" title=\"闲扯\"></a>闲扯</h2><p>闲扯，就是扯下为啥我要写这篇博客。</p>\n<p>code reading是门技术活，比必须理解别人的”语无伦次”，别人的”方言”，别人的”头脑发热”。好的程序员就像好的作家一样，那代码看起来，如行云流水，完全没有那种骂娘的念头，因为你看了觉得他有脑子。（这里顺便mark一下，中科院的<a href=\"http://zh.wikipedia.org/wiki/%E4%B8%AD%E5%9B%BD%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F\" target=\"_blank\" rel=\"external\">COS</a>，国耻啊，切记）。</p>\n<p>但不管是好的代码，坏的代码，总有你需要整理的地方，整理一下便于理清思路。画流程图，是个很好的手段，只是可惜了，制作那些看着很舒服的类图，时序图是多么的繁琐。你要我用鼠标一个一个去拖那些UML还不如要了我的命呢。</p>\n<p>继续坚持我的原则：可以懒，但必须懒得有个性。</p>\n<p>作为一个合格的程序员来看，全手工的去画图是不合理的。懒得花时间去折腾那玩意，画图，呵呵，代码来画岂不是最合适不过的。</p>\n<p><small><br> 顺便说下TEX的诞生:<br> TEX的诞生，就是为了解决书籍排版的无奈的。想想，当你要更改其中一个页码，然后要一个一个地去修改页码，调整布局，加引用，调整公式图表等等，这个会让人疯的。。应该有不少人在完成各种论文的时候，都是采用这种蛮力法。Tex的诞生可谓提高了一部分生产力，其区别就像在用牛耕地的原始社会中突然出现了一辆现代化的农用机车。(不过，学习这种机车可不是那么一般人能够简单摸索出来的，Tex的难度更甚于此)<br></small></p>\n<p>也就是说，要找一个DSL的语言来生成UML图吗(<a href=\"http://stackoverflow.com/questions/10518286/is-uml-a-domain-specific-language-dsl\" target=\"_blank\" rel=\"external\">顺便扯下，UML是不是DSL呢</a>)？</p>\n<p>找了半天，有这么个网站可以比较好的介绍当前有那些UML工具，<a href=\"http://modeling-languages.com/uml-tools/#textual\" target=\"_blank\" rel=\"external\">textual版本的UML工具</a>，当然他也有很多其他的图形化工具。（网站有段时间打不开，翻了墙也打不开，为了确保在你看到这个文章的时候也可以用）</p>\n<h2 id=\"各种Textual-UML工具\"><a href=\"#各种Textual-UML工具\" class=\"headerlink\" title=\"各种Textual UML工具\"></a>各种Textual UML工具</h2><h3 id=\"yUml\"><a href=\"#yUml\" class=\"headerlink\" title=\"yUml\"></a><a href=\"yuml.me\">yUml</a></h3><p>由yuml.me提供，免费的http接口可以使用，结合<a href=\"https://github.com/wandernauta/yuml\" target=\"_blank\" rel=\"external\">yuml</a>命令行工具，可以很快的在vim下面编写完。语法最为简单，功能倒也不弱。学习曲线相当的低呀，语法直接看官网的几个demo就搞定了。</p>\n<p>优点：<br>1.学习曲线低<br>2.基本功能都有<br>3.图形话做得不错<br>4.支持多种格式导出<br>缺点：<br>1.免费的只提供线上接口，商业版收费<br>2.功能太少了点，图片不支持自定义<br>3.不能识别现有代码，需要自己重新编写DSL。只能小范围的用用</p>\n<p><strong>Demo:</strong></p>\n<pre><code>[Customer]&lt;&gt;-orders*&gt;[Order]\n[Order]++-0..*&gt;[LineItem]\n[Order]-[note:Aggregate root.]\n</code></pre><p><img src=\"http://yuml.me/0b63c209\" alt=\"yuml\"></p>\n<h3 id=\"UML-Graph\"><a href=\"#UML-Graph\" class=\"headerlink\" title=\"UML Graph\"></a><a href=\"http://www.umlgraph.org\" target=\"_blank\" rel=\"external\">UML Graph</a></h3><p>依赖Graphviz，开源力作，不过，是java的阵营。。如果你懂java，想生成个简单的图图框框之类的，速度也是很快的。</p>\n<p>优点：<br>1.学习曲线也低，如果你懂java的话<br>2.功能比较强大<br>3.图形话很简洁，不过很geek，一个程序猿要个那么好的图干啥（不是自嘲）<br>4.支持多种格式导出<br>缺点：<br>1.只支持java。同时若要完美的展示，必须现有的javadoc符合一定的格式才行<br>2.编写起来太麻烦了，需要从一开始就书写符合规范的javadoc才行</p>\n<p><strong>Demo:</strong></p>\n<pre><code>/*\n* Schema model\n* UML User Guide p. 112\n*/\n\n/**\n* @opt operations\n* @opt attributes\n* @opt types\n* @hidden\n*/\nclass UMLOptions {}\n\n/* Define some types we use */\n/** @hidden */\nclass Name {}\n/** @hidden */\nclass Number {}\n\n/**\n* @has 1..* Member * Student\n* @composed 1..* Has 1..* Department\n*/\nclass School {\n        Name name;\n        String address;\n        Number phone;\n        void addStudent() {}\n        void removeStudent() {}\n        void getStudent() {}\n        void getAllStudents() {}\n        void addDepartment() {}\n        void removeDepartment() {}\n        void getDepartment() {}\n        void getAllDepartments() {}\n}\n\n/**\n* @has 1..* AssignedTo 1..* Instructor\n* @assoc 1..* - 1..* Course\n* @assoc 0..* - &quot;0..1 chairperson&quot; Instructor\n*/\nclass Department {\n        Name name;\n        void addInstructor() {}\n        void removeInstructor() {}\n        void getInstructor() {}\n        void getAllInstructors() {}\n}\n\n/**\n* @assoc * Attends * Course\n*/\nclass Student {\n        Name name;\n        Number studentID;\n}\n\nclass Course {\n        Name name;\n        Number courseID;\n}\n\n/**\n* @assoc 1..* Teaches * Course\n*/\nclass Instructor {\n        Name name;\n}\n</code></pre><p><img src=\"http://www.umlgraph.org/doc/schema.gif\" alt=\"uml graph\"></p>\n<h3 id=\"TextUML-Toolkit\"><a href=\"#TextUML-Toolkit\" class=\"headerlink\" title=\"TextUML Toolkit\"></a><a href=\"http://sourceforge.net/apps/mediawiki/textuml/index.php\" target=\"_blank\" rel=\"external\">TextUML Toolkit</a></h3><p>与其他的相比，这个倒还提供一个IDE(基于Eclipse)，</p>\n<p>优点：<br>1.学习曲线也低，语法长得像java<br>2.功能比较强大<br>3.图片基本可以实时的显示，IDE整合得不错<br>4.支持多种格式导出<br>缺点：<br>1.长得像java，但它不是java。。需要自己从头编写<br>2.IDE啊，太重量级了吧，尽管你还是跨平台的</p>\n<pre><code>package payment;\n\nclass PaymentMethod\nend;\n\nclass Cheque specializes PaymentMethod\nend;\n\nclass Paypal specializes PaymentMethod\nend;\n\nclass CreditCard specializes PaymentMethod\nend;\n\nclass Visa specializes CreditCard\nend;\n\nclass AmericanExpress specializes CreditCard\nend;\n\nclass Diners specializes CreditCard\nend;\n\nend.\n</code></pre><p><img src=\"http://sourceforge.net/apps/mediawiki/textuml/nfs/project/t/te/textuml/6/6e/Tutorial-generalization.png\" alt=\"TextUML Toolkit\"></p>\n<h3 id=\"MetaUML\"><a href=\"#MetaUML\" class=\"headerlink\" title=\"MetaUML\"></a><a href=\"http://metauml.sourceforge.net\" target=\"_blank\" rel=\"external\">MetaUML</a></h3><p>几年没更新了，再加上语法也有点太冗余了，这个与现有的主流语言太迥异了，而且</p>\n<pre><code>Class.A(&quot;Point&quot;)\n    (&quot;+x: int&quot;,\n        &quot;+y: int&quot;) ();\n\nClass.B(&quot;Circle&quot;)\n    (&quot;radius: int&quot;)\n    (&quot;+getRadius(): int&quot;,\n        &quot;+setRadius(r: int):void&quot;);\n\ntopToBottom(45)(A, B);\n\ndrawObjects(A, B);\n\nclink(aggregationUni)(A, B)\n</code></pre><p><img src=\"http://metauml.sourceforge.net/old/images/class.png\" alt=\"metauml\"></p>\n<h3 id=\"MODSL\"><a href=\"#MODSL\" class=\"headerlink\" title=\"MODSL\"></a><a href=\"https://code.google.com/p/modsl\" target=\"_blank\" rel=\"external\">MODSL</a></h3><p>哇，超级干练的语法，你看看就知道了，用这个来整理下代码是奇快无比的。直接将原来的代码copy过来稍作修改就可以了。看看下面的demo就知道了，相当简练。当然，其功能并不强大，只能称得上一个简单的。而且，好几点没有更新了，功能也一直维持在几个基本的功能。</p>\n<p>优点：<br>1.简练，上手容易。<br>2.可以作为一个Eclipse插件存在的，操作配置比较简单<br>缺点：<br>1.只支持类图和序列图<br>2.生成的图片<br>3.由内容编译生成图片略微麻烦了一点。没有直接提供原生的工具</p>\n<pre><code>collaboration diagram Sample {\n    Main-&gt;Lexer.tokenize();\n    Main-&gt;Parser.parse();\n    Main-&gt;GraphLayout.apply();\n    GraphLayout-&gt;SugiyamaLayout.apply();\n    GraphLayout-&gt;NodeLabelLayout.apply();\n    GraphLayout-&gt;EdgeLabelLayout.apply();\n    Main-&gt;RenderVisitor.apply(graph);\n    RenderVisitor-&gt;Graph.visit();\n}\n</code></pre><p><img src=\"http://modsl.googlecode.com/files/collab_sample.png\" alt=\"modsl\"></p>\n<h3 id=\"PlantUML\"><a href=\"#PlantUML\" class=\"headerlink\" title=\"PlantUML\"></a><a href=\"http://plantuml.sourceforge.net/\" target=\"_blank\" rel=\"external\">PlantUML</a></h3><p>功能极其强大，底层基于java。下载了个plant-uml的jar包之后，只用执行</p>\n<pre><code>java -jar plantuml.jar your_plantuml_file\n</code></pre><p>就会生成对应的png文件，速度很快的</p>\n<p>优点:<br>1.功能真的很强大，基本上只有这一个支持像if-else这样的判断分支<br>2.使用起来也很方便，直接一个jar包就可以搞定了<br>3.图片的样式看起来听不错的<br>4.资源支持相当丰富，不管是插件，还是文档还是demo都很多<br>缺点:<br>1.语法看着有点纠结，真心是独立的DSL<br>2.需要安装java的</p>\n<pre><code>@startuml\n(*)  --&gt; &quot;check input&quot;\nIf &quot;input is verbose&quot; then\n--&gt; [Yes] &quot;turn on verbosity&quot;\n--&gt; &quot;run command&quot;\nelse\n--&gt; &quot;run command&quot;\nEndif\n--&gt;(*)\n@enduml\n</code></pre><p><img src=\"http://plantuml.sourceforge.net/imgp/activity_004.png\"></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>总体感觉，还是plantuml比较好，支持的功能特性最多，非常有助于使用其来好好的整理下代码的结构与流程，很接近原生的<code>思维导图</code>，所以个人感觉也可以用来制作思维导图的工具，文本式的生成，比鼠标拖来拖去效率高太多了。<br>当然，如果有一个特定的工具能够将特定的代码转换成需要的DSL语言就非常美妙了。</p>\n","excerpt":"","more":"<h2 id=\"闲扯\"><a href=\"#闲扯\" class=\"headerlink\" title=\"闲扯\"></a>闲扯</h2><p>闲扯，就是扯下为啥我要写这篇博客。</p>\n<p>code reading是门技术活，比必须理解别人的”语无伦次”，别人的”方言”，别人的”头脑发热”。好的程序员就像好的作家一样，那代码看起来，如行云流水，完全没有那种骂娘的念头，因为你看了觉得他有脑子。（这里顺便mark一下，中科院的<a href=\"http://zh.wikipedia.org/wiki/%E4%B8%AD%E5%9B%BD%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F\">COS</a>，国耻啊，切记）。</p>\n<p>但不管是好的代码，坏的代码，总有你需要整理的地方，整理一下便于理清思路。画流程图，是个很好的手段，只是可惜了，制作那些看着很舒服的类图，时序图是多么的繁琐。你要我用鼠标一个一个去拖那些UML还不如要了我的命呢。</p>\n<p>继续坚持我的原则：可以懒，但必须懒得有个性。</p>\n<p>作为一个合格的程序员来看，全手工的去画图是不合理的。懒得花时间去折腾那玩意，画图，呵呵，代码来画岂不是最合适不过的。</p>\n<p><small><br> 顺便说下TEX的诞生:<br> TEX的诞生，就是为了解决书籍排版的无奈的。想想，当你要更改其中一个页码，然后要一个一个地去修改页码，调整布局，加引用，调整公式图表等等，这个会让人疯的。。应该有不少人在完成各种论文的时候，都是采用这种蛮力法。Tex的诞生可谓提高了一部分生产力，其区别就像在用牛耕地的原始社会中突然出现了一辆现代化的农用机车。(不过，学习这种机车可不是那么一般人能够简单摸索出来的，Tex的难度更甚于此)<br></small></p>\n<p>也就是说，要找一个DSL的语言来生成UML图吗(<a href=\"http://stackoverflow.com/questions/10518286/is-uml-a-domain-specific-language-dsl\">顺便扯下，UML是不是DSL呢</a>)？</p>\n<p>找了半天，有这么个网站可以比较好的介绍当前有那些UML工具，<a href=\"http://modeling-languages.com/uml-tools/#textual\">textual版本的UML工具</a>，当然他也有很多其他的图形化工具。（网站有段时间打不开，翻了墙也打不开，为了确保在你看到这个文章的时候也可以用）</p>\n<h2 id=\"各种Textual-UML工具\"><a href=\"#各种Textual-UML工具\" class=\"headerlink\" title=\"各种Textual UML工具\"></a>各种Textual UML工具</h2><h3 id=\"yUml\"><a href=\"#yUml\" class=\"headerlink\" title=\"yUml\"></a><a href=\"yuml.me\">yUml</a></h3><p>由yuml.me提供，免费的http接口可以使用，结合<a href=\"https://github.com/wandernauta/yuml\">yuml</a>命令行工具，可以很快的在vim下面编写完。语法最为简单，功能倒也不弱。学习曲线相当的低呀，语法直接看官网的几个demo就搞定了。</p>\n<p>优点：<br>1.学习曲线低<br>2.基本功能都有<br>3.图形话做得不错<br>4.支持多种格式导出<br>缺点：<br>1.免费的只提供线上接口，商业版收费<br>2.功能太少了点，图片不支持自定义<br>3.不能识别现有代码，需要自己重新编写DSL。只能小范围的用用</p>\n<p><strong>Demo:</strong></p>\n<pre><code>[Customer]&lt;&gt;-orders*&gt;[Order]\n[Order]++-0..*&gt;[LineItem]\n[Order]-[note:Aggregate root.]\n</code></pre><p><img src=\"http://yuml.me/0b63c209\" alt=\"yuml\"></p>\n<h3 id=\"UML-Graph\"><a href=\"#UML-Graph\" class=\"headerlink\" title=\"UML Graph\"></a><a href=\"http://www.umlgraph.org\">UML Graph</a></h3><p>依赖Graphviz，开源力作，不过，是java的阵营。。如果你懂java，想生成个简单的图图框框之类的，速度也是很快的。</p>\n<p>优点：<br>1.学习曲线也低，如果你懂java的话<br>2.功能比较强大<br>3.图形话很简洁，不过很geek，一个程序猿要个那么好的图干啥（不是自嘲）<br>4.支持多种格式导出<br>缺点：<br>1.只支持java。同时若要完美的展示，必须现有的javadoc符合一定的格式才行<br>2.编写起来太麻烦了，需要从一开始就书写符合规范的javadoc才行</p>\n<p><strong>Demo:</strong></p>\n<pre><code>/*\n* Schema model\n* UML User Guide p. 112\n*/\n\n/**\n* @opt operations\n* @opt attributes\n* @opt types\n* @hidden\n*/\nclass UMLOptions {}\n\n/* Define some types we use */\n/** @hidden */\nclass Name {}\n/** @hidden */\nclass Number {}\n\n/**\n* @has 1..* Member * Student\n* @composed 1..* Has 1..* Department\n*/\nclass School {\n        Name name;\n        String address;\n        Number phone;\n        void addStudent() {}\n        void removeStudent() {}\n        void getStudent() {}\n        void getAllStudents() {}\n        void addDepartment() {}\n        void removeDepartment() {}\n        void getDepartment() {}\n        void getAllDepartments() {}\n}\n\n/**\n* @has 1..* AssignedTo 1..* Instructor\n* @assoc 1..* - 1..* Course\n* @assoc 0..* - &quot;0..1 chairperson&quot; Instructor\n*/\nclass Department {\n        Name name;\n        void addInstructor() {}\n        void removeInstructor() {}\n        void getInstructor() {}\n        void getAllInstructors() {}\n}\n\n/**\n* @assoc * Attends * Course\n*/\nclass Student {\n        Name name;\n        Number studentID;\n}\n\nclass Course {\n        Name name;\n        Number courseID;\n}\n\n/**\n* @assoc 1..* Teaches * Course\n*/\nclass Instructor {\n        Name name;\n}\n</code></pre><p><img src=\"http://www.umlgraph.org/doc/schema.gif\" alt=\"uml graph\"></p>\n<h3 id=\"TextUML-Toolkit\"><a href=\"#TextUML-Toolkit\" class=\"headerlink\" title=\"TextUML Toolkit\"></a><a href=\"http://sourceforge.net/apps/mediawiki/textuml/index.php\">TextUML Toolkit</a></h3><p>与其他的相比，这个倒还提供一个IDE(基于Eclipse)，</p>\n<p>优点：<br>1.学习曲线也低，语法长得像java<br>2.功能比较强大<br>3.图片基本可以实时的显示，IDE整合得不错<br>4.支持多种格式导出<br>缺点：<br>1.长得像java，但它不是java。。需要自己从头编写<br>2.IDE啊，太重量级了吧，尽管你还是跨平台的</p>\n<pre><code>package payment;\n\nclass PaymentMethod\nend;\n\nclass Cheque specializes PaymentMethod\nend;\n\nclass Paypal specializes PaymentMethod\nend;\n\nclass CreditCard specializes PaymentMethod\nend;\n\nclass Visa specializes CreditCard\nend;\n\nclass AmericanExpress specializes CreditCard\nend;\n\nclass Diners specializes CreditCard\nend;\n\nend.\n</code></pre><p><img src=\"http://sourceforge.net/apps/mediawiki/textuml/nfs/project/t/te/textuml/6/6e/Tutorial-generalization.png\" alt=\"TextUML Toolkit\"></p>\n<h3 id=\"MetaUML\"><a href=\"#MetaUML\" class=\"headerlink\" title=\"MetaUML\"></a><a href=\"http://metauml.sourceforge.net\">MetaUML</a></h3><p>几年没更新了，再加上语法也有点太冗余了，这个与现有的主流语言太迥异了，而且</p>\n<pre><code>Class.A(&quot;Point&quot;)\n    (&quot;+x: int&quot;,\n        &quot;+y: int&quot;) ();\n\nClass.B(&quot;Circle&quot;)\n    (&quot;radius: int&quot;)\n    (&quot;+getRadius(): int&quot;,\n        &quot;+setRadius(r: int):void&quot;);\n\ntopToBottom(45)(A, B);\n\ndrawObjects(A, B);\n\nclink(aggregationUni)(A, B)\n</code></pre><p><img src=\"http://metauml.sourceforge.net/old/images/class.png\" alt=\"metauml\"></p>\n<h3 id=\"MODSL\"><a href=\"#MODSL\" class=\"headerlink\" title=\"MODSL\"></a><a href=\"https://code.google.com/p/modsl\">MODSL</a></h3><p>哇，超级干练的语法，你看看就知道了，用这个来整理下代码是奇快无比的。直接将原来的代码copy过来稍作修改就可以了。看看下面的demo就知道了，相当简练。当然，其功能并不强大，只能称得上一个简单的。而且，好几点没有更新了，功能也一直维持在几个基本的功能。</p>\n<p>优点：<br>1.简练，上手容易。<br>2.可以作为一个Eclipse插件存在的，操作配置比较简单<br>缺点：<br>1.只支持类图和序列图<br>2.生成的图片<br>3.由内容编译生成图片略微麻烦了一点。没有直接提供原生的工具</p>\n<pre><code>collaboration diagram Sample {\n    Main-&gt;Lexer.tokenize();\n    Main-&gt;Parser.parse();\n    Main-&gt;GraphLayout.apply();\n    GraphLayout-&gt;SugiyamaLayout.apply();\n    GraphLayout-&gt;NodeLabelLayout.apply();\n    GraphLayout-&gt;EdgeLabelLayout.apply();\n    Main-&gt;RenderVisitor.apply(graph);\n    RenderVisitor-&gt;Graph.visit();\n}\n</code></pre><p><img src=\"http://modsl.googlecode.com/files/collab_sample.png\" alt=\"modsl\"></p>\n<h3 id=\"PlantUML\"><a href=\"#PlantUML\" class=\"headerlink\" title=\"PlantUML\"></a><a href=\"http://plantuml.sourceforge.net/\">PlantUML</a></h3><p>功能极其强大，底层基于java。下载了个plant-uml的jar包之后，只用执行</p>\n<pre><code>java -jar plantuml.jar your_plantuml_file\n</code></pre><p>就会生成对应的png文件，速度很快的</p>\n<p>优点:<br>1.功能真的很强大，基本上只有这一个支持像if-else这样的判断分支<br>2.使用起来也很方便，直接一个jar包就可以搞定了<br>3.图片的样式看起来听不错的<br>4.资源支持相当丰富，不管是插件，还是文档还是demo都很多<br>缺点:<br>1.语法看着有点纠结，真心是独立的DSL<br>2.需要安装java的</p>\n<pre><code>@startuml\n(*)  --&gt; &quot;check input&quot;\nIf &quot;input is verbose&quot; then\n--&gt; [Yes] &quot;turn on verbosity&quot;\n--&gt; &quot;run command&quot;\nelse\n--&gt; &quot;run command&quot;\nEndif\n--&gt;(*)\n@enduml\n</code></pre><p><img src=\"http://plantuml.sourceforge.net/imgp/activity_004.png\"/></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>总体感觉，还是plantuml比较好，支持的功能特性最多，非常有助于使用其来好好的整理下代码的结构与流程，很接近原生的<code>思维导图</code>，所以个人感觉也可以用来制作思维导图的工具，文本式的生成，比鼠标拖来拖去效率高太多了。<br>当然，如果有一个特定的工具能够将特定的代码转换成需要的DSL语言就非常美妙了。</p>\n"},{"title":"Douban Movie Links","date":"2013-11-21T16:00:00.000Z","_content":"\n看电影，现在已经习惯了先在豆瓣上看下评分，然后再去各种找资源，其实也是那么几个常见的资源网站中下载，比如人人影视，BT天堂等。\n\n不过懒人么，呵呵，连复制粘贴搜索的欲望也是没有的，所以也就折腾出一个Chrome插件，加上5刀的成本，就捣鼓出一个插件（其实也就一个js脚本）。\n\n\n作用极其简单，就是在你打开豆瓣电影的页面的时候，会在下面加上一行，直接跳转到相应的电影下载页面中。\n\n<a href=\"https://chrome.google.com/webstore/detail/douban-movie-links/hcdgaoifogefhgdcbcgggkokjmbhicji\" title=\"Douban Movie Links\" target=\"_blank\"><img src=\"/images/project/Douban-Movie-Links-1.png\" alt=\"Douban Movie Links\"></a>\n\n代码中呢，没有嵌入jQuery，而是使用了[Zepto.js](http://zeptojs.com/)，缩小了点体积吧。\n\n\n另外呢，个人觉得，百度的离线下载做得很牛X的，基本上电影啥的，应有尽有吧，不过这段时间的盗版。。。先凑活着看吧\n","source":"_posts/project/douban-movie-links.md","raw":"---\ntitle:  Douban Movie Links\ncategories: project\ndate: 2013-11-22\ntags:\n- chrome\n- project\n---\n\n看电影，现在已经习惯了先在豆瓣上看下评分，然后再去各种找资源，其实也是那么几个常见的资源网站中下载，比如人人影视，BT天堂等。\n\n不过懒人么，呵呵，连复制粘贴搜索的欲望也是没有的，所以也就折腾出一个Chrome插件，加上5刀的成本，就捣鼓出一个插件（其实也就一个js脚本）。\n\n\n作用极其简单，就是在你打开豆瓣电影的页面的时候，会在下面加上一行，直接跳转到相应的电影下载页面中。\n\n<a href=\"https://chrome.google.com/webstore/detail/douban-movie-links/hcdgaoifogefhgdcbcgggkokjmbhicji\" title=\"Douban Movie Links\" target=\"_blank\"><img src=\"/images/project/Douban-Movie-Links-1.png\" alt=\"Douban Movie Links\"></a>\n\n代码中呢，没有嵌入jQuery，而是使用了[Zepto.js](http://zeptojs.com/)，缩小了点体积吧。\n\n\n另外呢，个人觉得，百度的离线下载做得很牛X的，基本上电影啥的，应有尽有吧，不过这段时间的盗版。。。先凑活着看吧\n","slug":"project/douban-movie-links","published":1,"updated":"2016-07-17T11:35:09.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciuyae21j001dyt7l4cvt9pdu","content":"<p>看电影，现在已经习惯了先在豆瓣上看下评分，然后再去各种找资源，其实也是那么几个常见的资源网站中下载，比如人人影视，BT天堂等。</p>\n<p>不过懒人么，呵呵，连复制粘贴搜索的欲望也是没有的，所以也就折腾出一个Chrome插件，加上5刀的成本，就捣鼓出一个插件（其实也就一个js脚本）。</p>\n<p>作用极其简单，就是在你打开豆瓣电影的页面的时候，会在下面加上一行，直接跳转到相应的电影下载页面中。</p>\n<p><a href=\"https://chrome.google.com/webstore/detail/douban-movie-links/hcdgaoifogefhgdcbcgggkokjmbhicji\" title=\"Douban Movie Links\" target=\"_blank\"><img src=\"/images/project/Douban-Movie-Links-1.png\" alt=\"Douban Movie Links\"></a></p>\n<p>代码中呢，没有嵌入jQuery，而是使用了<a href=\"http://zeptojs.com/\" target=\"_blank\" rel=\"external\">Zepto.js</a>，缩小了点体积吧。</p>\n<p>另外呢，个人觉得，百度的离线下载做得很牛X的，基本上电影啥的，应有尽有吧，不过这段时间的盗版。。。先凑活着看吧</p>\n","excerpt":"","more":"<p>看电影，现在已经习惯了先在豆瓣上看下评分，然后再去各种找资源，其实也是那么几个常见的资源网站中下载，比如人人影视，BT天堂等。</p>\n<p>不过懒人么，呵呵，连复制粘贴搜索的欲望也是没有的，所以也就折腾出一个Chrome插件，加上5刀的成本，就捣鼓出一个插件（其实也就一个js脚本）。</p>\n<p>作用极其简单，就是在你打开豆瓣电影的页面的时候，会在下面加上一行，直接跳转到相应的电影下载页面中。</p>\n<p><a href=\"https://chrome.google.com/webstore/detail/douban-movie-links/hcdgaoifogefhgdcbcgggkokjmbhicji\" title=\"Douban Movie Links\" target=\"_blank\"><img src=\"/images/project/Douban-Movie-Links-1.png\" alt=\"Douban Movie Links\"></a></p>\n<p>代码中呢，没有嵌入jQuery，而是使用了<a href=\"http://zeptojs.com/\">Zepto.js</a>，缩小了点体积吧。</p>\n<p>另外呢，个人觉得，百度的离线下载做得很牛X的，基本上电影啥的，应有尽有吧，不过这段时间的盗版。。。先凑活着看吧</p>\n"},{"title":"几个活用vim粘贴板的配置命令","date":"2014-04-02T16:00:00.000Z","_content":"\n追求更高的效率,那么总是会去折腾一些开发工具的快捷操作或者hack了,而其中vim的操作实在是存在各种hack.或许下面的几个你就没有怎么用过:\n\n(尽管是搜索运行之类的操作,但不用退出vim,也没有必要动用鼠标,够hack吧)\n\n先温习一下vim的剪贴板：\n\n 1. vim有12个粘贴板,分别是0、1、2、...、9、a、“、＋；用`:reg`命令可以查看各个粘贴板里的内容.\n 2. 在vim中简单用`y`只是复制到\"（双引号)粘贴板里,同样用`p`粘贴的也是这个粘贴板里的内容.\n 3. 在编辑/命令模式下,`Ctrl+R`+`粘贴板id`,就可以粘贴相应的内容\n\n#### 在shell中运行光标所在的行:\n**需求：**\n\n在用vim编写shell脚本(哪怕是博客)的过程中,有时候需要运行一两行命令.\n很多人可能是用鼠标复制一下,然后再退出或者在vim中加载子shell,再粘贴运行...\n\n在.vimrc中添加(我的leader映射成`,`)：\n\n    nmap <leader>e <ESC>:exec ':!'.getline('.')<CR>\n\n然后,光标移动到那特定的一行,按下`,e`,就可以直接在运行那一行的内容.\n\nDemo:\n\n<img src=\"/images/blog/vim_hack_01.gif\" width=\"100%\">\n\n\n#### 在vim中运行当前行:\n**需求：**\n只能运行完整的一行,好像显得很不够灵活呢,有没有可以让我先在visual模式下选中一段内容再运行呢？\n\n在.vimrc中添加(我的leader映射成`,`)：\n\n    vmap <leader>e <ESC>:exec ':!'.<C-R>\"\n\n那么在visual模式下选中相应内容,就可以快速执行了,注意使用了系统剪贴板.(这里我没有加回车,这样更方便自己来输入特定的参数了).\n\nDemo:\n\n<img src=\"/images/blog/vim_hack_02.gif\" width=\"100%\">\n\n\n#### 在vim中visual模式下,搜索选中的内容:\n**需求：**\n有时候需要搜索一段文字,要么是按下`/`,再老老实实的输入整个的内容,要么又是要动鼠标的节奏了..\n\n在.vimrc中添加(我的leader映射成`,`)：\n\n    vmap // y/<C-R>\"<CR>\n    vmap <leader>/ y/<C-R>\"<CR>\n\n那么在visual模式下选中,就可以快速搜索了.\n\nDemo:\n\n<img src=\"/images/blog/vim_hack_03.gif\" width=\"100%\">\n\n\nPS:\n\n 1. 截图软件是采用[ttyrec](https://github.com/mjording/ttyrec)和[ttygif](https://github.com/icholy/ttygif)来生成的.\n 2. 相应的vim其实也集成到了我的[repo](https://github.com/elvis-macak/elvis-repo)中(没有使用bundle)\n","source":"_posts/blog/vim-hack.md","raw":"---\ntitle:  几个活用vim粘贴板的配置命令\ncategories: blog\ndate: 2014-04-03\n---\n\n追求更高的效率,那么总是会去折腾一些开发工具的快捷操作或者hack了,而其中vim的操作实在是存在各种hack.或许下面的几个你就没有怎么用过:\n\n(尽管是搜索运行之类的操作,但不用退出vim,也没有必要动用鼠标,够hack吧)\n\n先温习一下vim的剪贴板：\n\n 1. vim有12个粘贴板,分别是0、1、2、...、9、a、“、＋；用`:reg`命令可以查看各个粘贴板里的内容.\n 2. 在vim中简单用`y`只是复制到\"（双引号)粘贴板里,同样用`p`粘贴的也是这个粘贴板里的内容.\n 3. 在编辑/命令模式下,`Ctrl+R`+`粘贴板id`,就可以粘贴相应的内容\n\n#### 在shell中运行光标所在的行:\n**需求：**\n\n在用vim编写shell脚本(哪怕是博客)的过程中,有时候需要运行一两行命令.\n很多人可能是用鼠标复制一下,然后再退出或者在vim中加载子shell,再粘贴运行...\n\n在.vimrc中添加(我的leader映射成`,`)：\n\n    nmap <leader>e <ESC>:exec ':!'.getline('.')<CR>\n\n然后,光标移动到那特定的一行,按下`,e`,就可以直接在运行那一行的内容.\n\nDemo:\n\n<img src=\"/images/blog/vim_hack_01.gif\" width=\"100%\">\n\n\n#### 在vim中运行当前行:\n**需求：**\n只能运行完整的一行,好像显得很不够灵活呢,有没有可以让我先在visual模式下选中一段内容再运行呢？\n\n在.vimrc中添加(我的leader映射成`,`)：\n\n    vmap <leader>e <ESC>:exec ':!'.<C-R>\"\n\n那么在visual模式下选中相应内容,就可以快速执行了,注意使用了系统剪贴板.(这里我没有加回车,这样更方便自己来输入特定的参数了).\n\nDemo:\n\n<img src=\"/images/blog/vim_hack_02.gif\" width=\"100%\">\n\n\n#### 在vim中visual模式下,搜索选中的内容:\n**需求：**\n有时候需要搜索一段文字,要么是按下`/`,再老老实实的输入整个的内容,要么又是要动鼠标的节奏了..\n\n在.vimrc中添加(我的leader映射成`,`)：\n\n    vmap // y/<C-R>\"<CR>\n    vmap <leader>/ y/<C-R>\"<CR>\n\n那么在visual模式下选中,就可以快速搜索了.\n\nDemo:\n\n<img src=\"/images/blog/vim_hack_03.gif\" width=\"100%\">\n\n\nPS:\n\n 1. 截图软件是采用[ttyrec](https://github.com/mjording/ttyrec)和[ttygif](https://github.com/icholy/ttygif)来生成的.\n 2. 相应的vim其实也集成到了我的[repo](https://github.com/elvis-macak/elvis-repo)中(没有使用bundle)\n","slug":"blog/vim-hack","published":1,"updated":"2016-07-17T11:38:34.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciuyae21k001fyt7lku0x74rm","content":"<p>追求更高的效率,那么总是会去折腾一些开发工具的快捷操作或者hack了,而其中vim的操作实在是存在各种hack.或许下面的几个你就没有怎么用过:</p>\n<p>(尽管是搜索运行之类的操作,但不用退出vim,也没有必要动用鼠标,够hack吧)</p>\n<p>先温习一下vim的剪贴板：</p>\n<ol>\n<li>vim有12个粘贴板,分别是0、1、2、…、9、a、“、＋；用<code>:reg</code>命令可以查看各个粘贴板里的内容.</li>\n<li>在vim中简单用<code>y</code>只是复制到”（双引号)粘贴板里,同样用<code>p</code>粘贴的也是这个粘贴板里的内容.</li>\n<li>在编辑/命令模式下,<code>Ctrl+R</code>+<code>粘贴板id</code>,就可以粘贴相应的内容</li>\n</ol>\n<h4 id=\"在shell中运行光标所在的行\"><a href=\"#在shell中运行光标所在的行\" class=\"headerlink\" title=\"在shell中运行光标所在的行:\"></a>在shell中运行光标所在的行:</h4><p><strong>需求：</strong></p>\n<p>在用vim编写shell脚本(哪怕是博客)的过程中,有时候需要运行一两行命令.<br>很多人可能是用鼠标复制一下,然后再退出或者在vim中加载子shell,再粘贴运行…</p>\n<p>在.vimrc中添加(我的leader映射成<code>,</code>)：</p>\n<pre><code>nmap &lt;leader&gt;e &lt;ESC&gt;:exec &apos;:!&apos;.getline(&apos;.&apos;)&lt;CR&gt;\n</code></pre><p>然后,光标移动到那特定的一行,按下<code>,e</code>,就可以直接在运行那一行的内容.</p>\n<p>Demo:</p>\n<p><img src=\"/images/blog/vim_hack_01.gif\" width=\"100%\"></p>\n<h4 id=\"在vim中运行当前行\"><a href=\"#在vim中运行当前行\" class=\"headerlink\" title=\"在vim中运行当前行:\"></a>在vim中运行当前行:</h4><p><strong>需求：</strong><br>只能运行完整的一行,好像显得很不够灵活呢,有没有可以让我先在visual模式下选中一段内容再运行呢？</p>\n<p>在.vimrc中添加(我的leader映射成<code>,</code>)：</p>\n<pre><code>vmap &lt;leader&gt;e &lt;ESC&gt;:exec &apos;:!&apos;.&lt;C-R&gt;&quot;\n</code></pre><p>那么在visual模式下选中相应内容,就可以快速执行了,注意使用了系统剪贴板.(这里我没有加回车,这样更方便自己来输入特定的参数了).</p>\n<p>Demo:</p>\n<p><img src=\"/images/blog/vim_hack_02.gif\" width=\"100%\"></p>\n<h4 id=\"在vim中visual模式下-搜索选中的内容\"><a href=\"#在vim中visual模式下-搜索选中的内容\" class=\"headerlink\" title=\"在vim中visual模式下,搜索选中的内容:\"></a>在vim中visual模式下,搜索选中的内容:</h4><p><strong>需求：</strong><br>有时候需要搜索一段文字,要么是按下<code>/</code>,再老老实实的输入整个的内容,要么又是要动鼠标的节奏了..</p>\n<p>在.vimrc中添加(我的leader映射成<code>,</code>)：</p>\n<pre><code>vmap // y/&lt;C-R&gt;&quot;&lt;CR&gt;\nvmap &lt;leader&gt;/ y/&lt;C-R&gt;&quot;&lt;CR&gt;\n</code></pre><p>那么在visual模式下选中,就可以快速搜索了.</p>\n<p>Demo:</p>\n<p><img src=\"/images/blog/vim_hack_03.gif\" width=\"100%\"></p>\n<p>PS:</p>\n<ol>\n<li>截图软件是采用<a href=\"https://github.com/mjording/ttyrec\" target=\"_blank\" rel=\"external\">ttyrec</a>和<a href=\"https://github.com/icholy/ttygif\" target=\"_blank\" rel=\"external\">ttygif</a>来生成的.</li>\n<li>相应的vim其实也集成到了我的<a href=\"https://github.com/elvis-macak/elvis-repo\" target=\"_blank\" rel=\"external\">repo</a>中(没有使用bundle)</li>\n</ol>\n","excerpt":"","more":"<p>追求更高的效率,那么总是会去折腾一些开发工具的快捷操作或者hack了,而其中vim的操作实在是存在各种hack.或许下面的几个你就没有怎么用过:</p>\n<p>(尽管是搜索运行之类的操作,但不用退出vim,也没有必要动用鼠标,够hack吧)</p>\n<p>先温习一下vim的剪贴板：</p>\n<ol>\n<li>vim有12个粘贴板,分别是0、1、2、…、9、a、“、＋；用<code>:reg</code>命令可以查看各个粘贴板里的内容.</li>\n<li>在vim中简单用<code>y</code>只是复制到”（双引号)粘贴板里,同样用<code>p</code>粘贴的也是这个粘贴板里的内容.</li>\n<li>在编辑/命令模式下,<code>Ctrl+R</code>+<code>粘贴板id</code>,就可以粘贴相应的内容</li>\n</ol>\n<h4 id=\"在shell中运行光标所在的行\"><a href=\"#在shell中运行光标所在的行\" class=\"headerlink\" title=\"在shell中运行光标所在的行:\"></a>在shell中运行光标所在的行:</h4><p><strong>需求：</strong></p>\n<p>在用vim编写shell脚本(哪怕是博客)的过程中,有时候需要运行一两行命令.<br>很多人可能是用鼠标复制一下,然后再退出或者在vim中加载子shell,再粘贴运行…</p>\n<p>在.vimrc中添加(我的leader映射成<code>,</code>)：</p>\n<pre><code>nmap &lt;leader&gt;e &lt;ESC&gt;:exec &apos;:!&apos;.getline(&apos;.&apos;)&lt;CR&gt;\n</code></pre><p>然后,光标移动到那特定的一行,按下<code>,e</code>,就可以直接在运行那一行的内容.</p>\n<p>Demo:</p>\n<p><img src=\"/images/blog/vim_hack_01.gif\" width=\"100%\"></p>\n<h4 id=\"在vim中运行当前行\"><a href=\"#在vim中运行当前行\" class=\"headerlink\" title=\"在vim中运行当前行:\"></a>在vim中运行当前行:</h4><p><strong>需求：</strong><br>只能运行完整的一行,好像显得很不够灵活呢,有没有可以让我先在visual模式下选中一段内容再运行呢？</p>\n<p>在.vimrc中添加(我的leader映射成<code>,</code>)：</p>\n<pre><code>vmap &lt;leader&gt;e &lt;ESC&gt;:exec &apos;:!&apos;.&lt;C-R&gt;&quot;\n</code></pre><p>那么在visual模式下选中相应内容,就可以快速执行了,注意使用了系统剪贴板.(这里我没有加回车,这样更方便自己来输入特定的参数了).</p>\n<p>Demo:</p>\n<p><img src=\"/images/blog/vim_hack_02.gif\" width=\"100%\"></p>\n<h4 id=\"在vim中visual模式下-搜索选中的内容\"><a href=\"#在vim中visual模式下-搜索选中的内容\" class=\"headerlink\" title=\"在vim中visual模式下,搜索选中的内容:\"></a>在vim中visual模式下,搜索选中的内容:</h4><p><strong>需求：</strong><br>有时候需要搜索一段文字,要么是按下<code>/</code>,再老老实实的输入整个的内容,要么又是要动鼠标的节奏了..</p>\n<p>在.vimrc中添加(我的leader映射成<code>,</code>)：</p>\n<pre><code>vmap // y/&lt;C-R&gt;&quot;&lt;CR&gt;\nvmap &lt;leader&gt;/ y/&lt;C-R&gt;&quot;&lt;CR&gt;\n</code></pre><p>那么在visual模式下选中,就可以快速搜索了.</p>\n<p>Demo:</p>\n<p><img src=\"/images/blog/vim_hack_03.gif\" width=\"100%\"></p>\n<p>PS:</p>\n<ol>\n<li>截图软件是采用<a href=\"https://github.com/mjording/ttyrec\">ttyrec</a>和<a href=\"https://github.com/icholy/ttygif\">ttygif</a>来生成的.</li>\n<li>相应的vim其实也集成到了我的<a href=\"https://github.com/elvis-macak/elvis-repo\">repo</a>中(没有使用bundle)</li>\n</ol>\n"},{"title":"Transcrypt --- Encrypt Git","date":"2016-09-29T08:55:52.000Z","_content":"\n## 背景\n\n在代码里面经常会有些敏感信息, 如db的配置, api-key等. 明文将这些信息保存在代码中肯定是不安全的, 如果将其统一/逐个保存在跟code无关的地方中, 也会存在着不安全, 缺乏版本控制及使用麻烦的问题.\n\n最好的方式就是, 将这个文件encrypt, 只有配置了能decrypt的key, 才能解开这些配置信息.\n\n[git-crypt](https://github.com/AGWA/git-crypt)和[Transcrypt](https://github.com/elasticdog/transcrypt)就是用来做这件事情, 前者需要单独编译安装, 后者只是一个独立的python shell脚本. So, 这里选择的就是后者.\n\n其他的特性可以参考其Github README的介绍, 如OpenSSL.\n\n## 下载/安装\n```shell\n# 从github上下载原文件\nwget https://raw.githubusercontent.com/elasticdog/transcrypt/master/transcrypt && chmod +x transcrypt\nmv transcrypt /usr/local/bin\n\n# 或者mac下使用Homebrew安装\nbrew install transcrypt\n```\n\n## 配置\n\n### encrypt新的repo\n\n```shell\ncd <path-to-your-repo>/\ntranscrypt\n\n# 可以看到repo encrypt的状态, 包括密码, 还会提示你如何decrypt一个已有的repo\ntranscrypt --display\n```\n\n> 按照提示来, 中间会要求输入你的密码, 这个密码最后也会出现在`.git/config`中, 也就是说只有.git中配置了相关的信息, 才能够正确的decrypt.\n\n执行完之后, 它会创建一个`.gitattributes`文件(如果没有的话), 里面用来指定哪些文件是被encrypt的. pattern匹配文件, 匹配模式和.gitignore一样.\n\n默认内容是:\n```\n$ cat .gitattributes\n#pattern  filter=crypt diff=crypt\n```\n\n假设有一个`secret.yml`文件需要被encrypt, 只需要执行, 很简单吧\n```\necho 'secret.yml filter=crypt diff=crypt' >> .gitattributes\ngit add .gitattributes secret.yml\n\n# commit时文件会自动被encrypt\ngit commit\n```\n\ncommit后可以执行下面的命令\n```\n# 列出当前哪些文件被encrypt\ntranscrypt --list\n\n# 查看文件被decrypt之前的raw data\ntranscrypt -s secret.yml\n\n# rekey 更换密码同时\ntranscrypt -r\n```\n\n至此, 完整的code repo中的敏感信息就已经完全的保存了\n\n### decrypt已有的repo\n\n如果要decrypt一个repo, 只需要执行下面这句即可\n```\ncd <path-to-your-repo>/\ntranscrypt -c aes-256-cbc -p 'your-password'\n```\n\n\n\n## 原理\n\n### .gitattributes\n> 如果你了解`.gitattributes`就可以忽略这段内容, 也可以直接参考https://git-scm.com/book/en/v2/Customizing-Git-Git-Attributes\n\ngit可以指定自定义的文件属性, 那么这个文件在被执行相应操作时可以执行特定的逻辑\n比如:\n\n- `pattern-file diff=func`\n  diff=func: 在执行`git diff`时先执行func后在去执行真正的diff, 这个可以用来diff word文档(使用docx2txt转换成txt)\n- `pattern-file export-ignore`\n  export-ignore: 在执行`git archive`时忽略该文件(夹)\n\n### .git/config\n其实他就加下了下面这段配置, 主要是定义了crypt的filter和diff, 这个在`.gitattributes`中被用到\n```conf\n[filter \"crypt\"]\n    clean = \\\"$(git rev-parse --show-toplevel)\\\"/.git/crypt/clean %f\n    smudge = \\\"$(git rev-parse --show-toplevel)\\\"/.git/crypt/smudge\n[diff \"crypt\"]\n    textconv = \\\"$(git rev-parse --show-toplevel)\\\"/.git/crypt/textconv\n[merge]\n\trenormalize = true\n[alias]\n\tls-crypt = \"!git ls-files | git check-attr --stdin filter | awk 'BEGIN { FS = \\\":\\\" }; /crypt$/{ print $1 }'\"\n```\n\n## 参考\n0. [Transcrypt](https://github.com/elasticdog/transcrypt)\n0. [Customizing-Git-Git-Attributes](https://git-scm.com/book/en/v2/Customizing-Git-Git-Attributes)\n","source":"_posts/blog/transcrypt-intro.md","raw":"---\ntitle: Transcrypt --- Encrypt Git\ndate: 2016-09-29 16:55:52\ntags:\n- transcrypt\n- git-encrypt\n- git\n---\n\n## 背景\n\n在代码里面经常会有些敏感信息, 如db的配置, api-key等. 明文将这些信息保存在代码中肯定是不安全的, 如果将其统一/逐个保存在跟code无关的地方中, 也会存在着不安全, 缺乏版本控制及使用麻烦的问题.\n\n最好的方式就是, 将这个文件encrypt, 只有配置了能decrypt的key, 才能解开这些配置信息.\n\n[git-crypt](https://github.com/AGWA/git-crypt)和[Transcrypt](https://github.com/elasticdog/transcrypt)就是用来做这件事情, 前者需要单独编译安装, 后者只是一个独立的python shell脚本. So, 这里选择的就是后者.\n\n其他的特性可以参考其Github README的介绍, 如OpenSSL.\n\n## 下载/安装\n```shell\n# 从github上下载原文件\nwget https://raw.githubusercontent.com/elasticdog/transcrypt/master/transcrypt && chmod +x transcrypt\nmv transcrypt /usr/local/bin\n\n# 或者mac下使用Homebrew安装\nbrew install transcrypt\n```\n\n## 配置\n\n### encrypt新的repo\n\n```shell\ncd <path-to-your-repo>/\ntranscrypt\n\n# 可以看到repo encrypt的状态, 包括密码, 还会提示你如何decrypt一个已有的repo\ntranscrypt --display\n```\n\n> 按照提示来, 中间会要求输入你的密码, 这个密码最后也会出现在`.git/config`中, 也就是说只有.git中配置了相关的信息, 才能够正确的decrypt.\n\n执行完之后, 它会创建一个`.gitattributes`文件(如果没有的话), 里面用来指定哪些文件是被encrypt的. pattern匹配文件, 匹配模式和.gitignore一样.\n\n默认内容是:\n```\n$ cat .gitattributes\n#pattern  filter=crypt diff=crypt\n```\n\n假设有一个`secret.yml`文件需要被encrypt, 只需要执行, 很简单吧\n```\necho 'secret.yml filter=crypt diff=crypt' >> .gitattributes\ngit add .gitattributes secret.yml\n\n# commit时文件会自动被encrypt\ngit commit\n```\n\ncommit后可以执行下面的命令\n```\n# 列出当前哪些文件被encrypt\ntranscrypt --list\n\n# 查看文件被decrypt之前的raw data\ntranscrypt -s secret.yml\n\n# rekey 更换密码同时\ntranscrypt -r\n```\n\n至此, 完整的code repo中的敏感信息就已经完全的保存了\n\n### decrypt已有的repo\n\n如果要decrypt一个repo, 只需要执行下面这句即可\n```\ncd <path-to-your-repo>/\ntranscrypt -c aes-256-cbc -p 'your-password'\n```\n\n\n\n## 原理\n\n### .gitattributes\n> 如果你了解`.gitattributes`就可以忽略这段内容, 也可以直接参考https://git-scm.com/book/en/v2/Customizing-Git-Git-Attributes\n\ngit可以指定自定义的文件属性, 那么这个文件在被执行相应操作时可以执行特定的逻辑\n比如:\n\n- `pattern-file diff=func`\n  diff=func: 在执行`git diff`时先执行func后在去执行真正的diff, 这个可以用来diff word文档(使用docx2txt转换成txt)\n- `pattern-file export-ignore`\n  export-ignore: 在执行`git archive`时忽略该文件(夹)\n\n### .git/config\n其实他就加下了下面这段配置, 主要是定义了crypt的filter和diff, 这个在`.gitattributes`中被用到\n```conf\n[filter \"crypt\"]\n    clean = \\\"$(git rev-parse --show-toplevel)\\\"/.git/crypt/clean %f\n    smudge = \\\"$(git rev-parse --show-toplevel)\\\"/.git/crypt/smudge\n[diff \"crypt\"]\n    textconv = \\\"$(git rev-parse --show-toplevel)\\\"/.git/crypt/textconv\n[merge]\n\trenormalize = true\n[alias]\n\tls-crypt = \"!git ls-files | git check-attr --stdin filter | awk 'BEGIN { FS = \\\":\\\" }; /crypt$/{ print $1 }'\"\n```\n\n## 参考\n0. [Transcrypt](https://github.com/elasticdog/transcrypt)\n0. [Customizing-Git-Git-Attributes](https://git-scm.com/book/en/v2/Customizing-Git-Git-Attributes)\n","slug":"blog/transcrypt-intro","published":1,"updated":"2016-10-31T16:30:46.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciuyae21l001iyt7l64gkwj9h","content":"<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>在代码里面经常会有些敏感信息, 如db的配置, api-key等. 明文将这些信息保存在代码中肯定是不安全的, 如果将其统一/逐个保存在跟code无关的地方中, 也会存在着不安全, 缺乏版本控制及使用麻烦的问题.</p>\n<p>最好的方式就是, 将这个文件encrypt, 只有配置了能decrypt的key, 才能解开这些配置信息.</p>\n<p><a href=\"https://github.com/AGWA/git-crypt\" target=\"_blank\" rel=\"external\">git-crypt</a>和<a href=\"https://github.com/elasticdog/transcrypt\" target=\"_blank\" rel=\"external\">Transcrypt</a>就是用来做这件事情, 前者需要单独编译安装, 后者只是一个独立的python shell脚本. So, 这里选择的就是后者.</p>\n<p>其他的特性可以参考其Github README的介绍, 如OpenSSL.</p>\n<h2 id=\"下载-安装\"><a href=\"#下载-安装\" class=\"headerlink\" title=\"下载/安装\"></a>下载/安装</h2><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\"># 从github上下载原文件</div><div class=\"line\">wget https://raw.githubusercontent.com/elasticdog/transcrypt/master/transcrypt &amp;&amp; chmod +x transcrypt</div><div class=\"line\">mv transcrypt /usr/local/bin</div><div class=\"line\"></div><div class=\"line\"># 或者mac下使用Homebrew安装</div><div class=\"line\">brew install transcrypt</div></pre></td></tr></table></figure>\n<h2 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h2><h3 id=\"encrypt新的repo\"><a href=\"#encrypt新的repo\" class=\"headerlink\" title=\"encrypt新的repo\"></a>encrypt新的repo</h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">cd &lt;path-to-your-repo&gt;/</div><div class=\"line\">transcrypt</div><div class=\"line\"></div><div class=\"line\"># 可以看到repo encrypt的状态, 包括密码, 还会提示你如何decrypt一个已有的repo</div><div class=\"line\">transcrypt --display</div></pre></td></tr></table></figure>\n<blockquote>\n<p>按照提示来, 中间会要求输入你的密码, 这个密码最后也会出现在<code>.git/config</code>中, 也就是说只有.git中配置了相关的信息, 才能够正确的decrypt.</p>\n</blockquote>\n<p>执行完之后, 它会创建一个<code>.gitattributes</code>文件(如果没有的话), 里面用来指定哪些文件是被encrypt的. pattern匹配文件, 匹配模式和.gitignore一样.</p>\n<p>默认内容是:<br><figure class=\"highlight stylus\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ cat <span class=\"selector-class\">.gitattributes</span></div><div class=\"line\"><span class=\"selector-id\">#pattern</span>  <span class=\"attribute\">filter</span>=crypt diff=crypt</div></pre></td></tr></table></figure></p>\n<p>假设有一个<code>secret.yml</code>文件需要被encrypt, 只需要执行, 很简单吧<br><figure class=\"highlight ruby\"><table><tr><td class=\"code\"><pre><div class=\"line\">echo <span class=\"string\">'secret.yml filter=crypt diff=crypt'</span> <span class=\"meta\">&gt;&gt; </span>.gitattributes</div><div class=\"line\">git add .gitattributes secret.yml</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># commit时文件会自动被encrypt</span></div><div class=\"line\">git commit</div></pre></td></tr></table></figure></p>\n<p>commit后可以执行下面的命令<br><figure class=\"highlight vala\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\"># 列出当前哪些文件被encrypt</span></div><div class=\"line\">transcrypt --list</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\"># 查看文件被decrypt之前的raw data</span></div><div class=\"line\">transcrypt -s secret.yml</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\"># rekey 更换密码同时</span></div><div class=\"line\">transcrypt -r</div></pre></td></tr></table></figure></p>\n<p>至此, 完整的code repo中的敏感信息就已经完全的保存了</p>\n<h3 id=\"decrypt已有的repo\"><a href=\"#decrypt已有的repo\" class=\"headerlink\" title=\"decrypt已有的repo\"></a>decrypt已有的repo</h3><p>如果要decrypt一个repo, 只需要执行下面这句即可<br><figure class=\"highlight stylus\"><table><tr><td class=\"code\"><pre><div class=\"line\">cd &lt;path-to-your-repo&gt;/</div><div class=\"line\">transcrypt -c aes-<span class=\"number\">256</span>-cbc -<span class=\"selector-tag\">p</span> <span class=\"string\">'your-password'</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h2><h3 id=\"gitattributes\"><a href=\"#gitattributes\" class=\"headerlink\" title=\".gitattributes\"></a>.gitattributes</h3><blockquote>\n<p>如果你了解<code>.gitattributes</code>就可以忽略这段内容, 也可以直接参考<a href=\"https://git-scm.com/book/en/v2/Customizing-Git-Git-Attributes\" target=\"_blank\" rel=\"external\">https://git-scm.com/book/en/v2/Customizing-Git-Git-Attributes</a></p>\n</blockquote>\n<p>git可以指定自定义的文件属性, 那么这个文件在被执行相应操作时可以执行特定的逻辑<br>比如:</p>\n<ul>\n<li><code>pattern-file diff=func</code><br>diff=func: 在执行<code>git diff</code>时先执行func后在去执行真正的diff, 这个可以用来diff word文档(使用docx2txt转换成txt)</li>\n<li><code>pattern-file export-ignore</code><br>export-ignore: 在执行<code>git archive</code>时忽略该文件(夹)</li>\n</ul>\n<h3 id=\"git-config\"><a href=\"#git-config\" class=\"headerlink\" title=\".git/config\"></a>.git/config</h3><p>其实他就加下了下面这段配置, 主要是定义了crypt的filter和diff, 这个在<code>.gitattributes</code>中被用到<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">[filter &quot;crypt&quot;]</div><div class=\"line\">    clean = \\&quot;$(git rev-parse --show-toplevel)\\&quot;/.git/crypt/clean %f</div><div class=\"line\">    smudge = \\&quot;$(git rev-parse --show-toplevel)\\&quot;/.git/crypt/smudge</div><div class=\"line\">[diff &quot;crypt&quot;]</div><div class=\"line\">    textconv = \\&quot;$(git rev-parse --show-toplevel)\\&quot;/.git/crypt/textconv</div><div class=\"line\">[merge]</div><div class=\"line\">\trenormalize = true</div><div class=\"line\">[alias]</div><div class=\"line\">\tls-crypt = &quot;!git ls-files | git check-attr --stdin filter | awk &apos;BEGIN &#123; FS = \\&quot;:\\&quot; &#125;; /crypt$/&#123; print $1 &#125;&apos;&quot;</div></pre></td></tr></table></figure></p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ol>\n<li><a href=\"https://github.com/elasticdog/transcrypt\" target=\"_blank\" rel=\"external\">Transcrypt</a></li>\n<li><a href=\"https://git-scm.com/book/en/v2/Customizing-Git-Git-Attributes\" target=\"_blank\" rel=\"external\">Customizing-Git-Git-Attributes</a></li>\n</ol>\n","excerpt":"","more":"<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>在代码里面经常会有些敏感信息, 如db的配置, api-key等. 明文将这些信息保存在代码中肯定是不安全的, 如果将其统一/逐个保存在跟code无关的地方中, 也会存在着不安全, 缺乏版本控制及使用麻烦的问题.</p>\n<p>最好的方式就是, 将这个文件encrypt, 只有配置了能decrypt的key, 才能解开这些配置信息.</p>\n<p><a href=\"https://github.com/AGWA/git-crypt\">git-crypt</a>和<a href=\"https://github.com/elasticdog/transcrypt\">Transcrypt</a>就是用来做这件事情, 前者需要单独编译安装, 后者只是一个独立的python shell脚本. So, 这里选择的就是后者.</p>\n<p>其他的特性可以参考其Github README的介绍, 如OpenSSL.</p>\n<h2 id=\"下载-安装\"><a href=\"#下载-安装\" class=\"headerlink\" title=\"下载/安装\"></a>下载/安装</h2><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\"># 从github上下载原文件</div><div class=\"line\">wget https://raw.githubusercontent.com/elasticdog/transcrypt/master/transcrypt &amp;&amp; chmod +x transcrypt</div><div class=\"line\">mv transcrypt /usr/local/bin</div><div class=\"line\"></div><div class=\"line\"># 或者mac下使用Homebrew安装</div><div class=\"line\">brew install transcrypt</div></pre></td></tr></table></figure>\n<h2 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h2><h3 id=\"encrypt新的repo\"><a href=\"#encrypt新的repo\" class=\"headerlink\" title=\"encrypt新的repo\"></a>encrypt新的repo</h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">cd &lt;path-to-your-repo&gt;/</div><div class=\"line\">transcrypt</div><div class=\"line\"></div><div class=\"line\"># 可以看到repo encrypt的状态, 包括密码, 还会提示你如何decrypt一个已有的repo</div><div class=\"line\">transcrypt --display</div></pre></td></tr></table></figure>\n<blockquote>\n<p>按照提示来, 中间会要求输入你的密码, 这个密码最后也会出现在<code>.git/config</code>中, 也就是说只有.git中配置了相关的信息, 才能够正确的decrypt.</p>\n</blockquote>\n<p>执行完之后, 它会创建一个<code>.gitattributes</code>文件(如果没有的话), 里面用来指定哪些文件是被encrypt的. pattern匹配文件, 匹配模式和.gitignore一样.</p>\n<p>默认内容是:<br><figure class=\"highlight stylus\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ cat <span class=\"selector-class\">.gitattributes</span></div><div class=\"line\"><span class=\"selector-id\">#pattern</span>  <span class=\"attribute\">filter</span>=crypt diff=crypt</div></pre></td></tr></table></figure></p>\n<p>假设有一个<code>secret.yml</code>文件需要被encrypt, 只需要执行, 很简单吧<br><figure class=\"highlight ruby\"><table><tr><td class=\"code\"><pre><div class=\"line\">echo <span class=\"string\">'secret.yml filter=crypt diff=crypt'</span> <span class=\"meta\">&gt;&gt; </span>.gitattributes</div><div class=\"line\">git add .gitattributes secret.yml</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># commit时文件会自动被encrypt</span></div><div class=\"line\">git commit</div></pre></td></tr></table></figure></p>\n<p>commit后可以执行下面的命令<br><figure class=\"highlight vala\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\"># 列出当前哪些文件被encrypt</span></div><div class=\"line\">transcrypt --list</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\"># 查看文件被decrypt之前的raw data</span></div><div class=\"line\">transcrypt -s secret.yml</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\"># rekey 更换密码同时</span></div><div class=\"line\">transcrypt -r</div></pre></td></tr></table></figure></p>\n<p>至此, 完整的code repo中的敏感信息就已经完全的保存了</p>\n<h3 id=\"decrypt已有的repo\"><a href=\"#decrypt已有的repo\" class=\"headerlink\" title=\"decrypt已有的repo\"></a>decrypt已有的repo</h3><p>如果要decrypt一个repo, 只需要执行下面这句即可<br><figure class=\"highlight stylus\"><table><tr><td class=\"code\"><pre><div class=\"line\">cd &lt;path-to-your-repo&gt;/</div><div class=\"line\">transcrypt -c aes-<span class=\"number\">256</span>-cbc -<span class=\"selector-tag\">p</span> <span class=\"string\">'your-password'</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h2><h3 id=\"gitattributes\"><a href=\"#gitattributes\" class=\"headerlink\" title=\".gitattributes\"></a>.gitattributes</h3><blockquote>\n<p>如果你了解<code>.gitattributes</code>就可以忽略这段内容, 也可以直接参考<a href=\"https://git-scm.com/book/en/v2/Customizing-Git-Git-Attributes\">https://git-scm.com/book/en/v2/Customizing-Git-Git-Attributes</a></p>\n</blockquote>\n<p>git可以指定自定义的文件属性, 那么这个文件在被执行相应操作时可以执行特定的逻辑<br>比如:</p>\n<ul>\n<li><code>pattern-file diff=func</code><br>diff=func: 在执行<code>git diff</code>时先执行func后在去执行真正的diff, 这个可以用来diff word文档(使用docx2txt转换成txt)</li>\n<li><code>pattern-file export-ignore</code><br>export-ignore: 在执行<code>git archive</code>时忽略该文件(夹)</li>\n</ul>\n<h3 id=\"git-config\"><a href=\"#git-config\" class=\"headerlink\" title=\".git/config\"></a>.git/config</h3><p>其实他就加下了下面这段配置, 主要是定义了crypt的filter和diff, 这个在<code>.gitattributes</code>中被用到<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">[filter &quot;crypt&quot;]</div><div class=\"line\">    clean = \\&quot;$(git rev-parse --show-toplevel)\\&quot;/.git/crypt/clean %f</div><div class=\"line\">    smudge = \\&quot;$(git rev-parse --show-toplevel)\\&quot;/.git/crypt/smudge</div><div class=\"line\">[diff &quot;crypt&quot;]</div><div class=\"line\">    textconv = \\&quot;$(git rev-parse --show-toplevel)\\&quot;/.git/crypt/textconv</div><div class=\"line\">[merge]</div><div class=\"line\">\trenormalize = true</div><div class=\"line\">[alias]</div><div class=\"line\">\tls-crypt = &quot;!git ls-files | git check-attr --stdin filter | awk &apos;BEGIN &#123; FS = \\&quot;:\\&quot; &#125;; /crypt$/&#123; print $1 &#125;&apos;&quot;</div></pre></td></tr></table></figure></p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ol>\n<li><a href=\"https://github.com/elasticdog/transcrypt\">Transcrypt</a></li>\n<li><a href=\"https://git-scm.com/book/en/v2/Customizing-Git-Git-Attributes\">Customizing-Git-Git-Attributes</a></li>\n</ol>\n"},{"title":"monkey scripts","date":"2014-04-02T16:00:00.000Z","_content":"\n\n只是留出一个接口,以前放在[BAE](http://developer.baidu.com/cloud/rt)上，不过丫的现在要收费了.\n\n### [monkey scripts](/project/monkeys/index.html)\n","source":"_posts/project/monkey-scripts.md","raw":"---\ntitle:  monkey scripts\ncategories: project\ndate: 2014-04-03\ntags:\n- chrome\n- project\n---\n\n\n只是留出一个接口,以前放在[BAE](http://developer.baidu.com/cloud/rt)上，不过丫的现在要收费了.\n\n### [monkey scripts](/project/monkeys/index.html)\n","slug":"project/monkey-scripts","published":1,"updated":"2016-07-17T11:38:57.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciuyae21m001lyt7lsdshgtxs","content":"<p>只是留出一个接口,以前放在<a href=\"http://developer.baidu.com/cloud/rt\" target=\"_blank\" rel=\"external\">BAE</a>上，不过丫的现在要收费了.</p>\n<h3 id=\"monkey-scripts\"><a href=\"#monkey-scripts\" class=\"headerlink\" title=\"monkey scripts\"></a><a href=\"/project/monkeys/index.html\">monkey scripts</a></h3>","excerpt":"","more":"<p>只是留出一个接口,以前放在<a href=\"http://developer.baidu.com/cloud/rt\">BAE</a>上，不过丫的现在要收费了.</p>\n<h3 id=\"monkey-scripts\"><a href=\"#monkey-scripts\" class=\"headerlink\" title=\"monkey scripts\"></a><a href=\"/project/monkeys/index.html\">monkey scripts</a></h3>"}],"PostAsset":[],"PostCategory":[{"post_id":"ciuyae20r000eyt7lr0wsv6rn","category_id":"ciuyae20o000cyt7l5ifx36er","_id":"ciuyae20z000jyt7l9bi0dwuz"},{"post_id":"ciuyae20h000ayt7lxg3kg1zo","category_id":"ciuyae20o000cyt7l5ifx36er","_id":"ciuyae211000myt7lgz055mzh"},{"post_id":"ciuyae20t000gyt7l33tzz6gp","category_id":"ciuyae20o000cyt7l5ifx36er","_id":"ciuyae214000oyt7lbpb0bits"},{"post_id":"ciuyae20w000iyt7l0v9plb17","category_id":"ciuyae20o000cyt7l5ifx36er","_id":"ciuyae215000ryt7lhkcikyaj"},{"post_id":"ciuyae20l000byt7llyxonxz1","category_id":"ciuyae20o000cyt7l5ifx36er","_id":"ciuyae217000tyt7lylr5rz4x"},{"post_id":"ciuyae210000lyt7ln2xkvq5c","category_id":"ciuyae20o000cyt7l5ifx36er","_id":"ciuyae219000vyt7lhm840u8n"},{"post_id":"ciuyae213000nyt7lwk69jwz4","category_id":"ciuyae20o000cyt7l5ifx36er","_id":"ciuyae21b000yyt7lqo4ggkkm"},{"post_id":"ciuyae214000pyt7l5ef7xaqu","category_id":"ciuyae20o000cyt7l5ifx36er","_id":"ciuyae21d0011yt7li4fkffv4"},{"post_id":"ciuyae215000syt7lleoo7pif","category_id":"ciuyae20o000cyt7l5ifx36er","_id":"ciuyae21e0014yt7lqkapk4sq"},{"post_id":"ciuyae217000uyt7l84ac0o7z","category_id":"ciuyae20o000cyt7l5ifx36er","_id":"ciuyae21g0017yt7lfk9masjd"},{"post_id":"ciuyae219000wyt7l49otcbzm","category_id":"ciuyae20o000cyt7l5ifx36er","_id":"ciuyae21i0019yt7l837hu9rh"},{"post_id":"ciuyae21b000zyt7lc9htmefi","category_id":"ciuyae20o000cyt7l5ifx36er","_id":"ciuyae21j001cyt7lnvegym4o"},{"post_id":"ciuyae21d0012yt7lfw8qofiv","category_id":"ciuyae20o000cyt7l5ifx36er","_id":"ciuyae21k001eyt7lfgol72iv"},{"post_id":"ciuyae21f0015yt7lkw3m429v","category_id":"ciuyae20o000cyt7l5ifx36er","_id":"ciuyae21l001hyt7lxrmyypeh"},{"post_id":"ciuyae21h0018yt7ldzwxbz6b","category_id":"ciuyae20o000cyt7l5ifx36er","_id":"ciuyae21m001kyt7l19kmouid"},{"post_id":"ciuyae21i001ayt7le6ytruxf","category_id":"ciuyae20o000cyt7l5ifx36er","_id":"ciuyae21n001myt7ltlbjfa88"},{"post_id":"ciuyae21k001fyt7lku0x74rm","category_id":"ciuyae20o000cyt7l5ifx36er","_id":"ciuyae21o001oyt7l0o5m45qn"},{"post_id":"ciuyae21m001lyt7lsdshgtxs","category_id":"ciuyae21l001gyt7l7k85unx1","_id":"ciuyae21p001qyt7lxtijgm2g"},{"post_id":"ciuyae21j001dyt7l4cvt9pdu","category_id":"ciuyae21l001gyt7l7k85unx1","_id":"ciuyae21p001tyt7lrrbqcp11"}],"PostTag":[{"post_id":"ciuyae20q000dyt7l1lfn7358","tag_id":"ciuyae20s000fyt7lwyi66bzu","_id":"ciuyae21a000xyt7lh5kkmx2m"},{"post_id":"ciuyae20q000dyt7l1lfn7358","tag_id":"ciuyae20z000kyt7lmgtcftfx","_id":"ciuyae21c0010yt7lhskrjmjf"},{"post_id":"ciuyae20q000dyt7l1lfn7358","tag_id":"ciuyae214000qyt7lfosv3f06","_id":"ciuyae21e0013yt7l93x3csbn"},{"post_id":"ciuyae21d0012yt7lfw8qofiv","tag_id":"ciuyae21g0016yt7l7xecmy4l","_id":"ciuyae21p001pyt7ll9id282k"},{"post_id":"ciuyae21d0012yt7lfw8qofiv","tag_id":"ciuyae21j001byt7lc2nsns3k","_id":"ciuyae21p001ryt7l5twxmans"},{"post_id":"ciuyae21d0012yt7lfw8qofiv","tag_id":"ciuyae21m001jyt7lsh4ee1uf","_id":"ciuyae21q001uyt7l5tcxi708"},{"post_id":"ciuyae21j001dyt7l4cvt9pdu","tag_id":"ciuyae21o001nyt7ltdungdg6","_id":"ciuyae21x001wyt7l6pbjllb4"},{"post_id":"ciuyae21j001dyt7l4cvt9pdu","tag_id":"ciuyae21p001syt7l96fey52t","_id":"ciuyae21x001xyt7lxo2zlav9"},{"post_id":"ciuyae21l001iyt7l64gkwj9h","tag_id":"ciuyae21q001vyt7lfehln0wq","_id":"ciuyae21z0021yt7llyzksn6m"},{"post_id":"ciuyae21l001iyt7l64gkwj9h","tag_id":"ciuyae21x001yyt7l5h4b4tf9","_id":"ciuyae21z0022yt7lajckey1x"},{"post_id":"ciuyae21l001iyt7l64gkwj9h","tag_id":"ciuyae21y001zyt7ls602vbx5","_id":"ciuyae21z0024yt7lcrja6tis"},{"post_id":"ciuyae21m001lyt7lsdshgtxs","tag_id":"ciuyae21o001nyt7ltdungdg6","_id":"ciuyae2200025yt7l4dq2fqc1"},{"post_id":"ciuyae21m001lyt7lsdshgtxs","tag_id":"ciuyae21p001syt7l96fey52t","_id":"ciuyae2200026yt7lggmj5s6r"}],"Tag":[{"name":"nginx","_id":"ciuyae20s000fyt7lwyi66bzu"},{"name":"server","_id":"ciuyae20z000kyt7lmgtcftfx"},{"name":"angular","_id":"ciuyae214000qyt7lfosv3f06"},{"name":"RabbitMQ","_id":"ciuyae21g0016yt7l7xecmy4l"},{"name":"Linux","_id":"ciuyae21j001byt7lc2nsns3k"},{"name":"Server","_id":"ciuyae21m001jyt7lsh4ee1uf"},{"name":"chrome","_id":"ciuyae21o001nyt7ltdungdg6"},{"name":"project","_id":"ciuyae21p001syt7l96fey52t"},{"name":"transcrypt","_id":"ciuyae21q001vyt7lfehln0wq"},{"name":"git-encrypt","_id":"ciuyae21x001yyt7l5h4b4tf9"},{"name":"git","_id":"ciuyae21y001zyt7ls602vbx5"}]}}